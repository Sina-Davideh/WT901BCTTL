
STM32F407ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa4  08004aa4  0000602c  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa4  08004aa4  00005aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aac  08004aac  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ab0  08004ab0  00005ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004ab4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000602c  2**0
                  CONTENTS
 10 .bss          00000360  2000002c  2000002c  0000602c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  0000602c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009673  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e1  00000000  00000000  0000f6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00010db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055c  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000124a  00000000  00000000  00011a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009101  00000000  00000000  00012c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf81a  00000000  00000000  0001bd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000db571  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c9c  00000000  00000000  000db5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000dd250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a6c 	.word	0x08004a6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08004a6c 	.word	0x08004a6c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b96a 	b.w	8000ac0 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	460c      	mov	r4, r1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14e      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000810:	4694      	mov	ip, r2
 8000812:	458c      	cmp	ip, r1
 8000814:	4686      	mov	lr, r0
 8000816:	fab2 f282 	clz	r2, r2
 800081a:	d962      	bls.n	80008e2 <__udivmoddi4+0xde>
 800081c:	b14a      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	4091      	lsls	r1, r2
 8000824:	fa20 f303 	lsr.w	r3, r0, r3
 8000828:	fa0c fc02 	lsl.w	ip, ip, r2
 800082c:	4319      	orrs	r1, r3
 800082e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f f68c 	uxth.w	r6, ip
 800083a:	fbb1 f4f7 	udiv	r4, r1, r7
 800083e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000842:	fb07 1114 	mls	r1, r7, r4, r1
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb04 f106 	mul.w	r1, r4, r6
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f104 30ff 	add.w	r0, r4, #4294967295
 800085a:	f080 8112 	bcs.w	8000a82 <__udivmoddi4+0x27e>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 810f 	bls.w	8000a82 <__udivmoddi4+0x27e>
 8000864:	3c02      	subs	r4, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a59      	subs	r1, r3, r1
 800086a:	fa1f f38e 	uxth.w	r3, lr
 800086e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000872:	fb07 1110 	mls	r1, r7, r0, r1
 8000876:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800087a:	fb00 f606 	mul.w	r6, r0, r6
 800087e:	429e      	cmp	r6, r3
 8000880:	d90a      	bls.n	8000898 <__udivmoddi4+0x94>
 8000882:	eb1c 0303 	adds.w	r3, ip, r3
 8000886:	f100 31ff 	add.w	r1, r0, #4294967295
 800088a:	f080 80fc 	bcs.w	8000a86 <__udivmoddi4+0x282>
 800088e:	429e      	cmp	r6, r3
 8000890:	f240 80f9 	bls.w	8000a86 <__udivmoddi4+0x282>
 8000894:	4463      	add	r3, ip
 8000896:	3802      	subs	r0, #2
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800089e:	2100      	movs	r1, #0
 80008a0:	b11d      	cbz	r5, 80008aa <__udivmoddi4+0xa6>
 80008a2:	40d3      	lsrs	r3, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	e9c5 3200 	strd	r3, r2, [r5]
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d905      	bls.n	80008be <__udivmoddi4+0xba>
 80008b2:	b10d      	cbz	r5, 80008b8 <__udivmoddi4+0xb4>
 80008b4:	e9c5 0100 	strd	r0, r1, [r5]
 80008b8:	2100      	movs	r1, #0
 80008ba:	4608      	mov	r0, r1
 80008bc:	e7f5      	b.n	80008aa <__udivmoddi4+0xa6>
 80008be:	fab3 f183 	clz	r1, r3
 80008c2:	2900      	cmp	r1, #0
 80008c4:	d146      	bne.n	8000954 <__udivmoddi4+0x150>
 80008c6:	42a3      	cmp	r3, r4
 80008c8:	d302      	bcc.n	80008d0 <__udivmoddi4+0xcc>
 80008ca:	4290      	cmp	r0, r2
 80008cc:	f0c0 80f0 	bcc.w	8000ab0 <__udivmoddi4+0x2ac>
 80008d0:	1a86      	subs	r6, r0, r2
 80008d2:	eb64 0303 	sbc.w	r3, r4, r3
 80008d6:	2001      	movs	r0, #1
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d0e6      	beq.n	80008aa <__udivmoddi4+0xa6>
 80008dc:	e9c5 6300 	strd	r6, r3, [r5]
 80008e0:	e7e3      	b.n	80008aa <__udivmoddi4+0xa6>
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x204>
 80008e8:	eba1 040c 	sub.w	r4, r1, ip
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	fa1f f78c 	uxth.w	r7, ip
 80008f4:	2101      	movs	r1, #1
 80008f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80008fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb07 f006 	mul.w	r0, r7, r6
 800090a:	4298      	cmp	r0, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x11c>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f106 34ff 	add.w	r4, r6, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x11a>
 8000918:	4298      	cmp	r0, r3
 800091a:	f200 80cd 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 800091e:	4626      	mov	r6, r4
 8000920:	1a1c      	subs	r4, r3, r0
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb4 f0f8 	udiv	r0, r4, r8
 800092a:	fb08 4410 	mls	r4, r8, r0, r4
 800092e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000932:	fb00 f707 	mul.w	r7, r0, r7
 8000936:	429f      	cmp	r7, r3
 8000938:	d908      	bls.n	800094c <__udivmoddi4+0x148>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000942:	d202      	bcs.n	800094a <__udivmoddi4+0x146>
 8000944:	429f      	cmp	r7, r3
 8000946:	f200 80b0 	bhi.w	8000aaa <__udivmoddi4+0x2a6>
 800094a:	4620      	mov	r0, r4
 800094c:	1bdb      	subs	r3, r3, r7
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	e7a5      	b.n	80008a0 <__udivmoddi4+0x9c>
 8000954:	f1c1 0620 	rsb	r6, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 f706 	lsr.w	r7, r2, r6
 800095e:	431f      	orrs	r7, r3
 8000960:	fa20 fc06 	lsr.w	ip, r0, r6
 8000964:	fa04 f301 	lsl.w	r3, r4, r1
 8000968:	ea43 030c 	orr.w	r3, r3, ip
 800096c:	40f4      	lsrs	r4, r6
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	0c38      	lsrs	r0, r7, #16
 8000974:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000978:	fbb4 fef0 	udiv	lr, r4, r0
 800097c:	fa1f fc87 	uxth.w	ip, r7
 8000980:	fb00 441e 	mls	r4, r0, lr, r4
 8000984:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000988:	fb0e f90c 	mul.w	r9, lr, ip
 800098c:	45a1      	cmp	r9, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90a      	bls.n	80009aa <__udivmoddi4+0x1a6>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f10e 3aff 	add.w	sl, lr, #4294967295
 800099a:	f080 8084 	bcs.w	8000aa6 <__udivmoddi4+0x2a2>
 800099e:	45a1      	cmp	r9, r4
 80009a0:	f240 8081 	bls.w	8000aa6 <__udivmoddi4+0x2a2>
 80009a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	eba4 0409 	sub.w	r4, r4, r9
 80009ae:	fa1f f983 	uxth.w	r9, r3
 80009b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009b6:	fb00 4413 	mls	r4, r0, r3, r4
 80009ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009be:	fb03 fc0c 	mul.w	ip, r3, ip
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d907      	bls.n	80009d6 <__udivmoddi4+0x1d2>
 80009c6:	193c      	adds	r4, r7, r4
 80009c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80009cc:	d267      	bcs.n	8000a9e <__udivmoddi4+0x29a>
 80009ce:	45a4      	cmp	ip, r4
 80009d0:	d965      	bls.n	8000a9e <__udivmoddi4+0x29a>
 80009d2:	3b02      	subs	r3, #2
 80009d4:	443c      	add	r4, r7
 80009d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009da:	fba0 9302 	umull	r9, r3, r0, r2
 80009de:	eba4 040c 	sub.w	r4, r4, ip
 80009e2:	429c      	cmp	r4, r3
 80009e4:	46ce      	mov	lr, r9
 80009e6:	469c      	mov	ip, r3
 80009e8:	d351      	bcc.n	8000a8e <__udivmoddi4+0x28a>
 80009ea:	d04e      	beq.n	8000a8a <__udivmoddi4+0x286>
 80009ec:	b155      	cbz	r5, 8000a04 <__udivmoddi4+0x200>
 80009ee:	ebb8 030e 	subs.w	r3, r8, lr
 80009f2:	eb64 040c 	sbc.w	r4, r4, ip
 80009f6:	fa04 f606 	lsl.w	r6, r4, r6
 80009fa:	40cb      	lsrs	r3, r1
 80009fc:	431e      	orrs	r6, r3
 80009fe:	40cc      	lsrs	r4, r1
 8000a00:	e9c5 6400 	strd	r6, r4, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	e750      	b.n	80008aa <__udivmoddi4+0xa6>
 8000a08:	f1c2 0320 	rsb	r3, r2, #32
 8000a0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	fa24 f303 	lsr.w	r3, r4, r3
 8000a18:	4094      	lsls	r4, r2
 8000a1a:	430c      	orrs	r4, r1
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a24:	fa1f f78c 	uxth.w	r7, ip
 8000a28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a30:	0c23      	lsrs	r3, r4, #16
 8000a32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a36:	fb00 f107 	mul.w	r1, r0, r7
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x24c>
 8000a3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a46:	d22c      	bcs.n	8000aa2 <__udivmoddi4+0x29e>
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d92a      	bls.n	8000aa2 <__udivmoddi4+0x29e>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a58:	fb08 3311 	mls	r3, r8, r1, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb01 f307 	mul.w	r3, r1, r7
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x276>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a70:	d213      	bcs.n	8000a9a <__udivmoddi4+0x296>
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	d911      	bls.n	8000a9a <__udivmoddi4+0x296>
 8000a76:	3902      	subs	r1, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	1ae4      	subs	r4, r4, r3
 8000a7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a80:	e739      	b.n	80008f6 <__udivmoddi4+0xf2>
 8000a82:	4604      	mov	r4, r0
 8000a84:	e6f0      	b.n	8000868 <__udivmoddi4+0x64>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e706      	b.n	8000898 <__udivmoddi4+0x94>
 8000a8a:	45c8      	cmp	r8, r9
 8000a8c:	d2ae      	bcs.n	80009ec <__udivmoddi4+0x1e8>
 8000a8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a96:	3801      	subs	r0, #1
 8000a98:	e7a8      	b.n	80009ec <__udivmoddi4+0x1e8>
 8000a9a:	4631      	mov	r1, r6
 8000a9c:	e7ed      	b.n	8000a7a <__udivmoddi4+0x276>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	e799      	b.n	80009d6 <__udivmoddi4+0x1d2>
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	e7d4      	b.n	8000a50 <__udivmoddi4+0x24c>
 8000aa6:	46d6      	mov	lr, sl
 8000aa8:	e77f      	b.n	80009aa <__udivmoddi4+0x1a6>
 8000aaa:	4463      	add	r3, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	e74d      	b.n	800094c <__udivmoddi4+0x148>
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e70f      	b.n	80008d8 <__udivmoddi4+0xd4>
 8000ab8:	3e02      	subs	r6, #2
 8000aba:	4463      	add	r3, ip
 8000abc:	e730      	b.n	8000920 <__udivmoddi4+0x11c>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <HAL_UART_TxCpltCallback+0x3c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d104      	bne.n	8000ae0 <HAL_UART_TxCpltCallback+0x1c>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000ad6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ada:	480a      	ldr	r0, [pc, #40]	@ (8000b04 <HAL_UART_TxCpltCallback+0x40>)
 8000adc:	f002 f917 	bl	8002d0e <HAL_GPIO_TogglePin>
	}

	if(huart->Instance == USART3){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_UART_TxCpltCallback+0x44>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d106      	bne.n	8000af8 <HAL_UART_TxCpltCallback+0x34>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <HAL_UART_TxCpltCallback+0x40>)
 8000af0:	f002 f90d 	bl	8002d0e <HAL_GPIO_TogglePin>
		WT901_Update_Message();
 8000af4:	f000 f880 	bl	8000bf8 <WT901_Update_Message>
	}
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40021400 	.word	0x40021400
 8000b08:	40004800 	.word	0x40004800

08000b0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <HAL_UART_RxCpltCallback+0x5c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d104      	bne.n	8000b28 <HAL_UART_RxCpltCallback+0x1c>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000b1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b22:	4812      	ldr	r0, [pc, #72]	@ (8000b6c <HAL_UART_RxCpltCallback+0x60>)
 8000b24:	f002 f8f3 	bl	8002d0e <HAL_GPIO_TogglePin>
	}

	if(huart->Instance == USART3){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <HAL_UART_RxCpltCallback+0x64>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d115      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x52>
		WT901_Update_Message();
 8000b32:	f000 f861 	bl	8000bf8 <WT901_Update_Message>
		for(uint8_t i = 0; i < 11; i++){
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e008      	b.n	8000b4e <HAL_UART_RxCpltCallback+0x42>
			CH340_TX_Buffer[i] = WT901_RX_Buffer[i];
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <HAL_UART_RxCpltCallback+0x68>)
 8000b42:	5c89      	ldrb	r1, [r1, r2]
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <HAL_UART_RxCpltCallback+0x6c>)
 8000b46:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 11; i++){
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	2b0a      	cmp	r3, #10
 8000b52:	d9f3      	bls.n	8000b3c <HAL_UART_RxCpltCallback+0x30>
		}
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000b54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <HAL_UART_RxCpltCallback+0x60>)
 8000b5a:	f002 f8d8 	bl	8002d0e <HAL_GPIO_TogglePin>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40021400 	.word	0x40021400
 8000b70:	40004800 	.word	0x40004800
 8000b74:	20000298 	.word	0x20000298
 8000b78:	20000258 	.word	0x20000258

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f001 f966 	bl	8001e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 fd8c 	bl	80016a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 fe8e 	bl	80018a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b8c:	f000 fe46 	bl	800181c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b90:	f000 fdf0 	bl	8001774 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b94:	f000 fe18 	bl	80017c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit_DMA(&huart3, WT901_TX_Buffer, sizeof(WT901_TX_Buffer));

  HAL_UART_Transmit_DMA(&huart3, WT901_TX_ALG, sizeof(WT901_TX_ALG));
 8000b98:	2205      	movs	r2, #5
 8000b9a:	490f      	ldr	r1, [pc, #60]	@ (8000bd8 <main+0x5c>)
 8000b9c:	480f      	ldr	r0, [pc, #60]	@ (8000bdc <main+0x60>)
 8000b9e:	f002 fdb9 	bl	8003714 <HAL_UART_Transmit_DMA>
  HAL_UART_Transmit_DMA(&huart3, WT901_TX_GYRO, sizeof(WT901_TX_GYRO));
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	490e      	ldr	r1, [pc, #56]	@ (8000be0 <main+0x64>)
 8000ba6:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <main+0x60>)
 8000ba8:	f002 fdb4 	bl	8003714 <HAL_UART_Transmit_DMA>
  HAL_UART_Transmit_DMA(&huart3, WT901_TX_Ret, sizeof(WT901_TX_Ret));
 8000bac:	2205      	movs	r2, #5
 8000bae:	490d      	ldr	r1, [pc, #52]	@ (8000be4 <main+0x68>)
 8000bb0:	480a      	ldr	r0, [pc, #40]	@ (8000bdc <main+0x60>)
 8000bb2:	f002 fdaf 	bl	8003714 <HAL_UART_Transmit_DMA>
  HAL_UART_Transmit_DMA(&huart3, WT901_TX_Save, sizeof(WT901_TX_Save));
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	490b      	ldr	r1, [pc, #44]	@ (8000be8 <main+0x6c>)
 8000bba:	4808      	ldr	r0, [pc, #32]	@ (8000bdc <main+0x60>)
 8000bbc:	f002 fdaa 	bl	8003714 <HAL_UART_Transmit_DMA>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit_DMA(&huart1, CH340_TX_Buffer, sizeof(CH340_TX_Buffer));
 8000bc0:	2240      	movs	r2, #64	@ 0x40
 8000bc2:	490a      	ldr	r1, [pc, #40]	@ (8000bec <main+0x70>)
 8000bc4:	480a      	ldr	r0, [pc, #40]	@ (8000bf0 <main+0x74>)
 8000bc6:	f002 fda5 	bl	8003714 <HAL_UART_Transmit_DMA>
//	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
//	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  HAL_Delay(500);
 8000bca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bce:	f001 f9b1 	bl	8001f34 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart1, CH340_TX_Buffer, sizeof(CH340_TX_Buffer));
 8000bd2:	bf00      	nop
 8000bd4:	e7f4      	b.n	8000bc0 <main+0x44>
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000090 	.word	0x20000090
 8000be0:	20000010 	.word	0x20000010
 8000be4:	20000018 	.word	0x20000018
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000258 	.word	0x20000258
 8000bf0:	20000048 	.word	0x20000048
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <WT901_Update_Message>:
  }
  /* USER CODE END 3 */
}

static void WT901_Update_Message(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, WT901_RX_Buffer, sizeof(WT901_RX_Buffer));
 8000bfe:	220b      	movs	r2, #11
 8000c00:	499f      	ldr	r1, [pc, #636]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c02:	48a0      	ldr	r0, [pc, #640]	@ (8000e84 <WT901_Update_Message+0x28c>)
 8000c04:	f002 fdf6 	bl	80037f4 <HAL_UART_Receive_DMA>

	Receive_Message_Struct_t Receive_Message_Temporary_Buffer;

	Receive_Message_Temporary_Buffer.First_Byte_Receive = WT901_RX_Buffer[0];
 8000c08:	4b9d      	ldr	r3, [pc, #628]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	703b      	strb	r3, [r7, #0]
	Receive_Message_Temporary_Buffer.Message_Address_Receive = WT901_RX_Buffer[1];
 8000c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c10:	785b      	ldrb	r3, [r3, #1]
 8000c12:	707b      	strb	r3, [r7, #1]
	Receive_Message_Temporary_Buffer.Data_Byte_0 = WT901_RX_Buffer[2];
 8000c14:	4b9a      	ldr	r3, [pc, #616]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	70bb      	strb	r3, [r7, #2]
	Receive_Message_Temporary_Buffer.Data_Byte_1 = WT901_RX_Buffer[3];
 8000c1a:	4b99      	ldr	r3, [pc, #612]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c1c:	78db      	ldrb	r3, [r3, #3]
 8000c1e:	70fb      	strb	r3, [r7, #3]
	Receive_Message_Temporary_Buffer.Data_Byte_2 = WT901_RX_Buffer[4];
 8000c20:	4b97      	ldr	r3, [pc, #604]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	713b      	strb	r3, [r7, #4]
	Receive_Message_Temporary_Buffer.Data_Byte_3 = WT901_RX_Buffer[5];
 8000c26:	4b96      	ldr	r3, [pc, #600]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	717b      	strb	r3, [r7, #5]
	Receive_Message_Temporary_Buffer.Data_Byte_4 = WT901_RX_Buffer[6];
 8000c2c:	4b94      	ldr	r3, [pc, #592]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c2e:	799b      	ldrb	r3, [r3, #6]
 8000c30:	71bb      	strb	r3, [r7, #6]
	Receive_Message_Temporary_Buffer.Data_Byte_5 = WT901_RX_Buffer[7];
 8000c32:	4b93      	ldr	r3, [pc, #588]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c34:	79db      	ldrb	r3, [r3, #7]
 8000c36:	71fb      	strb	r3, [r7, #7]
	Receive_Message_Temporary_Buffer.Data_Byte_6 = WT901_RX_Buffer[8];
 8000c38:	4b91      	ldr	r3, [pc, #580]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c3a:	7a1b      	ldrb	r3, [r3, #8]
 8000c3c:	723b      	strb	r3, [r7, #8]
	Receive_Message_Temporary_Buffer.Data_Byte_7 = WT901_RX_Buffer[9];
 8000c3e:	4b90      	ldr	r3, [pc, #576]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c40:	7a5b      	ldrb	r3, [r3, #9]
 8000c42:	727b      	strb	r3, [r7, #9]
	Receive_Message_Temporary_Buffer.Checksum = WT901_RX_Buffer[10];
 8000c44:	4b8e      	ldr	r3, [pc, #568]	@ (8000e80 <WT901_Update_Message+0x288>)
 8000c46:	7a9b      	ldrb	r3, [r3, #10]
 8000c48:	72bb      	strb	r3, [r7, #10]


	uint16_t Receive_Message_Validate = Receive_Message_Temporary_Buffer.First_Byte_Receive \
 8000c4a:	783b      	ldrb	r3, [r7, #0]
 8000c4c:	461a      	mov	r2, r3
									  + Receive_Message_Temporary_Buffer.Message_Address_Receive \
 8000c4e:	787b      	ldrb	r3, [r7, #1]
 8000c50:	4413      	add	r3, r2
 8000c52:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_0 \
 8000c54:	78ba      	ldrb	r2, [r7, #2]
 8000c56:	4413      	add	r3, r2
 8000c58:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_1 \
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_2 \
 8000c60:	793a      	ldrb	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_3 \
 8000c66:	797a      	ldrb	r2, [r7, #5]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_4 \
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_5 \
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_6 \
 8000c78:	7a3a      	ldrb	r2, [r7, #8]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_7;
 8000c7e:	7a7a      	ldrb	r2, [r7, #9]
	uint16_t Receive_Message_Validate = Receive_Message_Temporary_Buffer.First_Byte_Receive \
 8000c80:	4413      	add	r3, r2
 8000c82:	81fb      	strh	r3, [r7, #14]


	Receive_Message_Addr_e Receive_Message_Addr = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	737b      	strb	r3, [r7, #13]


	if(Receive_Message_Temporary_Buffer.First_Byte_Receive == First_Byte_Receive_Data_Pack && \
 8000c88:	783b      	ldrb	r3, [r7, #0]
 8000c8a:	2255      	movs	r2, #85	@ 0x55
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	f040 84ff 	bne.w	8001690 <WT901_Update_Message+0xa98>
	  (Receive_Message_Validate & Receive_Message_Temporary_Buffer.Checksum) == Receive_Message_Temporary_Buffer.Checksum){
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	7aba      	ldrb	r2, [r7, #10]
 8000c96:	4013      	ands	r3, r2
 8000c98:	7aba      	ldrb	r2, [r7, #10]
	if(Receive_Message_Temporary_Buffer.First_Byte_Receive == First_Byte_Receive_Data_Pack && \
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	f040 84f8 	bne.w	8001690 <WT901_Update_Message+0xa98>
		switch (Receive_Message_Addr) {
 8000ca0:	7b7b      	ldrb	r3, [r7, #13]
 8000ca2:	3b50      	subs	r3, #80	@ 0x50
 8000ca4:	2b0a      	cmp	r3, #10
 8000ca6:	f200 84f4 	bhi.w	8001692 <WT901_Update_Message+0xa9a>
 8000caa:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb0 <WT901_Update_Message+0xb8>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cdd 	.word	0x08000cdd
 8000cb4:	08000d3b 	.word	0x08000d3b
 8000cb8:	08000e91 	.word	0x08000e91
 8000cbc:	08000fa1 	.word	0x08000fa1
 8000cc0:	080010c5 	.word	0x080010c5
 8000cc4:	0800119d 	.word	0x0800119d
 8000cc8:	0800126f 	.word	0x0800126f
 8000ccc:	08001329 	.word	0x08001329
 8000cd0:	080013db 	.word	0x080013db
 8000cd4:	080014b5 	.word	0x080014b5
 8000cd8:	080015ad 	.word	0x080015ad
		  case Time:
			  WT901_Out_msg.Time.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8000cdc:	783a      	ldrb	r2, [r7, #0]
 8000cde:	4b6a      	ldr	r3, [pc, #424]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000ce0:	701a      	strb	r2, [r3, #0]
			  WT901_Out_msg.Time.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8000ce2:	787a      	ldrb	r2, [r7, #1]
 8000ce4:	4b68      	ldr	r3, [pc, #416]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000ce6:	705a      	strb	r2, [r3, #1]
			  WT901_Out_msg.Time.Registers.YY 		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8000ce8:	78ba      	ldrb	r2, [r7, #2]
 8000cea:	4b67      	ldr	r3, [pc, #412]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000cec:	709a      	strb	r2, [r3, #2]
			  WT901_Out_msg.Time.Registers.MM 		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8000cee:	78fa      	ldrb	r2, [r7, #3]
 8000cf0:	4b65      	ldr	r3, [pc, #404]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000cf2:	70da      	strb	r2, [r3, #3]
			  WT901_Out_msg.Time.Registers.DD 		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8000cf4:	793a      	ldrb	r2, [r7, #4]
 8000cf6:	4b64      	ldr	r3, [pc, #400]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000cf8:	711a      	strb	r2, [r3, #4]
			  WT901_Out_msg.Time.Registers.hh 		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8000cfa:	797a      	ldrb	r2, [r7, #5]
 8000cfc:	4b62      	ldr	r3, [pc, #392]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000cfe:	715a      	strb	r2, [r3, #5]
			  WT901_Out_msg.Time.Registers.mm 		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8000d00:	79ba      	ldrb	r2, [r7, #6]
 8000d02:	4b61      	ldr	r3, [pc, #388]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d04:	719a      	strb	r2, [r3, #6]
			  WT901_Out_msg.Time.Registers.ss 		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	4b5f      	ldr	r3, [pc, #380]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d0a:	71da      	strb	r2, [r3, #7]
			  WT901_Out_msg.Time.Registers.msL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8000d0c:	7a3a      	ldrb	r2, [r7, #8]
 8000d0e:	4b5e      	ldr	r3, [pc, #376]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d10:	721a      	strb	r2, [r3, #8]
			  WT901_Out_msg.Time.Registers.msH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8000d12:	7a7a      	ldrb	r2, [r7, #9]
 8000d14:	4b5c      	ldr	r3, [pc, #368]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d16:	725a      	strb	r2, [r3, #9]
			  WT901_Out_msg.Time.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8000d18:	7aba      	ldrb	r2, [r7, #10]
 8000d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d1c:	729a      	strb	r2, [r3, #10]

			  WT901_Out_msg.Time.Millisecond = ((WT901_Out_msg.Time.Registers.msH << 8) | WT901_Out_msg.Time.Registers.msL);
 8000d1e:	4b5a      	ldr	r3, [pc, #360]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d20:	7a5b      	ldrb	r3, [r3, #9]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	4b58      	ldr	r3, [pc, #352]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d28:	7a1b      	ldrb	r3, [r3, #8]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b55      	ldr	r3, [pc, #340]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d34:	829a      	strh	r2, [r3, #20]
			break;
 8000d36:	f000 bcac 	b.w	8001692 <WT901_Update_Message+0xa9a>

		  case Acceleration:
				WT901_Out_msg.Acceleration.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8000d3a:	783a      	ldrb	r2, [r7, #0]
 8000d3c:	4b52      	ldr	r3, [pc, #328]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d3e:	771a      	strb	r2, [r3, #28]
				WT901_Out_msg.Acceleration.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8000d40:	787a      	ldrb	r2, [r7, #1]
 8000d42:	4b51      	ldr	r3, [pc, #324]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d44:	775a      	strb	r2, [r3, #29]
				WT901_Out_msg.Acceleration.Registers.AxL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8000d46:	78ba      	ldrb	r2, [r7, #2]
 8000d48:	4b4f      	ldr	r3, [pc, #316]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d4a:	779a      	strb	r2, [r3, #30]
				WT901_Out_msg.Acceleration.Registers.AxH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8000d4c:	78fa      	ldrb	r2, [r7, #3]
 8000d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d50:	77da      	strb	r2, [r3, #31]
				WT901_Out_msg.Acceleration.Registers.AyL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8000d52:	793a      	ldrb	r2, [r7, #4]
 8000d54:	4b4c      	ldr	r3, [pc, #304]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
				WT901_Out_msg.Acceleration.Registers.AyH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8000d5a:	797a      	ldrb	r2, [r7, #5]
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				WT901_Out_msg.Acceleration.Registers.AzL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8000d62:	79ba      	ldrb	r2, [r7, #6]
 8000d64:	4b48      	ldr	r3, [pc, #288]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d66:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
				WT901_Out_msg.Acceleration.Registers.AzH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	4b46      	ldr	r3, [pc, #280]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d6e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
				WT901_Out_msg.Acceleration.Registers.TL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8000d72:	7a3a      	ldrb	r2, [r7, #8]
 8000d74:	4b44      	ldr	r3, [pc, #272]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				WT901_Out_msg.Acceleration.Registers.TH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8000d7a:	7a7a      	ldrb	r2, [r7, #9]
 8000d7c:	4b42      	ldr	r3, [pc, #264]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				WT901_Out_msg.Acceleration.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8000d82:	7aba      	ldrb	r2, [r7, #10]
 8000d84:	4b40      	ldr	r3, [pc, #256]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d86:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

				WT901_Out_msg.Acceleration.X_Acceleration = ((WT901_Out_msg.Acceleration.Registers.AxH << 8) | WT901_Out_msg.Acceleration.Registers.AxL) / 32768 * 16 * 9.8;
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d8c:	7fdb      	ldrb	r3, [r3, #31]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	4a3d      	ldr	r2, [pc, #244]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000d92:	7f92      	ldrb	r2, [r2, #30]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da02      	bge.n	8000da0 <WT901_Update_Message+0x1a8>
 8000d9a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000d9e:	337f      	adds	r3, #127	@ 0x7f
 8000da0:	13db      	asrs	r3, r3, #15
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc8b 	bl	80006c0 <__aeabi_i2d>
 8000daa:	a333      	add	r3, pc, #204	@ (adr r3, 8000e78 <WT901_Update_Message+0x280>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff fa0a 	bl	80001c8 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fcea 	bl	8000794 <__aeabi_d2uiz>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b30      	ldr	r3, [pc, #192]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
				WT901_Out_msg.Acceleration.Y_Acceleration = ((WT901_Out_msg.Acceleration.Registers.AyH << 8) | WT901_Out_msg.Acceleration.Registers.AyL) / 32768 * 16 * 9.8;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000dca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000dd2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	da02      	bge.n	8000de2 <WT901_Update_Message+0x1ea>
 8000ddc:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000de0:	337f      	adds	r3, #127	@ 0x7f
 8000de2:	13db      	asrs	r3, r3, #15
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fc6a 	bl	80006c0 <__aeabi_i2d>
 8000dec:	a322      	add	r3, pc, #136	@ (adr r3, 8000e78 <WT901_Update_Message+0x280>)
 8000dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df2:	f7ff f9e9 	bl	80001c8 <__aeabi_dmul>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f7ff fcc9 	bl	8000794 <__aeabi_d2uiz>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
				WT901_Out_msg.Acceleration.Z_Acceleration = ((WT901_Out_msg.Acceleration.Registers.AzH << 8) | WT901_Out_msg.Acceleration.Registers.AzL) / 32768 * 16 * 9.8;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000e0c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000e14:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da02      	bge.n	8000e24 <WT901_Update_Message+0x22c>
 8000e1e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000e22:	337f      	adds	r3, #127	@ 0x7f
 8000e24:	13db      	asrs	r3, r3, #15
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fc49 	bl	80006c0 <__aeabi_i2d>
 8000e2e:	a312      	add	r3, pc, #72	@ (adr r3, 8000e78 <WT901_Update_Message+0x280>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff f9c8 	bl	80001c8 <__aeabi_dmul>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fca8 	bl	8000794 <__aeabi_d2uiz>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000e4a:	859a      	strh	r2, [r3, #44]	@ 0x2c
				WT901_Out_msg.Acceleration.Temperature = ((WT901_Out_msg.Acceleration.Registers.TH << 8) | WT901_Out_msg.Acceleration.Registers.TL) / 100;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000e4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000e56:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e8c <WT901_Update_Message+0x294>)
 8000e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e62:	1152      	asrs	r2, r2, #5
 8000e64:	17db      	asrs	r3, r3, #31
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <WT901_Update_Message+0x290>)
 8000e6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
			break;
 8000e6e:	f000 bc10 	b.w	8001692 <WT901_Update_Message+0xa9a>
 8000e72:	bf00      	nop
 8000e74:	f3af 8000 	nop.w
 8000e78:	9999999a 	.word	0x9999999a
 8000e7c:	40239999 	.word	0x40239999
 8000e80:	20000298 	.word	0x20000298
 8000e84:	20000090 	.word	0x20000090
 8000e88:	200002a4 	.word	0x200002a4
 8000e8c:	51eb851f 	.word	0x51eb851f

		  case Angular_Velocity:
			  WT901_Out_msg.Angular_Velocity.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8000e90:	783a      	ldrb	r2, [r7, #0]
 8000e92:	4b8a      	ldr	r3, [pc, #552]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000e94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			  WT901_Out_msg.Angular_Velocity.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8000e98:	787a      	ldrb	r2, [r7, #1]
 8000e9a:	4b88      	ldr	r3, [pc, #544]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000e9c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			  WT901_Out_msg.Angular_Velocity.Registers.WxL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8000ea0:	78ba      	ldrb	r2, [r7, #2]
 8000ea2:	4b86      	ldr	r3, [pc, #536]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ea4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			  WT901_Out_msg.Angular_Velocity.Registers.WxH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	4b84      	ldr	r3, [pc, #528]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000eac:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
			  WT901_Out_msg.Angular_Velocity.Registers.WyL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8000eb0:	793a      	ldrb	r2, [r7, #4]
 8000eb2:	4b82      	ldr	r3, [pc, #520]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			  WT901_Out_msg.Angular_Velocity.Registers.WyH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8000eb8:	797a      	ldrb	r2, [r7, #5]
 8000eba:	4b80      	ldr	r3, [pc, #512]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
			  WT901_Out_msg.Angular_Velocity.Registers.WzL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8000ec0:	79ba      	ldrb	r2, [r7, #6]
 8000ec2:	4b7e      	ldr	r3, [pc, #504]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ec4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
			  WT901_Out_msg.Angular_Velocity.Registers.WzH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	4b7c      	ldr	r3, [pc, #496]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ecc:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
			  WT901_Out_msg.Angular_Velocity.Registers.TL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8000ed0:	7a3a      	ldrb	r2, [r7, #8]
 8000ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ed4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			  WT901_Out_msg.Angular_Velocity.Registers.TH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8000ed8:	7a7a      	ldrb	r2, [r7, #9]
 8000eda:	4b78      	ldr	r3, [pc, #480]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000edc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			  WT901_Out_msg.Angular_Velocity.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8000ee0:	7aba      	ldrb	r2, [r7, #10]
 8000ee2:	4b76      	ldr	r3, [pc, #472]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ee4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

			  WT901_Out_msg.Angular_Velocity.X_Angular_Velocity = ((WT901_Out_msg.Angular_Velocity.Registers.WxH << 8) | WT901_Out_msg.Angular_Velocity.Registers.WxL) / 32768 * 2000;
 8000ee8:	4b74      	ldr	r3, [pc, #464]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000eea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	4a72      	ldr	r2, [pc, #456]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ef2:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da02      	bge.n	8000f02 <WT901_Update_Message+0x30a>
 8000efc:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f00:	337f      	adds	r3, #127	@ 0x7f
 8000f02:	13db      	asrs	r3, r3, #15
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	0152      	lsls	r2, r2, #5
 8000f0a:	1ad2      	subs	r2, r2, r3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b69      	ldr	r3, [pc, #420]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f16:	879a      	strh	r2, [r3, #60]	@ 0x3c
			  WT901_Out_msg.Angular_Velocity.Y_Angular_Velocity = ((WT901_Out_msg.Angular_Velocity.Registers.WyH << 8) | WT901_Out_msg.Angular_Velocity.Registers.WyL) / 32768 * 2000;
 8000f18:	4b68      	ldr	r3, [pc, #416]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	4a66      	ldr	r2, [pc, #408]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f22:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8000f26:	4313      	orrs	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da02      	bge.n	8000f32 <WT901_Update_Message+0x33a>
 8000f2c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f30:	337f      	adds	r3, #127	@ 0x7f
 8000f32:	13db      	asrs	r3, r3, #15
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	0152      	lsls	r2, r2, #5
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b5d      	ldr	r3, [pc, #372]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
			  WT901_Out_msg.Angular_Velocity.Z_Angular_Velocity = ((WT901_Out_msg.Angular_Velocity.Registers.WzH << 8) | WT901_Out_msg.Angular_Velocity.Registers.WzL) / 32768 * 2000;
 8000f48:	4b5c      	ldr	r3, [pc, #368]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f4a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	4a5a      	ldr	r2, [pc, #360]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f52:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8000f56:	4313      	orrs	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da02      	bge.n	8000f62 <WT901_Update_Message+0x36a>
 8000f5c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000f60:	337f      	adds	r3, #127	@ 0x7f
 8000f62:	13db      	asrs	r3, r3, #15
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	0152      	lsls	r2, r2, #5
 8000f6a:	1ad2      	subs	r2, r2, r3
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b51      	ldr	r3, [pc, #324]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			  WT901_Out_msg.Angular_Velocity.Temperature = ((WT901_Out_msg.Angular_Velocity.Registers.TH << 8) | WT901_Out_msg.Angular_Velocity.Registers.TL) / 100;
 8000f7a:	4b50      	ldr	r3, [pc, #320]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	4a4e      	ldr	r2, [pc, #312]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f84:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80010c0 <WT901_Update_Message+0x4c8>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1152      	asrs	r2, r2, #5
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b48      	ldr	r3, [pc, #288]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000f9a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
			break;
 8000f9e:	e378      	b.n	8001692 <WT901_Update_Message+0xa9a>

		  case Angle:
			  WT901_Out_msg.Angle.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8000fa0:	783a      	ldrb	r2, [r7, #0]
 8000fa2:	4b46      	ldr	r3, [pc, #280]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			  WT901_Out_msg.Angle.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8000fa8:	787a      	ldrb	r2, [r7, #1]
 8000faa:	4b44      	ldr	r3, [pc, #272]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			  WT901_Out_msg.Angle.Registers.RollL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8000fb0:	78ba      	ldrb	r2, [r7, #2]
 8000fb2:	4b42      	ldr	r3, [pc, #264]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			  WT901_Out_msg.Angle.Registers.RollH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	4b40      	ldr	r3, [pc, #256]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			  WT901_Out_msg.Angle.Registers.PitchL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8000fc0:	793a      	ldrb	r2, [r7, #4]
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			  WT901_Out_msg.Angle.Registers.PitchH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8000fc8:	797a      	ldrb	r2, [r7, #5]
 8000fca:	4b3c      	ldr	r3, [pc, #240]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fcc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
			  WT901_Out_msg.Angle.Registers.YawL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8000fd0:	79ba      	ldrb	r2, [r7, #6]
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fd4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
			  WT901_Out_msg.Angle.Registers.YawH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fdc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
			  WT901_Out_msg.Angle.Registers.TL 		 	 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8000fe0:	7a3a      	ldrb	r2, [r7, #8]
 8000fe2:	4b36      	ldr	r3, [pc, #216]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fe4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			  WT901_Out_msg.Angle.Registers.TH 		 	 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8000fe8:	7a7a      	ldrb	r2, [r7, #9]
 8000fea:	4b34      	ldr	r3, [pc, #208]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000fec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			  WT901_Out_msg.Angle.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8000ff0:	7aba      	ldrb	r2, [r7, #10]
 8000ff2:	4b32      	ldr	r3, [pc, #200]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ff4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

			  WT901_Out_msg.Angle.Roll 	= ((WT901_Out_msg.Angle.Registers.RollH << 8)  | WT901_Out_msg.Angle.Registers.RollL)  / 32768 * 180;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8000ffa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8001002:	f892 2046 	ldrb.w	r2, [r2, #70]	@ 0x46
 8001006:	4313      	orrs	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	da02      	bge.n	8001012 <WT901_Update_Message+0x41a>
 800100c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001010:	337f      	adds	r3, #127	@ 0x7f
 8001012:	13db      	asrs	r3, r3, #15
 8001014:	b29b      	uxth	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	0052      	lsls	r2, r2, #1
 800101a:	4413      	add	r3, r2
 800101c:	461a      	mov	r2, r3
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8001028:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			  WT901_Out_msg.Angle.Pitch = ((WT901_Out_msg.Angle.Registers.PitchH << 8) | WT901_Out_msg.Angle.Registers.PitchL) / 32768 * 180;
 800102c:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <WT901_Update_Message+0x4c4>)
 800102e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8001036:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800103a:	4313      	orrs	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	da02      	bge.n	8001046 <WT901_Update_Message+0x44e>
 8001040:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001044:	337f      	adds	r3, #127	@ 0x7f
 8001046:	13db      	asrs	r3, r3, #15
 8001048:	b29b      	uxth	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	0052      	lsls	r2, r2, #1
 800104e:	4413      	add	r3, r2
 8001050:	461a      	mov	r2, r3
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <WT901_Update_Message+0x4c4>)
 800105c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			  WT901_Out_msg.Angle.Yaw 	= ((WT901_Out_msg.Angle.Registers.YawH << 8)   | WT901_Out_msg.Angle.Registers.YawL)   / 32768 * 180;
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8001062:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <WT901_Update_Message+0x4c4>)
 800106a:	f892 204a 	ldrb.w	r2, [r2, #74]	@ 0x4a
 800106e:	4313      	orrs	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	da02      	bge.n	800107a <WT901_Update_Message+0x482>
 8001074:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001078:	337f      	adds	r3, #127	@ 0x7f
 800107a:	13db      	asrs	r3, r3, #15
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	0052      	lsls	r2, r2, #1
 8001082:	4413      	add	r3, r2
 8001084:	461a      	mov	r2, r3
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8001090:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			  WT901_Out_msg.Angle.Temperature = ((WT901_Out_msg.Angle.Registers.TH << 8) | WT901_Out_msg.Angle.Registers.TL) / 100;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <WT901_Update_Message+0x4c4>)
 8001096:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <WT901_Update_Message+0x4c4>)
 800109e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80010a2:	4313      	orrs	r3, r2
 80010a4:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <WT901_Update_Message+0x4c8>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1152      	asrs	r2, r2, #5
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b02      	ldr	r3, [pc, #8]	@ (80010bc <WT901_Update_Message+0x4c4>)
 80010b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			break;
 80010b8:	e2eb      	b.n	8001692 <WT901_Update_Message+0xa9a>
 80010ba:	bf00      	nop
 80010bc:	200002a4 	.word	0x200002a4
 80010c0:	51eb851f 	.word	0x51eb851f

		  case Magnetic:
			  WT901_Out_msg.Magnetic.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 80010c4:	783a      	ldrb	r2, [r7, #0]
 80010c6:	4b96      	ldr	r3, [pc, #600]	@ (8001320 <WT901_Update_Message+0x728>)
 80010c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			  WT901_Out_msg.Magnetic.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80010cc:	787a      	ldrb	r2, [r7, #1]
 80010ce:	4b94      	ldr	r3, [pc, #592]	@ (8001320 <WT901_Update_Message+0x728>)
 80010d0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			  WT901_Out_msg.Magnetic.Registers.HxL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 80010d4:	78ba      	ldrb	r2, [r7, #2]
 80010d6:	4b92      	ldr	r3, [pc, #584]	@ (8001320 <WT901_Update_Message+0x728>)
 80010d8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			  WT901_Out_msg.Magnetic.Registers.HxH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	4b90      	ldr	r3, [pc, #576]	@ (8001320 <WT901_Update_Message+0x728>)
 80010e0:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
			  WT901_Out_msg.Magnetic.Registers.HyL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 80010e4:	793a      	ldrb	r2, [r7, #4]
 80010e6:	4b8e      	ldr	r3, [pc, #568]	@ (8001320 <WT901_Update_Message+0x728>)
 80010e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			  WT901_Out_msg.Magnetic.Registers.HyH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 80010ec:	797a      	ldrb	r2, [r7, #5]
 80010ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001320 <WT901_Update_Message+0x728>)
 80010f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			  WT901_Out_msg.Magnetic.Registers.HzL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 80010f4:	79ba      	ldrb	r2, [r7, #6]
 80010f6:	4b8a      	ldr	r3, [pc, #552]	@ (8001320 <WT901_Update_Message+0x728>)
 80010f8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			  WT901_Out_msg.Magnetic.Registers.HzH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	4b88      	ldr	r3, [pc, #544]	@ (8001320 <WT901_Update_Message+0x728>)
 8001100:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			  WT901_Out_msg.Magnetic.Registers.TL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8001104:	7a3a      	ldrb	r2, [r7, #8]
 8001106:	4b86      	ldr	r3, [pc, #536]	@ (8001320 <WT901_Update_Message+0x728>)
 8001108:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			  WT901_Out_msg.Magnetic.Registers.TH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 800110c:	7a7a      	ldrb	r2, [r7, #9]
 800110e:	4b84      	ldr	r3, [pc, #528]	@ (8001320 <WT901_Update_Message+0x728>)
 8001110:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			  WT901_Out_msg.Magnetic.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8001114:	7aba      	ldrb	r2, [r7, #10]
 8001116:	4b82      	ldr	r3, [pc, #520]	@ (8001320 <WT901_Update_Message+0x728>)
 8001118:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

			  WT901_Out_msg.Magnetic.X_Magnetic = ((WT901_Out_msg.Magnetic.Registers.HxH << 8) | WT901_Out_msg.Magnetic.Registers.HxL);
 800111c:	4b80      	ldr	r3, [pc, #512]	@ (8001320 <WT901_Update_Message+0x728>)
 800111e:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b7e      	ldr	r3, [pc, #504]	@ (8001320 <WT901_Update_Message+0x728>)
 8001128:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b7a      	ldr	r3, [pc, #488]	@ (8001320 <WT901_Update_Message+0x728>)
 8001136:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
			  WT901_Out_msg.Magnetic.Y_Magnetic = ((WT901_Out_msg.Magnetic.Registers.HyH << 8) | WT901_Out_msg.Magnetic.Registers.HyL);
 800113a:	4b79      	ldr	r3, [pc, #484]	@ (8001320 <WT901_Update_Message+0x728>)
 800113c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b76      	ldr	r3, [pc, #472]	@ (8001320 <WT901_Update_Message+0x728>)
 8001146:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b73      	ldr	r3, [pc, #460]	@ (8001320 <WT901_Update_Message+0x728>)
 8001154:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
			  WT901_Out_msg.Magnetic.Z_Magnetic = ((WT901_Out_msg.Magnetic.Registers.HzH << 8) | WT901_Out_msg.Magnetic.Registers.HzL);
 8001158:	4b71      	ldr	r3, [pc, #452]	@ (8001320 <WT901_Update_Message+0x728>)
 800115a:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b6f      	ldr	r3, [pc, #444]	@ (8001320 <WT901_Update_Message+0x728>)
 8001164:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <WT901_Update_Message+0x728>)
 8001172:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
			  WT901_Out_msg.Magnetic.Temperature = ((WT901_Out_msg.Magnetic.Registers.TH << 8) | WT901_Out_msg.Magnetic.Registers.TL) / 100;
 8001176:	4b6a      	ldr	r3, [pc, #424]	@ (8001320 <WT901_Update_Message+0x728>)
 8001178:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	4a68      	ldr	r2, [pc, #416]	@ (8001320 <WT901_Update_Message+0x728>)
 8001180:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001184:	4313      	orrs	r3, r2
 8001186:	4a67      	ldr	r2, [pc, #412]	@ (8001324 <WT901_Update_Message+0x72c>)
 8001188:	fb82 1203 	smull	r1, r2, r2, r3
 800118c:	1152      	asrs	r2, r2, #5
 800118e:	17db      	asrs	r3, r3, #31
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b62      	ldr	r3, [pc, #392]	@ (8001320 <WT901_Update_Message+0x728>)
 8001196:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
			break;
 800119a:	e27a      	b.n	8001692 <WT901_Update_Message+0xa9a>

		  case Data_Port_Status:
			  WT901_Out_msg.Data_Port_Status.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 800119c:	783a      	ldrb	r2, [r7, #0]
 800119e:	4b60      	ldr	r3, [pc, #384]	@ (8001320 <WT901_Update_Message+0x728>)
 80011a0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
			  WT901_Out_msg.Data_Port_Status.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80011a4:	787a      	ldrb	r2, [r7, #1]
 80011a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001320 <WT901_Update_Message+0x728>)
 80011a8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
			  WT901_Out_msg.Data_Port_Status.Registers.D0L		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 80011ac:	78ba      	ldrb	r2, [r7, #2]
 80011ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001320 <WT901_Update_Message+0x728>)
 80011b0:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
			  WT901_Out_msg.Data_Port_Status.Registers.D0H		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 80011b4:	78fa      	ldrb	r2, [r7, #3]
 80011b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001320 <WT901_Update_Message+0x728>)
 80011b8:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
			  WT901_Out_msg.Data_Port_Status.Registers.D1L		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 80011bc:	793a      	ldrb	r2, [r7, #4]
 80011be:	4b58      	ldr	r3, [pc, #352]	@ (8001320 <WT901_Update_Message+0x728>)
 80011c0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			  WT901_Out_msg.Data_Port_Status.Registers.D1H		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 80011c4:	797a      	ldrb	r2, [r7, #5]
 80011c6:	4b56      	ldr	r3, [pc, #344]	@ (8001320 <WT901_Update_Message+0x728>)
 80011c8:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
			  WT901_Out_msg.Data_Port_Status.Registers.D2L		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	4b54      	ldr	r3, [pc, #336]	@ (8001320 <WT901_Update_Message+0x728>)
 80011d0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
			  WT901_Out_msg.Data_Port_Status.Registers.D2H		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	4b52      	ldr	r3, [pc, #328]	@ (8001320 <WT901_Update_Message+0x728>)
 80011d8:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
			  WT901_Out_msg.Data_Port_Status.Registers.D3L 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 80011dc:	7a3a      	ldrb	r2, [r7, #8]
 80011de:	4b50      	ldr	r3, [pc, #320]	@ (8001320 <WT901_Update_Message+0x728>)
 80011e0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
			  WT901_Out_msg.Data_Port_Status.Registers.D3H 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 80011e4:	7a7a      	ldrb	r2, [r7, #9]
 80011e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001320 <WT901_Update_Message+0x728>)
 80011e8:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
			  WT901_Out_msg.Data_Port_Status.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 80011ec:	7aba      	ldrb	r2, [r7, #10]
 80011ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001320 <WT901_Update_Message+0x728>)
 80011f0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

			  WT901_Out_msg.Data_Port_Status.Port_0 = (WT901_Out_msg.Data_Port_Status.Registers.D0H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D0L;
 80011f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001320 <WT901_Update_Message+0x728>)
 80011f6:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b48      	ldr	r3, [pc, #288]	@ (8001320 <WT901_Update_Message+0x728>)
 8001200:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21b      	sxth	r3, r3
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <WT901_Update_Message+0x728>)
 800120e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
			  WT901_Out_msg.Data_Port_Status.Port_1 = (WT901_Out_msg.Data_Port_Status.Registers.D1H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D1L;
 8001212:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <WT901_Update_Message+0x728>)
 8001214:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <WT901_Update_Message+0x728>)
 800121e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b3d      	ldr	r3, [pc, #244]	@ (8001320 <WT901_Update_Message+0x728>)
 800122c:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
			  WT901_Out_msg.Data_Port_Status.Port_2 = (WT901_Out_msg.Data_Port_Status.Registers.D2H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D2L;
 8001230:	4b3b      	ldr	r3, [pc, #236]	@ (8001320 <WT901_Update_Message+0x728>)
 8001232:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b39      	ldr	r3, [pc, #228]	@ (8001320 <WT901_Update_Message+0x728>)
 800123c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b35      	ldr	r3, [pc, #212]	@ (8001320 <WT901_Update_Message+0x728>)
 800124a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
			  WT901_Out_msg.Data_Port_Status.Port_3 = (WT901_Out_msg.Data_Port_Status.Registers.D3H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D3L;
 800124e:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <WT901_Update_Message+0x728>)
 8001250:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <WT901_Update_Message+0x728>)
 800125a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <WT901_Update_Message+0x728>)
 8001268:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
			break;
 800126c:	e211      	b.n	8001692 <WT901_Update_Message+0xa9a>

		  case Atmospheric_Pressure_Height:
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.Msg_Begin  = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 800126e:	783a      	ldrb	r2, [r7, #0]
 8001270:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <WT901_Update_Message+0x728>)
 8001272:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.Msg_Addr   = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001276:	787a      	ldrb	r2, [r7, #1]
 8001278:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <WT901_Update_Message+0x728>)
 800127a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P0		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 800127e:	78ba      	ldrb	r2, [r7, #2]
 8001280:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <WT901_Update_Message+0x728>)
 8001282:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P1		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <WT901_Update_Message+0x728>)
 800128a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P2		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 800128e:	793a      	ldrb	r2, [r7, #4]
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <WT901_Update_Message+0x728>)
 8001292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001296:	797a      	ldrb	r2, [r7, #5]
 8001298:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <WT901_Update_Message+0x728>)
 800129a:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H0		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 800129e:	79ba      	ldrb	r2, [r7, #6]
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <WT901_Update_Message+0x728>)
 80012a2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H1		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 80012a6:	79fa      	ldrb	r2, [r7, #7]
 80012a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <WT901_Update_Message+0x728>)
 80012aa:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H2 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 80012ae:	7a3a      	ldrb	r2, [r7, #8]
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <WT901_Update_Message+0x728>)
 80012b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 80012b6:	7a7a      	ldrb	r2, [r7, #9]
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <WT901_Update_Message+0x728>)
 80012ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 80012be:	7aba      	ldrb	r2, [r7, #10]
 80012c0:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <WT901_Update_Message+0x728>)
 80012c2:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

			  WT901_Out_msg.Atmospheric_Pressure_Height.Atmospheric_Pressure = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3 << 24) | \
 80012c6:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <WT901_Update_Message+0x728>)
 80012c8:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80012cc:	061a      	lsls	r2, r3, #24
			  			  			  					  	  	  	   	   	    (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P2 << 16) | \
 80012ce:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <WT901_Update_Message+0x728>)
 80012d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80012d4:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Atmospheric_Pressure_Height.Atmospheric_Pressure = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3 << 24) | \
 80012d6:	431a      	orrs	r2, r3
																				(WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P1 << 8)  | \
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <WT901_Update_Message+0x728>)
 80012da:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80012de:	021b      	lsls	r3, r3, #8
			  			  			  					  	  	  	   	   	    (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P2 << 16) | \
 80012e0:	4313      	orrs	r3, r2
																				 WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P0);
 80012e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <WT901_Update_Message+0x728>)
 80012e4:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
																				(WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P1 << 8)  | \
 80012e8:	4313      	orrs	r3, r2
 80012ea:	461a      	mov	r2, r3
			  WT901_Out_msg.Atmospheric_Pressure_Height.Atmospheric_Pressure = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3 << 24) | \
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <WT901_Update_Message+0x728>)
 80012ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

			  WT901_Out_msg.Atmospheric_Pressure_Height.Height = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 << 24) | \
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <WT901_Update_Message+0x728>)
 80012f4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80012f8:	061a      	lsls	r2, r3, #24
			  			  			  			  				  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H2 << 16) | \
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <WT901_Update_Message+0x728>)
 80012fc:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001300:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Atmospheric_Pressure_Height.Height = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 << 24) | \
 8001302:	431a      	orrs	r2, r3
			  													  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H1 << 8)  | \
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <WT901_Update_Message+0x728>)
 8001306:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800130a:	021b      	lsls	r3, r3, #8
			  			  			  			  				  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H2 << 16) | \
 800130c:	4313      	orrs	r3, r2
			  													   WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H0);
 800130e:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <WT901_Update_Message+0x728>)
 8001310:	f892 2086 	ldrb.w	r2, [r2, #134]	@ 0x86
			  													  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H1 << 8)  | \
 8001314:	4313      	orrs	r3, r2
 8001316:	461a      	mov	r2, r3
			  WT901_Out_msg.Atmospheric_Pressure_Height.Height = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 << 24) | \
 8001318:	4b01      	ldr	r3, [pc, #4]	@ (8001320 <WT901_Update_Message+0x728>)
 800131a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			break;
 800131e:	e1b8      	b.n	8001692 <WT901_Update_Message+0xa9a>
 8001320:	200002a4 	.word	0x200002a4
 8001324:	51eb851f 	.word	0x51eb851f

		  case Longitude_Latitude:
			  WT901_Out_msg.Longitude_Latitude.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8001328:	783a      	ldrb	r2, [r7, #0]
 800132a:	4b9d      	ldr	r3, [pc, #628]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800132c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
			  WT901_Out_msg.Longitude_Latitude.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001330:	787a      	ldrb	r2, [r7, #1]
 8001332:	4b9b      	ldr	r3, [pc, #620]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001334:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon0		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001338:	78ba      	ldrb	r2, [r7, #2]
 800133a:	4b99      	ldr	r3, [pc, #612]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800133c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon1		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4b97      	ldr	r3, [pc, #604]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001344:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon2		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8001348:	793a      	ldrb	r2, [r7, #4]
 800134a:	4b95      	ldr	r3, [pc, #596]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800134c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon3		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001350:	797a      	ldrb	r2, [r7, #5]
 8001352:	4b93      	ldr	r3, [pc, #588]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001354:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat0		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	4b91      	ldr	r3, [pc, #580]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800135c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat1		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	4b8f      	ldr	r3, [pc, #572]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001364:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat2 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8001368:	7a3a      	ldrb	r2, [r7, #8]
 800136a:	4b8d      	ldr	r3, [pc, #564]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800136c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat3 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001370:	7a7a      	ldrb	r2, [r7, #9]
 8001372:	4b8b      	ldr	r3, [pc, #556]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001374:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  WT901_Out_msg.Longitude_Latitude.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8001378:	7aba      	ldrb	r2, [r7, #10]
 800137a:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800137c:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

			  WT901_Out_msg.Longitude_Latitude.Longitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lon3 << 24) | \
 8001380:	4b87      	ldr	r3, [pc, #540]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001382:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8001386:	061a      	lsls	r2, r3, #24
			  					  	  	  	  	  	  	  	(WT901_Out_msg.Longitude_Latitude.Registers.Lon2 << 16) | \
 8001388:	4b85      	ldr	r3, [pc, #532]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800138a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800138e:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Longitude_Latitude.Longitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lon3 << 24) | \
 8001390:	431a      	orrs	r2, r3
			  												(WT901_Out_msg.Longitude_Latitude.Registers.Lon1 << 8)  | \
 8001392:	4b83      	ldr	r3, [pc, #524]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001394:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 8001398:	021b      	lsls	r3, r3, #8
			  					  	  	  	  	  	  	  	(WT901_Out_msg.Longitude_Latitude.Registers.Lon2 << 16) | \
 800139a:	4313      	orrs	r3, r2
															 WT901_Out_msg.Longitude_Latitude.Registers.Lon0);
 800139c:	4a80      	ldr	r2, [pc, #512]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800139e:	f892 2096 	ldrb.w	r2, [r2, #150]	@ 0x96
			  												(WT901_Out_msg.Longitude_Latitude.Registers.Lon1 << 8)  | \
 80013a2:	4313      	orrs	r3, r2
 80013a4:	461a      	mov	r2, r3
			  WT901_Out_msg.Longitude_Latitude.Longitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lon3 << 24) | \
 80013a6:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			  WT901_Out_msg.Longitude_Latitude.Latitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lat3 << 24) | \
 80013ac:	4b7c      	ldr	r3, [pc, #496]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013ae:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80013b2:	061a      	lsls	r2, r3, #24
			  			  					  	  	  	   (WT901_Out_msg.Longitude_Latitude.Registers.Lat2 << 16) | \
 80013b4:	4b7a      	ldr	r3, [pc, #488]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013b6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80013ba:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Longitude_Latitude.Latitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lat3 << 24) | \
 80013bc:	431a      	orrs	r2, r3
			  			  								   (WT901_Out_msg.Longitude_Latitude.Registers.Lat1 << 8)  | \
 80013be:	4b78      	ldr	r3, [pc, #480]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013c0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80013c4:	021b      	lsls	r3, r3, #8
			  			  					  	  	  	   (WT901_Out_msg.Longitude_Latitude.Registers.Lat2 << 16) | \
 80013c6:	4313      	orrs	r3, r2
			  												WT901_Out_msg.Longitude_Latitude.Registers.Lat0);
 80013c8:	4a75      	ldr	r2, [pc, #468]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013ca:	f892 209a 	ldrb.w	r2, [r2, #154]	@ 0x9a
			  			  								   (WT901_Out_msg.Longitude_Latitude.Registers.Lat1 << 8)  | \
 80013ce:	4313      	orrs	r3, r2
 80013d0:	461a      	mov	r2, r3
			  WT901_Out_msg.Longitude_Latitude.Latitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lat3 << 24) | \
 80013d2:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			break;
 80013d8:	e15b      	b.n	8001692 <WT901_Update_Message+0xa9a>

		  case Ground_Speed:
			  WT901_Out_msg.Ground_Speed.Registers.Msg_Begin 	= Receive_Message_Temporary_Buffer.First_Byte_Receive;
 80013da:	783a      	ldrb	r2, [r7, #0]
 80013dc:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013de:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
			  WT901_Out_msg.Ground_Speed.Registers.Msg_Addr  	= Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80013e2:	787a      	ldrb	r2, [r7, #1]
 80013e4:	4b6e      	ldr	r3, [pc, #440]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013e6:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			  WT901_Out_msg.Ground_Speed.Registers.GPSHeightL	= Receive_Message_Temporary_Buffer.Data_Byte_0;
 80013ea:	78ba      	ldrb	r2, [r7, #2]
 80013ec:	4b6c      	ldr	r3, [pc, #432]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013ee:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
			  WT901_Out_msg.Ground_Speed.Registers.GPSHeightH	= Receive_Message_Temporary_Buffer.Data_Byte_1;
 80013f2:	78fa      	ldrb	r2, [r7, #3]
 80013f4:	4b6a      	ldr	r3, [pc, #424]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013f6:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
			  WT901_Out_msg.Ground_Speed.Registers.GPSYawL		= Receive_Message_Temporary_Buffer.Data_Byte_2;
 80013fa:	793a      	ldrb	r2, [r7, #4]
 80013fc:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80013fe:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
			  WT901_Out_msg.Ground_Speed.Registers.GPSYawH		= Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001402:	797a      	ldrb	r2, [r7, #5]
 8001404:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001406:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			  WT901_Out_msg.Ground_Speed.Registers.GPSV0		= Receive_Message_Temporary_Buffer.Data_Byte_4;
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	4b64      	ldr	r3, [pc, #400]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800140e:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			  WT901_Out_msg.Ground_Speed.Registers.GPSV1		= Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	4b62      	ldr	r3, [pc, #392]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001416:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
			  WT901_Out_msg.Ground_Speed.Registers.GPSV2 		= Receive_Message_Temporary_Buffer.Data_Byte_6;
 800141a:	7a3a      	ldrb	r2, [r7, #8]
 800141c:	4b60      	ldr	r3, [pc, #384]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800141e:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
			  WT901_Out_msg.Ground_Speed.Registers.GPSV3 		= Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001422:	7a7a      	ldrb	r2, [r7, #9]
 8001424:	4b5e      	ldr	r3, [pc, #376]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001426:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
			  WT901_Out_msg.Ground_Speed.Registers.SUM 		 	= Receive_Message_Temporary_Buffer.Checksum;
 800142a:	7aba      	ldrb	r2, [r7, #10]
 800142c:	4b5c      	ldr	r3, [pc, #368]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800142e:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2

			  WT901_Out_msg.Ground_Speed.GPS_Height = ((WT901_Out_msg.Ground_Speed.Registers.GPSHeightH << 8) | WT901_Out_msg.Ground_Speed.Registers.GPSHeightL) / 10;
 8001432:	4b5b      	ldr	r3, [pc, #364]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001434:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	4a59      	ldr	r2, [pc, #356]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800143c:	f892 20aa 	ldrb.w	r2, [r2, #170]	@ 0xaa
 8001440:	4313      	orrs	r3, r2
 8001442:	4a58      	ldr	r2, [pc, #352]	@ (80015a4 <WT901_Update_Message+0x9ac>)
 8001444:	fb82 1203 	smull	r1, r2, r2, r3
 8001448:	1092      	asrs	r2, r2, #2
 800144a:	17db      	asrs	r3, r3, #31
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001452:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
			  WT901_Out_msg.Ground_Speed.GPS_Yaw 	= ((WT901_Out_msg.Ground_Speed.Registers.GPSYawH << 8) | WT901_Out_msg.Ground_Speed.Registers.GPSYawL) / 10;
 8001456:	4b52      	ldr	r3, [pc, #328]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001458:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	4a50      	ldr	r2, [pc, #320]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001460:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8001464:	4313      	orrs	r3, r2
 8001466:	4a4f      	ldr	r2, [pc, #316]	@ (80015a4 <WT901_Update_Message+0x9ac>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1092      	asrs	r2, r2, #2
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b4a      	ldr	r3, [pc, #296]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001476:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
			  WT901_Out_msg.Ground_Speed.GPS_Velocity = ((WT901_Out_msg.Ground_Speed.Registers.GPSV3 << 24) | \
 800147a:	4b49      	ldr	r3, [pc, #292]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800147c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001480:	061a      	lsls	r2, r3, #24
					  	  	  	  	  	  	  	  	  	 (WT901_Out_msg.Ground_Speed.Registers.GPSV2 << 16) | \
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001484:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8001488:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Ground_Speed.GPS_Velocity = ((WT901_Out_msg.Ground_Speed.Registers.GPSV3 << 24) | \
 800148a:	431a      	orrs	r2, r3
														 (WT901_Out_msg.Ground_Speed.Registers.GPSV1 << 8)  | \
 800148c:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800148e:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 8001492:	021b      	lsls	r3, r3, #8
					  	  	  	  	  	  	  	  	  	 (WT901_Out_msg.Ground_Speed.Registers.GPSV2 << 16) | \
 8001494:	4313      	orrs	r3, r2
														  WT901_Out_msg.Ground_Speed.Registers.GPSV0) / 1000;
 8001496:	4a42      	ldr	r2, [pc, #264]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001498:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
														 (WT901_Out_msg.Ground_Speed.Registers.GPSV1 << 8)  | \
 800149c:	4313      	orrs	r3, r2
														  WT901_Out_msg.Ground_Speed.Registers.GPSV0) / 1000;
 800149e:	4a42      	ldr	r2, [pc, #264]	@ (80015a8 <WT901_Update_Message+0x9b0>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	1192      	asrs	r2, r2, #6
 80014a6:	17db      	asrs	r3, r3, #31
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	461a      	mov	r2, r3
			  WT901_Out_msg.Ground_Speed.GPS_Velocity = ((WT901_Out_msg.Ground_Speed.Registers.GPSV3 << 24) | \
 80014ac:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014ae:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
			break;
 80014b2:	e0ee      	b.n	8001692 <WT901_Update_Message+0xa9a>

		  case Quaternion:
			  WT901_Out_msg.Quaternion.Registers.Msg_Begin  = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 80014b4:	783a      	ldrb	r2, [r7, #0]
 80014b6:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014b8:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
			  WT901_Out_msg.Quaternion.Registers.Msg_Addr   = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80014bc:	787a      	ldrb	r2, [r7, #1]
 80014be:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014c0:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
			  WT901_Out_msg.Quaternion.Registers.Q0L		= Receive_Message_Temporary_Buffer.Data_Byte_0;
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014c8:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			  WT901_Out_msg.Quaternion.Registers.Q0H		= Receive_Message_Temporary_Buffer.Data_Byte_1;
 80014cc:	78fa      	ldrb	r2, [r7, #3]
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014d0:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
			  WT901_Out_msg.Quaternion.Registers.Q1L		= Receive_Message_Temporary_Buffer.Data_Byte_2;
 80014d4:	793a      	ldrb	r2, [r7, #4]
 80014d6:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014d8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
			  WT901_Out_msg.Quaternion.Registers.Q1H		= Receive_Message_Temporary_Buffer.Data_Byte_3;
 80014dc:	797a      	ldrb	r2, [r7, #5]
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014e0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
			  WT901_Out_msg.Quaternion.Registers.Q2L		= Receive_Message_Temporary_Buffer.Data_Byte_4;
 80014e4:	79ba      	ldrb	r2, [r7, #6]
 80014e6:	4b2e      	ldr	r3, [pc, #184]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014e8:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
			  WT901_Out_msg.Quaternion.Registers.Q2H		= Receive_Message_Temporary_Buffer.Data_Byte_5;
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014f0:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
			  WT901_Out_msg.Quaternion.Registers.Q3L 		= Receive_Message_Temporary_Buffer.Data_Byte_6;
 80014f4:	7a3a      	ldrb	r2, [r7, #8]
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 80014f8:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			  WT901_Out_msg.Quaternion.Registers.Q3H 		= Receive_Message_Temporary_Buffer.Data_Byte_7;
 80014fc:	7a7a      	ldrb	r2, [r7, #9]
 80014fe:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001500:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
			  WT901_Out_msg.Quaternion.Registers.SUM 		= Receive_Message_Temporary_Buffer.Checksum;
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001508:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6

			  WT901_Out_msg.Quaternion.Quaternion_0 = ((WT901_Out_msg.Quaternion.Registers.Q0H << 8) | WT901_Out_msg.Quaternion.Registers.Q0L) / 32768;
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800150e:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001516:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 800151a:	4313      	orrs	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	da02      	bge.n	8001526 <WT901_Update_Message+0x92e>
 8001520:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001524:	337f      	adds	r3, #127	@ 0x7f
 8001526:	13db      	asrs	r3, r3, #15
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800152c:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
			  WT901_Out_msg.Quaternion.Quaternion_1 = ((WT901_Out_msg.Quaternion.Registers.Q1H << 8) | WT901_Out_msg.Quaternion.Registers.Q1L) / 32768;
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001532:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	4a19      	ldr	r2, [pc, #100]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800153a:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 800153e:	4313      	orrs	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	da02      	bge.n	800154a <WT901_Update_Message+0x952>
 8001544:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001548:	337f      	adds	r3, #127	@ 0x7f
 800154a:	13db      	asrs	r3, r3, #15
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001550:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
			  WT901_Out_msg.Quaternion.Quaternion_2 = ((WT901_Out_msg.Quaternion.Registers.Q2H << 8) | WT901_Out_msg.Quaternion.Registers.Q2L) / 32768;
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001556:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800155e:	f892 20c2 	ldrb.w	r2, [r2, #194]	@ 0xc2
 8001562:	4313      	orrs	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	da02      	bge.n	800156e <WT901_Update_Message+0x976>
 8001568:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800156c:	337f      	adds	r3, #127	@ 0x7f
 800156e:	13db      	asrs	r3, r3, #15
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001574:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
			  WT901_Out_msg.Quaternion.Quaternion_3 = ((WT901_Out_msg.Quaternion.Registers.Q3H << 8) | WT901_Out_msg.Quaternion.Registers.Q3L) / 32768;
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 800157a:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001582:	f892 20c4 	ldrb.w	r2, [r2, #196]	@ 0xc4
 8001586:	4313      	orrs	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	da02      	bge.n	8001592 <WT901_Update_Message+0x99a>
 800158c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001590:	337f      	adds	r3, #127	@ 0x7f
 8001592:	13db      	asrs	r3, r3, #15
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b02      	ldr	r3, [pc, #8]	@ (80015a0 <WT901_Update_Message+0x9a8>)
 8001598:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
			break;
 800159c:	e079      	b.n	8001692 <WT901_Update_Message+0xa9a>
 800159e:	bf00      	nop
 80015a0:	200002a4 	.word	0x200002a4
 80015a4:	66666667 	.word	0x66666667
 80015a8:	10624dd3 	.word	0x10624dd3

		  case Satellite_Positioning_Accuracy:
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 80015ac:	783a      	ldrb	r2, [r7, #0]
 80015ae:	4b3b      	ldr	r3, [pc, #236]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015b0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80015b4:	787a      	ldrb	r2, [r7, #1]
 80015b6:	4b39      	ldr	r3, [pc, #228]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015b8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 80015bc:	78ba      	ldrb	r2, [r7, #2]
 80015be:	4b37      	ldr	r3, [pc, #220]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015c0:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	4b35      	ldr	r3, [pc, #212]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015c8:	f883 20d3 	strb.w	r2, [r3, #211]	@ 0xd3
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 80015cc:	793a      	ldrb	r2, [r7, #4]
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015d0:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 80015d4:	797a      	ldrb	r2, [r7, #5]
 80015d6:	4b31      	ldr	r3, [pc, #196]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015d8:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 80015dc:	79ba      	ldrb	r2, [r7, #6]
 80015de:	4b2f      	ldr	r3, [pc, #188]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015e0:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015e8:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 80015ec:	7a3a      	ldrb	r2, [r7, #8]
 80015ee:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015f0:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 80015f4:	7a7a      	ldrb	r2, [r7, #9]
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <WT901_Update_Message+0xaa4>)
 80015f8:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 80015fc:	7aba      	ldrb	r2, [r7, #10]
 80015fe:	4b27      	ldr	r3, [pc, #156]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001600:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda

			  WT901_Out_msg.Satellite_Positioning_Accuracy.SN = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNL);
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001606:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001610:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <WT901_Update_Message+0xaa4>)
 800161e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
			  WT901_Out_msg.Satellite_Positioning_Accuracy.PDOP = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPL) / 32768;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001624:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <WT901_Update_Message+0xaa4>)
 800162c:	f892 20d4 	ldrb.w	r2, [r2, #212]	@ 0xd4
 8001630:	4313      	orrs	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	da02      	bge.n	800163c <WT901_Update_Message+0xa44>
 8001636:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800163a:	337f      	adds	r3, #127	@ 0x7f
 800163c:	13db      	asrs	r3, r3, #15
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001642:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
			  WT901_Out_msg.Satellite_Positioning_Accuracy.HDOP = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPL) / 32768;
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001648:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	4a13      	ldr	r2, [pc, #76]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001650:	f892 20d6 	ldrb.w	r2, [r2, #214]	@ 0xd6
 8001654:	4313      	orrs	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	da02      	bge.n	8001660 <WT901_Update_Message+0xa68>
 800165a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800165e:	337f      	adds	r3, #127	@ 0x7f
 8001660:	13db      	asrs	r3, r3, #15
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001666:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
			  WT901_Out_msg.Satellite_Positioning_Accuracy.VDOP = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPL) / 32768;
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <WT901_Update_Message+0xaa4>)
 800166c:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <WT901_Update_Message+0xaa4>)
 8001674:	f892 20d8 	ldrb.w	r2, [r2, #216]	@ 0xd8
 8001678:	4313      	orrs	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	da02      	bge.n	8001684 <WT901_Update_Message+0xa8c>
 800167e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001682:	337f      	adds	r3, #127	@ 0x7f
 8001684:	13db      	asrs	r3, r3, #15
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <WT901_Update_Message+0xaa4>)
 800168a:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
			break;
 800168e:	e000      	b.n	8001692 <WT901_Update_Message+0xa9a>

		  default:
 8001690:	bf00      	nop
		// code block
    	}
	}
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200002a4 	.word	0x200002a4

080016a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b094      	sub	sp, #80	@ 0x50
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	2230      	movs	r2, #48	@ 0x30
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 f9b0 	bl	8004a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	4b28      	ldr	r3, [pc, #160]	@ (800176c <SystemClock_Config+0xcc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a27      	ldr	r2, [pc, #156]	@ (800176c <SystemClock_Config+0xcc>)
 80016ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <SystemClock_Config+0xcc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <SystemClock_Config+0xd0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <SystemClock_Config+0xd0>)
 80016ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <SystemClock_Config+0xd0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001700:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001706:	2302      	movs	r3, #2
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001710:	2304      	movs	r3, #4
 8001712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001714:	23a8      	movs	r3, #168	@ 0xa8
 8001716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001718:	2302      	movs	r3, #2
 800171a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800171c:	2307      	movs	r3, #7
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fb0d 	bl	8002d44 <HAL_RCC_OscConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001730:	f000 f95e 	bl	80019f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001734:	230f      	movs	r3, #15
 8001736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001738:	2302      	movs	r3, #2
 800173a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2105      	movs	r1, #5
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fd6e 	bl	8003234 <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800175e:	f000 f947 	bl	80019f0 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3750      	adds	r7, #80	@ 0x50
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000

08001774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <MX_USART1_UART_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USART1_UART_Init+0x4c>)
 80017ac:	f001 ff62 	bl	8003674 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 f91b 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000048 	.word	0x20000048
 80017c4:	40011000 	.word	0x40011000

080017c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <MX_USART3_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 8001800:	f001 ff38 	bl	8003674 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f000 f8f1 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000090 	.word	0x20000090
 8001818:	40004800 	.word	0x40004800

0800181c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_DMA_Init+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a1e      	ldr	r2, [pc, #120]	@ (80018a4 <MX_DMA_Init+0x88>)
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_DMA_Init+0x88>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_DMA_Init+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <MX_DMA_Init+0x88>)
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_DMA_Init+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	200c      	movs	r0, #12
 8001860:	f000 fc67 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001864:	200c      	movs	r0, #12
 8001866:	f000 fc80 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	200e      	movs	r0, #14
 8001870:	f000 fc5f 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001874:	200e      	movs	r0, #14
 8001876:	f000 fc78 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	203a      	movs	r0, #58	@ 0x3a
 8001880:	f000 fc57 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001884:	203a      	movs	r0, #58	@ 0x3a
 8001886:	f000 fc70 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2046      	movs	r0, #70	@ 0x46
 8001890:	f000 fc4f 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001894:	2046      	movs	r0, #70	@ 0x46
 8001896:	f000 fc68 	bl	800216a <HAL_NVIC_EnableIRQ>

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	@ 0x30
 80018ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <MX_GPIO_Init+0x138>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <MX_GPIO_Init+0x138>)
 80018c8:	f043 0310 	orr.w	r3, r3, #16
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b44      	ldr	r3, [pc, #272]	@ (80019e0 <MX_GPIO_Init+0x138>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <MX_GPIO_Init+0x138>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a3f      	ldr	r2, [pc, #252]	@ (80019e0 <MX_GPIO_Init+0x138>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <MX_GPIO_Init+0x138>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <MX_GPIO_Init+0x138>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a38      	ldr	r2, [pc, #224]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a31      	ldr	r2, [pc, #196]	@ (80019e0 <MX_GPIO_Init+0x138>)
 800191c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a2a      	ldr	r2, [pc, #168]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <MX_GPIO_Init+0x138>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <MX_GPIO_Init+0x138>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800196c:	481d      	ldr	r0, [pc, #116]	@ (80019e4 <MX_GPIO_Init+0x13c>)
 800196e:	f001 f9b5 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001978:	481a      	ldr	r0, [pc, #104]	@ (80019e4 <MX_GPIO_Init+0x13c>)
 800197a:	f001 f9af 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 800197e:	2318      	movs	r3, #24
 8001980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4815      	ldr	r0, [pc, #84]	@ (80019e8 <MX_GPIO_Init+0x140>)
 8001992:	f001 f807 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8001996:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	480d      	ldr	r0, [pc, #52]	@ (80019e4 <MX_GPIO_Init+0x13c>)
 80019b0:	f000 fff8 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ba:	2312      	movs	r3, #18
 80019bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c6:	2304      	movs	r3, #4
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4806      	ldr	r0, [pc, #24]	@ (80019ec <MX_GPIO_Init+0x144>)
 80019d2:	f000 ffe7 	bl	80029a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d6:	bf00      	nop
 80019d8:	3730      	adds	r7, #48	@ 0x30
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40021400 	.word	0x40021400
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40020400 	.word	0x40020400

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <Error_Handler+0x8>

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	@ 0x30
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a98      	ldr	r2, [pc, #608]	@ (8001ccc <HAL_UART_MspInit+0x280>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f040 8092 	bne.w	8001b94 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	4b96      	ldr	r3, [pc, #600]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a78:	4a95      	ldr	r2, [pc, #596]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a80:	4b93      	ldr	r3, [pc, #588]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a94:	4a8e      	ldr	r2, [pc, #568]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001aa8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aba:	2307      	movs	r3, #7
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4883      	ldr	r0, [pc, #524]	@ (8001cd4 <HAL_UART_MspInit+0x288>)
 8001ac6:	f000 ff6d 	bl	80029a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001aca:	4b83      	ldr	r3, [pc, #524]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001acc:	4a83      	ldr	r2, [pc, #524]	@ (8001cdc <HAL_UART_MspInit+0x290>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ad0:	4b81      	ldr	r3, [pc, #516]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001ad2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b7e      	ldr	r3, [pc, #504]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aec:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af2:	4b79      	ldr	r3, [pc, #484]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001af8:	4b77      	ldr	r3, [pc, #476]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b76      	ldr	r3, [pc, #472]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b74      	ldr	r3, [pc, #464]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b0a:	4873      	ldr	r0, [pc, #460]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001b0c:	f000 fb48 	bl	80021a0 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b16:	f7ff ff6b 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b20:	4a6d      	ldr	r2, [pc, #436]	@ (8001cd8 <HAL_UART_MspInit+0x28c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b26:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_UART_MspInit+0x298>)
 8001b2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b32:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b34:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b36:	2240      	movs	r2, #64	@ 0x40
 8001b38:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3a:	4b69      	ldr	r3, [pc, #420]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b40:	4b67      	ldr	r3, [pc, #412]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b48:	4b65      	ldr	r3, [pc, #404]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b54:	4b62      	ldr	r3, [pc, #392]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b60:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b66:	485e      	ldr	r0, [pc, #376]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b68:	f000 fb1a 	bl	80021a0 <HAL_DMA_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001b72:	f7ff ff3d 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a59      	ldr	r2, [pc, #356]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b7c:	4a58      	ldr	r2, [pc, #352]	@ (8001ce0 <HAL_UART_MspInit+0x294>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2025      	movs	r0, #37	@ 0x25
 8001b88:	f000 fad3 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b8c:	2025      	movs	r0, #37	@ 0x25
 8001b8e:	f000 faec 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b92:	e096      	b.n	8001cc2 <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART3)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a53      	ldr	r2, [pc, #332]	@ (8001ce8 <HAL_UART_MspInit+0x29c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	f040 8091 	bne.w	8001cc2 <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a49      	ldr	r2, [pc, #292]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001baa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b47      	ldr	r3, [pc, #284]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4b43      	ldr	r3, [pc, #268]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	4a42      	ldr	r2, [pc, #264]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bcc:	4b40      	ldr	r3, [pc, #256]	@ (8001cd0 <HAL_UART_MspInit+0x284>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bd8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bea:	2307      	movs	r3, #7
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	483d      	ldr	r0, [pc, #244]	@ (8001cec <HAL_UART_MspInit+0x2a0>)
 8001bf6:	f000 fed5 	bl	80029a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001bfc:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf4 <HAL_UART_MspInit+0x2a8>)
 8001bfe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001c00:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c06:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c08:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0e:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c14:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1c:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c22:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2e:	4b30      	ldr	r3, [pc, #192]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c3a:	482d      	ldr	r0, [pc, #180]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c3c:	f000 fab0 	bl	80021a0 <HAL_DMA_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001c46:	f7ff fed3 	bl	80019f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a28      	ldr	r2, [pc, #160]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c50:	4a27      	ldr	r2, [pc, #156]	@ (8001cf0 <HAL_UART_MspInit+0x2a4>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001c56:	4b28      	ldr	r3, [pc, #160]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c58:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <HAL_UART_MspInit+0x2b0>)
 8001c5a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001c5c:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c62:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c64:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c66:	2240      	movs	r2, #64	@ 0x40
 8001c68:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c6a:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c70:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c76:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001c96:	4818      	ldr	r0, [pc, #96]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001c98:	f000 fa82 	bl	80021a0 <HAL_DMA_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8001ca2:	f7ff fea5 	bl	80019f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001caa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <HAL_UART_MspInit+0x2ac>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2027      	movs	r0, #39	@ 0x27
 8001cb8:	f000 fa3b 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cbc:	2027      	movs	r0, #39	@ 0x27
 8001cbe:	f000 fa54 	bl	800216a <HAL_NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3730      	adds	r7, #48	@ 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	200000d8 	.word	0x200000d8
 8001cdc:	40026440 	.word	0x40026440
 8001ce0:	20000138 	.word	0x20000138
 8001ce4:	400264b8 	.word	0x400264b8
 8001ce8:	40004800 	.word	0x40004800
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	20000198 	.word	0x20000198
 8001cf4:	40026028 	.word	0x40026028
 8001cf8:	200001f8 	.word	0x200001f8
 8001cfc:	40026058 	.word	0x40026058

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <NMI_Handler+0x4>

08001d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <MemManage_Handler+0x4>

08001d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d56:	f000 f8cd 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <DMA1_Stream1_IRQHandler+0x10>)
 8001d66:	f000 fbb3 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000198 	.word	0x20000198

08001d74 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <DMA1_Stream3_IRQHandler+0x10>)
 8001d7a:	f000 fba9 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200001f8 	.word	0x200001f8

08001d88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <USART1_IRQHandler+0x10>)
 8001d8e:	f001 fd57 	bl	8003840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000048 	.word	0x20000048

08001d9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <USART3_IRQHandler+0x10>)
 8001da2:	f001 fd4d 	bl	8003840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000090 	.word	0x20000090

08001db0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <DMA2_Stream2_IRQHandler+0x10>)
 8001db6:	f000 fb8b 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200000d8 	.word	0x200000d8

08001dc4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <DMA2_Stream7_IRQHandler+0x10>)
 8001dca:	f000 fb81 	bl	80024d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000138 	.word	0x20000138

08001dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e00:	f7ff ffea 	bl	8001dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e06:	490d      	ldr	r1, [pc, #52]	@ (8001e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f002 fdfb 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2e:	f7fe fea5 	bl	8000b7c <main>
  bx  lr    
 8001e32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001e40:	08004ab4 	.word	0x08004ab4
  ldr r2, =_sbss
 8001e44:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001e48:	2000038c 	.word	0x2000038c

08001e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_Init+0x40>)
 8001e5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <HAL_Init+0x40>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a07      	ldr	r2, [pc, #28]	@ (8001e90 <HAL_Init+0x40>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 f94f 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7e:	200f      	movs	r0, #15
 8001e80:	f000 f808 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e84:	f7ff fdba 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x54>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_InitTick+0x58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f967 	bl	8002186 <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f92f 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <HAL_InitTick+0x5c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000020 	.word	0x20000020
 8001eec:	20000028 	.word	0x20000028
 8001ef0:	20000024 	.word	0x20000024

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000028 	.word	0x20000028
 8001f18:	20000388 	.word	0x20000388

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000388 	.word	0x20000388

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000028 	.word	0x20000028

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	@ (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff29 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff3e 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff31 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff feb6 	bl	8001f1c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e099      	b.n	80022f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021dc:	e00f      	b.n	80021fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021de:	f7ff fe9d 	bl	8001f1c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d908      	bls.n	80021fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e078      	b.n	80022f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e8      	bne.n	80021de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4b38      	ldr	r3, [pc, #224]	@ (80022f8 <HAL_DMA_Init+0x158>)
 8002218:	4013      	ands	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	2b04      	cmp	r3, #4
 8002256:	d107      	bne.n	8002268 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002260:	4313      	orrs	r3, r2
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0307 	bic.w	r3, r3, #7
 800227e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	2b04      	cmp	r3, #4
 8002290:	d117      	bne.n	80022c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fb01 	bl	80028ac <DMA_CheckFifoParam>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2240      	movs	r2, #64	@ 0x40
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022be:	2301      	movs	r3, #1
 80022c0:	e016      	b.n	80022f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fab8 	bl	8002840 <DMA_CalcBaseAndBitshift>
 80022d0:	4603      	mov	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	223f      	movs	r2, #63	@ 0x3f
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	f010803f 	.word	0xf010803f

080022fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_DMA_Start_IT+0x26>
 800231e:	2302      	movs	r3, #2
 8002320:	e040      	b.n	80023a4 <HAL_DMA_Start_IT+0xa8>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12f      	bne.n	8002396 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fa4a 	bl	80027e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	223f      	movs	r2, #63	@ 0x3f
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0216 	orr.w	r2, r2, #22
 800236a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0208 	orr.w	r2, r2, #8
 8002382:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e005      	b.n	80023a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ba:	f7ff fdaf 	bl	8001f1c <HAL_GetTick>
 80023be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d008      	beq.n	80023de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2280      	movs	r2, #128	@ 0x80
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e052      	b.n	8002484 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0216 	bic.w	r2, r2, #22
 80023ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d103      	bne.n	800240e <HAL_DMA_Abort+0x62>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0208 	bic.w	r2, r2, #8
 800241c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0201 	bic.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242e:	e013      	b.n	8002458 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002430:	f7ff fd74 	bl	8001f1c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b05      	cmp	r3, #5
 800243c:	d90c      	bls.n	8002458 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2220      	movs	r2, #32
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2203      	movs	r2, #3
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e015      	b.n	8002484 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1e4      	bne.n	8002430 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246a:	223f      	movs	r2, #63	@ 0x3f
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d004      	beq.n	80024aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	@ 0x80
 80024a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00c      	b.n	80024c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2205      	movs	r2, #5
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002718 <HAL_DMA_IRQHandler+0x248>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a8e      	ldr	r2, [pc, #568]	@ (800271c <HAL_DMA_IRQHandler+0x24c>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0a9b      	lsrs	r3, r3, #10
 80024e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	2208      	movs	r2, #8
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01a      	beq.n	800253c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0204 	bic.w	r2, r2, #4
 8002522:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	2208      	movs	r2, #8
 800252a:	409a      	lsls	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d012      	beq.n	8002572 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255e:	2201      	movs	r2, #1
 8002560:	409a      	lsls	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	f043 0202 	orr.w	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	2204      	movs	r2, #4
 8002578:	409a      	lsls	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d012      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	2204      	movs	r2, #4
 8002596:	409a      	lsls	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	f043 0204 	orr.w	r2, r3, #4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	2210      	movs	r2, #16
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d043      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d03c      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2210      	movs	r2, #16
 80025cc:	409a      	lsls	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d018      	beq.n	8002612 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d108      	bne.n	8002600 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d024      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
 80025fe:	e01f      	b.n	8002640 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01b      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
 8002610:	e016      	b.n	8002640 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0208 	bic.w	r2, r2, #8
 800262e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	2220      	movs	r2, #32
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 808f 	beq.w	8002770 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8087 	beq.w	8002770 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002666:	2220      	movs	r2, #32
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b05      	cmp	r3, #5
 8002678:	d136      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0216 	bic.w	r2, r2, #22
 8002688:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002698:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_DMA_IRQHandler+0x1da>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0208 	bic.w	r2, r2, #8
 80026b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	223f      	movs	r2, #63	@ 0x3f
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d07e      	beq.n	80027dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
        }
        return;
 80026e6:	e079      	b.n	80027dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10d      	bne.n	8002720 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	2b00      	cmp	r3, #0
 800270a:	d031      	beq.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e02c      	b.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
 8002716:	bf00      	nop
 8002718:	20000020 	.word	0x20000020
 800271c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	2b00      	cmp	r3, #0
 8002726:	d023      	beq.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
 8002730:	e01e      	b.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0210 	bic.w	r2, r2, #16
 800274e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	d032      	beq.n	80027de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d022      	beq.n	80027ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2205      	movs	r2, #5
 8002788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	3301      	adds	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d307      	bcc.n	80027b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f2      	bne.n	800279c <HAL_DMA_IRQHandler+0x2cc>
 80027b6:	e000      	b.n	80027ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	e000      	b.n	80027de <HAL_DMA_IRQHandler+0x30e>
        return;
 80027dc:	bf00      	nop
    }
  }
}
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002800:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b40      	cmp	r3, #64	@ 0x40
 8002810:	d108      	bne.n	8002824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002822:	e007      	b.n	8002834 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	60da      	str	r2, [r3, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3b10      	subs	r3, #16
 8002850:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800285a:	4a13      	ldr	r2, [pc, #76]	@ (80028a8 <DMA_CalcBaseAndBitshift+0x68>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d909      	bls.n	8002882 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	1d1a      	adds	r2, r3, #4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002880:	e007      	b.n	8002892 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	aaaaaaab 	.word	0xaaaaaaab
 80028a8:	08004a9c 	.word	0x08004a9c

080028ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11f      	bne.n	8002906 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d856      	bhi.n	800297a <DMA_CheckFifoParam+0xce>
 80028cc:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <DMA_CheckFifoParam+0x28>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028f7 	.word	0x080028f7
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	0800297b 	.word	0x0800297b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d046      	beq.n	800297e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f4:	e043      	b.n	800297e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028fe:	d140      	bne.n	8002982 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e03d      	b.n	8002982 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800290e:	d121      	bne.n	8002954 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d837      	bhi.n	8002986 <DMA_CheckFifoParam+0xda>
 8002916:	a201      	add	r2, pc, #4	@ (adr r2, 800291c <DMA_CheckFifoParam+0x70>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	0800292d 	.word	0x0800292d
 8002920:	08002933 	.word	0x08002933
 8002924:	0800292d 	.word	0x0800292d
 8002928:	08002945 	.word	0x08002945
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e030      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d025      	beq.n	800298a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002942:	e022      	b.n	800298a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800294c:	d11f      	bne.n	800298e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002952:	e01c      	b.n	800298e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d903      	bls.n	8002962 <DMA_CheckFifoParam+0xb6>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d003      	beq.n	8002968 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002960:	e018      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      break;
 8002966:	e015      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      break;
 8002978:	e00b      	b.n	8002992 <DMA_CheckFifoParam+0xe6>
      break;
 800297a:	bf00      	nop
 800297c:	e00a      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e008      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e006      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
 8002988:	e004      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e002      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;   
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
    }
  } 
  
  return status; 
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e16b      	b.n	8002c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 815a 	bne.w	8002c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d130      	bne.n	8002a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80b4 	beq.w	8002c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b60      	ldr	r3, [pc, #384]	@ (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	4a5f      	ldr	r2, [pc, #380]	@ (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b46:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb4 <HAL_GPIO_Init+0x310>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	@ (8002cb8 <HAL_GPIO_Init+0x314>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02b      	beq.n	8002bca <HAL_GPIO_Init+0x226>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a51      	ldr	r2, [pc, #324]	@ (8002cbc <HAL_GPIO_Init+0x318>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d025      	beq.n	8002bc6 <HAL_GPIO_Init+0x222>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a50      	ldr	r2, [pc, #320]	@ (8002cc0 <HAL_GPIO_Init+0x31c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01f      	beq.n	8002bc2 <HAL_GPIO_Init+0x21e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4f      	ldr	r2, [pc, #316]	@ (8002cc4 <HAL_GPIO_Init+0x320>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002cc8 <HAL_GPIO_Init+0x324>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x216>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4d      	ldr	r2, [pc, #308]	@ (8002ccc <HAL_GPIO_Init+0x328>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x212>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cd0 <HAL_GPIO_Init+0x32c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x20e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8002cd4 <HAL_GPIO_Init+0x330>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x20a>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e00e      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bae:	2308      	movs	r3, #8
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	@ (8002cb4 <HAL_GPIO_Init+0x310>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bea:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0e:	4a32      	ldr	r2, [pc, #200]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c14:	4b30      	ldr	r3, [pc, #192]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c38:	4a27      	ldr	r2, [pc, #156]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c62:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8c:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae90 	bls.w	80029c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40021c00 	.word	0x40021c00
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	041a      	lsls	r2, r3, #16
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	400b      	ands	r3, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e267      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d075      	beq.n	8002e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d62:	4b88      	ldr	r3, [pc, #544]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d00c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6e:	4b85      	ldr	r3, [pc, #532]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4b82      	ldr	r3, [pc, #520]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d86:	d10b      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	4b7e      	ldr	r3, [pc, #504]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d05b      	beq.n	8002e4c <HAL_RCC_OscConfig+0x108>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d157      	bne.n	8002e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e242      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da8:	d106      	bne.n	8002db8 <HAL_RCC_OscConfig+0x74>
 8002daa:	4b76      	ldr	r3, [pc, #472]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a75      	ldr	r2, [pc, #468]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xb0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x98>
 8002dc2:	4b70      	ldr	r3, [pc, #448]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6d      	ldr	r3, [pc, #436]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6c      	ldr	r2, [pc, #432]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xb0>
 8002ddc:	4b69      	ldr	r3, [pc, #420]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a68      	ldr	r2, [pc, #416]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b66      	ldr	r3, [pc, #408]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a65      	ldr	r2, [pc, #404]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f88e 	bl	8001f1c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e04:	f7ff f88a 	bl	8001f1c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e207      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b5b      	ldr	r3, [pc, #364]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xc0>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f87a 	bl	8001f1c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7ff f876 	bl	8001f1c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	@ 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1f3      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b51      	ldr	r3, [pc, #324]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0xe8>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e66:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b44      	ldr	r3, [pc, #272]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x152>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1c7      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4937      	ldr	r1, [pc, #220]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b34      	ldr	r3, [pc, #208]	@ (8002f88 <HAL_RCC_OscConfig+0x244>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7ff f82f 	bl	8001f1c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7ff f82b 	bl	8001f1c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1a8      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b28      	ldr	r3, [pc, #160]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4925      	ldr	r1, [pc, #148]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b24      	ldr	r3, [pc, #144]	@ (8002f88 <HAL_RCC_OscConfig+0x244>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7ff f80e 	bl	8001f1c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f04:	f7ff f80a 	bl	8001f1c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e187      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d036      	beq.n	8002f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d016      	beq.n	8002f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <HAL_RCC_OscConfig+0x248>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe ffee 	bl	8001f1c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe ffea 	bl	8001f1c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e167      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_RCC_OscConfig+0x240>)
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x200>
 8002f62:	e01b      	b.n	8002f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_RCC_OscConfig+0x248>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fe ffd7 	bl	8001f1c <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f70:	e00e      	b.n	8002f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f72:	f7fe ffd3 	bl	8001f1c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d907      	bls.n	8002f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e150      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
 8002f84:	40023800 	.word	0x40023800
 8002f88:	42470000 	.word	0x42470000
 8002f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	4b88      	ldr	r3, [pc, #544]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ea      	bne.n	8002f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8097 	beq.w	80030d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b81      	ldr	r3, [pc, #516]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	4b7d      	ldr	r3, [pc, #500]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fca:	4b7a      	ldr	r3, [pc, #488]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b77      	ldr	r3, [pc, #476]	@ (80031b8 <HAL_RCC_OscConfig+0x474>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b74      	ldr	r3, [pc, #464]	@ (80031b8 <HAL_RCC_OscConfig+0x474>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a73      	ldr	r2, [pc, #460]	@ (80031b8 <HAL_RCC_OscConfig+0x474>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe ff93 	bl	8001f1c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7fe ff8f 	bl	8001f1c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e10c      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b6a      	ldr	r3, [pc, #424]	@ (80031b8 <HAL_RCC_OscConfig+0x474>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x2ea>
 8003020:	4b64      	ldr	r3, [pc, #400]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003024:	4a63      	ldr	r2, [pc, #396]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6713      	str	r3, [r2, #112]	@ 0x70
 800302c:	e01c      	b.n	8003068 <HAL_RCC_OscConfig+0x324>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x30c>
 8003036:	4b5f      	ldr	r3, [pc, #380]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	4a5e      	ldr	r2, [pc, #376]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6713      	str	r3, [r2, #112]	@ 0x70
 8003042:	4b5c      	ldr	r3, [pc, #368]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	4a5b      	ldr	r2, [pc, #364]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	@ 0x70
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0x324>
 8003050:	4b58      	ldr	r3, [pc, #352]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003054:	4a57      	ldr	r2, [pc, #348]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6713      	str	r3, [r2, #112]	@ 0x70
 800305c:	4b55      	ldr	r3, [pc, #340]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	4a54      	ldr	r2, [pc, #336]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003062:	f023 0304 	bic.w	r3, r3, #4
 8003066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d015      	beq.n	800309c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe ff54 	bl	8001f1c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	e00a      	b.n	800308e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe ff50 	bl	8001f1c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0cb      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	4b49      	ldr	r3, [pc, #292]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ee      	beq.n	8003078 <HAL_RCC_OscConfig+0x334>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309c:	f7fe ff3e 	bl	8001f1c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe ff3a 	bl	8001f1c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0b5      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	4b3e      	ldr	r3, [pc, #248]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ee      	bne.n	80030a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d105      	bne.n	80030d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030cc:	4b39      	ldr	r3, [pc, #228]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	4a38      	ldr	r2, [pc, #224]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a1 	beq.w	8003224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e2:	4b34      	ldr	r3, [pc, #208]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d05c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d141      	bne.n	800317a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <HAL_RCC_OscConfig+0x478>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe ff0e 	bl	8001f1c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe ff0a 	bl	8001f1c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e087      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	4b27      	ldr	r3, [pc, #156]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	3b01      	subs	r3, #1
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	491b      	ldr	r1, [pc, #108]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <HAL_RCC_OscConfig+0x478>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7fe fee3 	bl	8001f1c <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315a:	f7fe fedf 	bl	8001f1c <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e05c      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316c:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x416>
 8003178:	e054      	b.n	8003224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <HAL_RCC_OscConfig+0x478>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fecc 	bl	8001f1c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe fec8 	bl	8001f1c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e045      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_RCC_OscConfig+0x470>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x444>
 80031a6:	e03d      	b.n	8003224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e038      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000
 80031bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_RCC_OscConfig+0x4ec>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d028      	beq.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d121      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d11a      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d111      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	3b01      	subs	r3, #1
 800320a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800

08003234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0cc      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003248:	4b68      	ldr	r3, [pc, #416]	@ (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d90c      	bls.n	8003270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b65      	ldr	r3, [pc, #404]	@ (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b63      	ldr	r3, [pc, #396]	@ (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b8      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003288:	4b59      	ldr	r3, [pc, #356]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a58      	ldr	r2, [pc, #352]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a0:	4b53      	ldr	r3, [pc, #332]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a52      	ldr	r2, [pc, #328]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b50      	ldr	r3, [pc, #320]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	494d      	ldr	r1, [pc, #308]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d044      	beq.n	8003354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b47      	ldr	r3, [pc, #284]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d119      	bne.n	8003312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f2:	4b3f      	ldr	r3, [pc, #252]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003302:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e067      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003312:	4b37      	ldr	r3, [pc, #220]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 0203 	bic.w	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4934      	ldr	r1, [pc, #208]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003324:	f7fe fdfa 	bl	8001f1c <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	e00a      	b.n	8003342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332c:	f7fe fdf6 	bl	8001f1c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04f      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	4b2b      	ldr	r3, [pc, #172]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 020c 	and.w	r2, r3, #12
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	429a      	cmp	r2, r3
 8003352:	d1eb      	bne.n	800332c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003354:	4b25      	ldr	r3, [pc, #148]	@ (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d20c      	bcs.n	800337c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b22      	ldr	r3, [pc, #136]	@ (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336a:	4b20      	ldr	r3, [pc, #128]	@ (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e032      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003388:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4916      	ldr	r1, [pc, #88]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a6:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	490e      	ldr	r1, [pc, #56]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ba:	f000 f821 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033be:	4602      	mov	r2, r0
 80033c0:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	490a      	ldr	r1, [pc, #40]	@ (80033f4 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	5ccb      	ldrb	r3, [r1, r3]
 80033ce:	fa22 f303 	lsr.w	r3, r2, r3
 80033d2:	4a09      	ldr	r2, [pc, #36]	@ (80033f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033d6:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fd5a 	bl	8001e94 <HAL_InitTick>

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023c00 	.word	0x40023c00
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08004a84 	.word	0x08004a84
 80033f8:	20000020 	.word	0x20000020
 80033fc:	20000024 	.word	0x20000024

08003400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003404:	b094      	sub	sp, #80	@ 0x50
 8003406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	647b      	str	r3, [r7, #68]	@ 0x44
 800340c:	2300      	movs	r3, #0
 800340e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003410:	2300      	movs	r3, #0
 8003412:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003418:	4b79      	ldr	r3, [pc, #484]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b08      	cmp	r3, #8
 8003422:	d00d      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x40>
 8003424:	2b08      	cmp	r3, #8
 8003426:	f200 80e1 	bhi.w	80035ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x34>
 800342e:	2b04      	cmp	r3, #4
 8003430:	d003      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x3a>
 8003432:	e0db      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b73      	ldr	r3, [pc, #460]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x204>)
 8003436:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003438:	e0db      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800343a:	4b73      	ldr	r3, [pc, #460]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x208>)
 800343c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800343e:	e0d8      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003440:	4b6f      	ldr	r3, [pc, #444]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344a:	4b6d      	ldr	r3, [pc, #436]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d063      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003456:	4b6a      	ldr	r3, [pc, #424]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	2200      	movs	r2, #0
 800345e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003460:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003468:	633b      	str	r3, [r7, #48]	@ 0x30
 800346a:	2300      	movs	r3, #0
 800346c:	637b      	str	r3, [r7, #52]	@ 0x34
 800346e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003472:	4622      	mov	r2, r4
 8003474:	462b      	mov	r3, r5
 8003476:	f04f 0000 	mov.w	r0, #0
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	0159      	lsls	r1, r3, #5
 8003480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003484:	0150      	lsls	r0, r2, #5
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4621      	mov	r1, r4
 800348c:	1a51      	subs	r1, r2, r1
 800348e:	6139      	str	r1, [r7, #16]
 8003490:	4629      	mov	r1, r5
 8003492:	eb63 0301 	sbc.w	r3, r3, r1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a4:	4659      	mov	r1, fp
 80034a6:	018b      	lsls	r3, r1, #6
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ae:	4651      	mov	r1, sl
 80034b0:	018a      	lsls	r2, r1, #6
 80034b2:	4651      	mov	r1, sl
 80034b4:	ebb2 0801 	subs.w	r8, r2, r1
 80034b8:	4659      	mov	r1, fp
 80034ba:	eb63 0901 	sbc.w	r9, r3, r1
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d2:	4690      	mov	r8, r2
 80034d4:	4699      	mov	r9, r3
 80034d6:	4623      	mov	r3, r4
 80034d8:	eb18 0303 	adds.w	r3, r8, r3
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	462b      	mov	r3, r5
 80034e0:	eb49 0303 	adc.w	r3, r9, r3
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034f2:	4629      	mov	r1, r5
 80034f4:	024b      	lsls	r3, r1, #9
 80034f6:	4621      	mov	r1, r4
 80034f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034fc:	4621      	mov	r1, r4
 80034fe:	024a      	lsls	r2, r1, #9
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003506:	2200      	movs	r2, #0
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800350a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800350c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003510:	f7fd f960 	bl	80007d4 <__aeabi_uldivmod>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4613      	mov	r3, r2
 800351a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800351c:	e058      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351e:	4b38      	ldr	r3, [pc, #224]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	2200      	movs	r2, #0
 8003526:	4618      	mov	r0, r3
 8003528:	4611      	mov	r1, r2
 800352a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800352e:	623b      	str	r3, [r7, #32]
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
 8003534:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	f04f 0000 	mov.w	r0, #0
 8003540:	f04f 0100 	mov.w	r1, #0
 8003544:	0159      	lsls	r1, r3, #5
 8003546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354a:	0150      	lsls	r0, r2, #5
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4641      	mov	r1, r8
 8003552:	ebb2 0a01 	subs.w	sl, r2, r1
 8003556:	4649      	mov	r1, r9
 8003558:	eb63 0b01 	sbc.w	fp, r3, r1
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003568:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800356c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003570:	ebb2 040a 	subs.w	r4, r2, sl
 8003574:	eb63 050b 	sbc.w	r5, r3, fp
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	464b      	mov	r3, r9
 8003594:	eb45 0303 	adc.w	r3, r5, r3
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a6:	4629      	mov	r1, r5
 80035a8:	028b      	lsls	r3, r1, #10
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b0:	4621      	mov	r1, r4
 80035b2:	028a      	lsls	r2, r1, #10
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ba:	2200      	movs	r2, #0
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	61fa      	str	r2, [r7, #28]
 80035c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035c4:	f7fd f906 	bl	80007d4 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3750      	adds	r7, #80	@ 0x50
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	00f42400 	.word	0x00f42400
 8003608:	007a1200 	.word	0x007a1200

0800360c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003610:	4b03      	ldr	r3, [pc, #12]	@ (8003620 <HAL_RCC_GetHCLKFreq+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000020 	.word	0x20000020

08003624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003628:	f7ff fff0 	bl	800360c <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0a9b      	lsrs	r3, r3, #10
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4903      	ldr	r1, [pc, #12]	@ (8003648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	08004a94 	.word	0x08004a94

0800364c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003650:	f7ff ffdc 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0b5b      	lsrs	r3, r3, #13
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4903      	ldr	r1, [pc, #12]	@ (8003670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	08004a94 	.word	0x08004a94

08003674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e042      	b.n	800370c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe f9d6 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	@ 0x24
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 ff37 	bl	800452c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	@ 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	d156      	bne.n	80037dc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_UART_Transmit_DMA+0x26>
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e04f      	b.n	80037de <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2221      	movs	r2, #33	@ 0x21
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003762:	4a21      	ldr	r2, [pc, #132]	@ (80037e8 <HAL_UART_Transmit_DMA+0xd4>)
 8003764:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	4a20      	ldr	r2, [pc, #128]	@ (80037ec <HAL_UART_Transmit_DMA+0xd8>)
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <HAL_UART_Transmit_DMA+0xdc>)
 8003774:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377a:	2200      	movs	r2, #0
 800377c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3304      	adds	r3, #4
 8003792:	461a      	mov	r2, r3
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	f7fe fdb1 	bl	80022fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	617b      	str	r3, [r7, #20]
   return(result);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80037c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6a39      	ldr	r1, [r7, #32]
 80037ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3730      	adds	r7, #48	@ 0x30
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	08003db9 	.word	0x08003db9
 80037ec:	08003e53 	.word	0x08003e53
 80037f0:	08003fd7 	.word	0x08003fd7

080037f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d112      	bne.n	8003834 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_UART_Receive_DMA+0x26>
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e00b      	b.n	8003836 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	461a      	mov	r2, r3
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fc1e 	bl	800406c <UART_Start_Receive_DMA>
 8003830:	4603      	mov	r3, r0
 8003832:	e000      	b.n	8003836 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b0ba      	sub	sp, #232	@ 0xe8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800387e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_UART_IRQHandler+0x66>
 8003892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fd85 	bl	80043ae <UART_Receive_IT>
      return;
 80038a4:	e25b      	b.n	8003d5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80de 	beq.w	8003a6c <HAL_UART_IRQHandler+0x22c>
 80038b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80d1 	beq.w	8003a6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_UART_IRQHandler+0xae>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_UART_IRQHandler+0xd2>
 80038fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_UART_IRQHandler+0xf6>
 800391e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d011      	beq.n	8003966 <HAL_UART_IRQHandler+0x126>
 8003942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d105      	bne.n	800395a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800394e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f043 0208 	orr.w	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 81f2 	beq.w	8003d54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_UART_IRQHandler+0x14e>
 800397c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fd10 	bl	80043ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003998:	2b40      	cmp	r3, #64	@ 0x40
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <HAL_UART_IRQHandler+0x17a>
 80039b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d04f      	beq.n	8003a5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fc18 	bl	80041f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ca:	2b40      	cmp	r3, #64	@ 0x40
 80039cc:	d141      	bne.n	8003a52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3314      	adds	r3, #20
 80039f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1d9      	bne.n	80039ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d013      	beq.n	8003a4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a26:	4a7e      	ldr	r2, [pc, #504]	@ (8003c20 <HAL_UART_IRQHandler+0x3e0>)
 8003a28:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fd2c 	bl	800248c <HAL_DMA_Abort_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d016      	beq.n	8003a68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a44:	4610      	mov	r0, r2
 8003a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a48:	e00e      	b.n	8003a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f99e 	bl	8003d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	e00a      	b.n	8003a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f99a 	bl	8003d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e006      	b.n	8003a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f996 	bl	8003d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a66:	e175      	b.n	8003d54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	bf00      	nop
    return;
 8003a6a:	e173      	b.n	8003d54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 814f 	bne.w	8003d14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8148 	beq.w	8003d14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8141 	beq.w	8003d14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab2:	2b40      	cmp	r3, #64	@ 0x40
 8003ab4:	f040 80b6 	bne.w	8003c24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ac4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8145 	beq.w	8003d58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	f080 813e 	bcs.w	8003d58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ae2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aee:	f000 8088 	beq.w	8003c02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1d9      	bne.n	8003af2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3314      	adds	r3, #20
 8003b44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e1      	bne.n	8003b3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ba4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e3      	bne.n	8003b7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003be4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003be6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e3      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fbd5 	bl	80023ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f8c1 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c1e:	e09b      	b.n	8003d58 <HAL_UART_IRQHandler+0x518>
 8003c20:	080042b7 	.word	0x080042b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 808e 	beq.w	8003d5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8089 	beq.w	8003d5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e3      	bne.n	8003c4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	623b      	str	r3, [r7, #32]
   return(result);
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ca6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e3      	bne.n	8003c82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cec:	61fa      	str	r2, [r7, #28]
 8003cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e3      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f847 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d12:	e023      	b.n	8003d5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <HAL_UART_IRQHandler+0x4f4>
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fad6 	bl	80042de <UART_Transmit_IT>
    return;
 8003d32:	e014      	b.n	8003d5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00e      	beq.n	8003d5e <HAL_UART_IRQHandler+0x51e>
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fb16 	bl	800437e <UART_EndTransmit_IT>
    return;
 8003d52:	e004      	b.n	8003d5e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d54:	bf00      	nop
 8003d56:	e002      	b.n	8003d5e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d5c:	bf00      	nop
  }
}
 8003d5e:	37e8      	adds	r7, #232	@ 0xe8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b090      	sub	sp, #64	@ 0x40
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d137      	bne.n	8003e44 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003df0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e2e:	61fa      	str	r2, [r7, #28]
 8003e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e42:	e002      	b.n	8003e4a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003e44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003e46:	f7fc fe3d 	bl	8000ac4 <HAL_UART_TxCpltCallback>
}
 8003e4a:	bf00      	nop
 8003e4c:	3740      	adds	r7, #64	@ 0x40
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff ff7f 	bl	8003d64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b09c      	sub	sp, #112	@ 0x70
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d172      	bne.n	8003f70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003eb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003eb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	667b      	str	r3, [r7, #100]	@ 0x64
 8003edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ee4:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ee6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	623b      	str	r3, [r7, #32]
   return(result);
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f18:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d119      	bne.n	8003f70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0310 	bic.w	r3, r3, #16
 8003f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f5c:	61fa      	str	r2, [r7, #28]
 8003f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	69b9      	ldr	r1, [r7, #24]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	617b      	str	r3, [r7, #20]
   return(result);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f72:	2200      	movs	r2, #0
 8003f74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d106      	bne.n	8003f8c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f82:	4619      	mov	r1, r3
 8003f84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003f86:	f7ff ff0b 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f8a:	e002      	b.n	8003f92 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003f8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003f8e:	f7fc fdbd 	bl	8000b0c <HAL_UART_RxCpltCallback>
}
 8003f92:	bf00      	nop
 8003f94:	3770      	adds	r7, #112	@ 0x70
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d108      	bne.n	8003fc8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff feed 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fc6:	e002      	b.n	8003fce <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fed5 	bl	8003d78 <HAL_UART_RxHalfCpltCallback>
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff2:	2b80      	cmp	r3, #128	@ 0x80
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b21      	cmp	r3, #33	@ 0x21
 8004008:	d108      	bne.n	800401c <UART_DMAError+0x46>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004016:	68b8      	ldr	r0, [r7, #8]
 8004018:	f000 f8c2 	bl	80041a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b22      	cmp	r3, #34	@ 0x22
 800403c:	d108      	bne.n	8004050 <UART_DMAError+0x7a>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800404a:	68b8      	ldr	r0, [r7, #8]
 800404c:	f000 f8d0 	bl	80041f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004054:	f043 0210 	orr.w	r2, r3, #16
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800405c:	68b8      	ldr	r0, [r7, #8]
 800405e:	f7ff fe95 	bl	8003d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b098      	sub	sp, #96	@ 0x60
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2222      	movs	r2, #34	@ 0x22
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	4a3e      	ldr	r2, [pc, #248]	@ (8004194 <UART_Start_Receive_DMA+0x128>)
 800409a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004198 <UART_Start_Receive_DMA+0x12c>)
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	4a3c      	ldr	r2, [pc, #240]	@ (800419c <UART_Start_Receive_DMA+0x130>)
 80040aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	2200      	movs	r2, #0
 80040b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	f7fe f916 	bl	80022fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d019      	beq.n	8004122 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	330c      	adds	r3, #12
 800410c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800410e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004110:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800411c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e5      	bne.n	80040ee <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3314      	adds	r3, #20
 8004128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	657b      	str	r3, [r7, #84]	@ 0x54
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3314      	adds	r3, #20
 8004140:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004142:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e5      	bne.n	8004122 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3314      	adds	r3, #20
 800415c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	617b      	str	r3, [r7, #20]
   return(result);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800416c:	653b      	str	r3, [r7, #80]	@ 0x50
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004176:	627a      	str	r2, [r7, #36]	@ 0x24
 8004178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6a39      	ldr	r1, [r7, #32]
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	61fb      	str	r3, [r7, #28]
   return(result);
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3760      	adds	r7, #96	@ 0x60
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	08003e6f 	.word	0x08003e6f
 8004198:	08003f9b 	.word	0x08003f9b
 800419c:	08003fd7 	.word	0x08003fd7

080041a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	@ 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	61ba      	str	r2, [r7, #24]
 80041ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6979      	ldr	r1, [r7, #20]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	613b      	str	r3, [r7, #16]
   return(result);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80041e4:	bf00      	nop
 80041e6:	3724      	adds	r7, #36	@ 0x24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b095      	sub	sp, #84	@ 0x54
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800420e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004218:	643a      	str	r2, [r7, #64]	@ 0x40
 800421a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800421e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	61fb      	str	r3, [r7, #28]
   return(result);
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800424c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800424e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d119      	bne.n	800429c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	60bb      	str	r3, [r7, #8]
   return(result);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f023 0310 	bic.w	r3, r3, #16
 800427e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004288:	61ba      	str	r2, [r7, #24]
 800428a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	613b      	str	r3, [r7, #16]
   return(result);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042aa:	bf00      	nop
 80042ac:	3754      	adds	r7, #84	@ 0x54
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff fd5b 	bl	8003d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b21      	cmp	r3, #33	@ 0x21
 80042f0:	d13e      	bne.n	8004370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d114      	bne.n	8004326 <UART_Transmit_IT+0x48>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d110      	bne.n	8004326 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	1c9a      	adds	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]
 8004324:	e008      	b.n	8004338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6211      	str	r1, [r2, #32]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4619      	mov	r1, r3
 8004346:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800435a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800436a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fb90 	bl	8000ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08c      	sub	sp, #48	@ 0x30
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b22      	cmp	r3, #34	@ 0x22
 80043c0:	f040 80ae 	bne.w	8004520 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043cc:	d117      	bne.n	80043fe <UART_Receive_IT+0x50>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d113      	bne.n	80043fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80043fc:	e026      	b.n	800444c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004410:	d007      	beq.n	8004422 <UART_Receive_IT+0x74>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <UART_Receive_IT+0x82>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e008      	b.n	8004442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800443c:	b2da      	uxtb	r2, r3
 800443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4619      	mov	r1, r3
 800445a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800445c:	2b00      	cmp	r3, #0
 800445e:	d15d      	bne.n	800451c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0220 	bic.w	r2, r2, #32
 800446e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800447e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d135      	bne.n	8004512 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	613b      	str	r3, [r7, #16]
   return(result);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f023 0310 	bic.w	r3, r3, #16
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044cc:	623a      	str	r2, [r7, #32]
 80044ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	69f9      	ldr	r1, [r7, #28]
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d10a      	bne.n	8004504 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004508:	4619      	mov	r1, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fc48 	bl	8003da0 <HAL_UARTEx_RxEventCallback>
 8004510:	e002      	b.n	8004518 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fafa 	bl	8000b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e002      	b.n	8004522 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	e000      	b.n	8004522 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3730      	adds	r7, #48	@ 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b0c0      	sub	sp, #256	@ 0x100
 8004532:	af00      	add	r7, sp, #0
 8004534:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	68d9      	ldr	r1, [r3, #12]
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	ea40 0301 	orr.w	r3, r0, r1
 8004554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	431a      	orrs	r2, r3
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004584:	f021 010c 	bic.w	r1, r1, #12
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004592:	430b      	orrs	r3, r1
 8004594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a6:	6999      	ldr	r1, [r3, #24]
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	ea40 0301 	orr.w	r3, r0, r1
 80045b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b8f      	ldr	r3, [pc, #572]	@ (80047f8 <UART_SetConfig+0x2cc>)
 80045bc:	429a      	cmp	r2, r3
 80045be:	d005      	beq.n	80045cc <UART_SetConfig+0xa0>
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b8d      	ldr	r3, [pc, #564]	@ (80047fc <UART_SetConfig+0x2d0>)
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d104      	bne.n	80045d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7ff f83e 	bl	800364c <HAL_RCC_GetPCLK2Freq>
 80045d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045d4:	e003      	b.n	80045de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d6:	f7ff f825 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 80045da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e8:	f040 810c 	bne.w	8004804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	1891      	adds	r1, r2, r2
 8004604:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004606:	415b      	adcs	r3, r3
 8004608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800460a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800460e:	4621      	mov	r1, r4
 8004610:	eb12 0801 	adds.w	r8, r2, r1
 8004614:	4629      	mov	r1, r5
 8004616:	eb43 0901 	adc.w	r9, r3, r1
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800462e:	4690      	mov	r8, r2
 8004630:	4699      	mov	r9, r3
 8004632:	4623      	mov	r3, r4
 8004634:	eb18 0303 	adds.w	r3, r8, r3
 8004638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800463c:	462b      	mov	r3, r5
 800463e:	eb49 0303 	adc.w	r3, r9, r3
 8004642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004652:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800465a:	460b      	mov	r3, r1
 800465c:	18db      	adds	r3, r3, r3
 800465e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004660:	4613      	mov	r3, r2
 8004662:	eb42 0303 	adc.w	r3, r2, r3
 8004666:	657b      	str	r3, [r7, #84]	@ 0x54
 8004668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800466c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004670:	f7fc f8b0 	bl	80007d4 <__aeabi_uldivmod>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4b61      	ldr	r3, [pc, #388]	@ (8004800 <UART_SetConfig+0x2d4>)
 800467a:	fba3 2302 	umull	r2, r3, r3, r2
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	011c      	lsls	r4, r3, #4
 8004682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800468c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	1891      	adds	r1, r2, r2
 800469a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800469c:	415b      	adcs	r3, r3
 800469e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046a4:	4641      	mov	r1, r8
 80046a6:	eb12 0a01 	adds.w	sl, r2, r1
 80046aa:	4649      	mov	r1, r9
 80046ac:	eb43 0b01 	adc.w	fp, r3, r1
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c4:	4692      	mov	sl, r2
 80046c6:	469b      	mov	fp, r3
 80046c8:	4643      	mov	r3, r8
 80046ca:	eb1a 0303 	adds.w	r3, sl, r3
 80046ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046d2:	464b      	mov	r3, r9
 80046d4:	eb4b 0303 	adc.w	r3, fp, r3
 80046d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046f0:	460b      	mov	r3, r1
 80046f2:	18db      	adds	r3, r3, r3
 80046f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80046f6:	4613      	mov	r3, r2
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004706:	f7fc f865 	bl	80007d4 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4611      	mov	r1, r2
 8004710:	4b3b      	ldr	r3, [pc, #236]	@ (8004800 <UART_SetConfig+0x2d4>)
 8004712:	fba3 2301 	umull	r2, r3, r3, r1
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2264      	movs	r2, #100	@ 0x64
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	1acb      	subs	r3, r1, r3
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004726:	4b36      	ldr	r3, [pc, #216]	@ (8004800 <UART_SetConfig+0x2d4>)
 8004728:	fba3 2302 	umull	r2, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004734:	441c      	add	r4, r3
 8004736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473a:	2200      	movs	r2, #0
 800473c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004740:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	1891      	adds	r1, r2, r2
 800474e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004750:	415b      	adcs	r3, r3
 8004752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004758:	4641      	mov	r1, r8
 800475a:	1851      	adds	r1, r2, r1
 800475c:	6339      	str	r1, [r7, #48]	@ 0x30
 800475e:	4649      	mov	r1, r9
 8004760:	414b      	adcs	r3, r1
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004770:	4659      	mov	r1, fp
 8004772:	00cb      	lsls	r3, r1, #3
 8004774:	4651      	mov	r1, sl
 8004776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477a:	4651      	mov	r1, sl
 800477c:	00ca      	lsls	r2, r1, #3
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	4603      	mov	r3, r0
 8004784:	4642      	mov	r2, r8
 8004786:	189b      	adds	r3, r3, r2
 8004788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800478c:	464b      	mov	r3, r9
 800478e:	460a      	mov	r2, r1
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047ac:	460b      	mov	r3, r1
 80047ae:	18db      	adds	r3, r3, r3
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b2:	4613      	mov	r3, r2
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047c2:	f7fc f807 	bl	80007d4 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <UART_SetConfig+0x2d4>)
 80047cc:	fba3 1302 	umull	r1, r3, r3, r2
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	2164      	movs	r1, #100	@ 0x64
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	3332      	adds	r3, #50	@ 0x32
 80047de:	4a08      	ldr	r2, [pc, #32]	@ (8004800 <UART_SetConfig+0x2d4>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 0207 	and.w	r2, r3, #7
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4422      	add	r2, r4
 80047f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f4:	e106      	b.n	8004a04 <UART_SetConfig+0x4d8>
 80047f6:	bf00      	nop
 80047f8:	40011000 	.word	0x40011000
 80047fc:	40011400 	.word	0x40011400
 8004800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800480e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004816:	4642      	mov	r2, r8
 8004818:	464b      	mov	r3, r9
 800481a:	1891      	adds	r1, r2, r2
 800481c:	6239      	str	r1, [r7, #32]
 800481e:	415b      	adcs	r3, r3
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004826:	4641      	mov	r1, r8
 8004828:	1854      	adds	r4, r2, r1
 800482a:	4649      	mov	r1, r9
 800482c:	eb43 0501 	adc.w	r5, r3, r1
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	00eb      	lsls	r3, r5, #3
 800483a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800483e:	00e2      	lsls	r2, r4, #3
 8004840:	4614      	mov	r4, r2
 8004842:	461d      	mov	r5, r3
 8004844:	4643      	mov	r3, r8
 8004846:	18e3      	adds	r3, r4, r3
 8004848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800484c:	464b      	mov	r3, r9
 800484e:	eb45 0303 	adc.w	r3, r5, r3
 8004852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004862:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004872:	4629      	mov	r1, r5
 8004874:	008b      	lsls	r3, r1, #2
 8004876:	4621      	mov	r1, r4
 8004878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487c:	4621      	mov	r1, r4
 800487e:	008a      	lsls	r2, r1, #2
 8004880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004884:	f7fb ffa6 	bl	80007d4 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4b60      	ldr	r3, [pc, #384]	@ (8004a10 <UART_SetConfig+0x4e4>)
 800488e:	fba3 2302 	umull	r2, r3, r3, r2
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	011c      	lsls	r4, r3, #4
 8004896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800489a:	2200      	movs	r2, #0
 800489c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048a8:	4642      	mov	r2, r8
 80048aa:	464b      	mov	r3, r9
 80048ac:	1891      	adds	r1, r2, r2
 80048ae:	61b9      	str	r1, [r7, #24]
 80048b0:	415b      	adcs	r3, r3
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b8:	4641      	mov	r1, r8
 80048ba:	1851      	adds	r1, r2, r1
 80048bc:	6139      	str	r1, [r7, #16]
 80048be:	4649      	mov	r1, r9
 80048c0:	414b      	adcs	r3, r1
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d0:	4659      	mov	r1, fp
 80048d2:	00cb      	lsls	r3, r1, #3
 80048d4:	4651      	mov	r1, sl
 80048d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048da:	4651      	mov	r1, sl
 80048dc:	00ca      	lsls	r2, r1, #3
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	4642      	mov	r2, r8
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048ec:	464b      	mov	r3, r9
 80048ee:	460a      	mov	r2, r1
 80048f0:	eb42 0303 	adc.w	r3, r2, r3
 80048f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004902:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004910:	4649      	mov	r1, r9
 8004912:	008b      	lsls	r3, r1, #2
 8004914:	4641      	mov	r1, r8
 8004916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491a:	4641      	mov	r1, r8
 800491c:	008a      	lsls	r2, r1, #2
 800491e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004922:	f7fb ff57 	bl	80007d4 <__aeabi_uldivmod>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4611      	mov	r1, r2
 800492c:	4b38      	ldr	r3, [pc, #224]	@ (8004a10 <UART_SetConfig+0x4e4>)
 800492e:	fba3 2301 	umull	r2, r3, r3, r1
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	2264      	movs	r2, #100	@ 0x64
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	1acb      	subs	r3, r1, r3
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	3332      	adds	r3, #50	@ 0x32
 8004940:	4a33      	ldr	r2, [pc, #204]	@ (8004a10 <UART_SetConfig+0x4e4>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800494c:	441c      	add	r4, r3
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	673b      	str	r3, [r7, #112]	@ 0x70
 8004956:	677a      	str	r2, [r7, #116]	@ 0x74
 8004958:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800495c:	4642      	mov	r2, r8
 800495e:	464b      	mov	r3, r9
 8004960:	1891      	adds	r1, r2, r2
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	415b      	adcs	r3, r3
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800496c:	4641      	mov	r1, r8
 800496e:	1851      	adds	r1, r2, r1
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	4649      	mov	r1, r9
 8004974:	414b      	adcs	r3, r1
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004984:	4659      	mov	r1, fp
 8004986:	00cb      	lsls	r3, r1, #3
 8004988:	4651      	mov	r1, sl
 800498a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800498e:	4651      	mov	r1, sl
 8004990:	00ca      	lsls	r2, r1, #3
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	4603      	mov	r3, r0
 8004998:	4642      	mov	r2, r8
 800499a:	189b      	adds	r3, r3, r2
 800499c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800499e:	464b      	mov	r3, r9
 80049a0:	460a      	mov	r2, r1
 80049a2:	eb42 0303 	adc.w	r3, r2, r3
 80049a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80049b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049c0:	4649      	mov	r1, r9
 80049c2:	008b      	lsls	r3, r1, #2
 80049c4:	4641      	mov	r1, r8
 80049c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ca:	4641      	mov	r1, r8
 80049cc:	008a      	lsls	r2, r1, #2
 80049ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049d2:	f7fb feff 	bl	80007d4 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4b0d      	ldr	r3, [pc, #52]	@ (8004a10 <UART_SetConfig+0x4e4>)
 80049dc:	fba3 1302 	umull	r1, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	2164      	movs	r1, #100	@ 0x64
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	3332      	adds	r3, #50	@ 0x32
 80049ee:	4a08      	ldr	r2, [pc, #32]	@ (8004a10 <UART_SetConfig+0x4e4>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	f003 020f 	and.w	r2, r3, #15
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4422      	add	r2, r4
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a10:	51eb851f 	.word	0x51eb851f

08004a14 <memset>:
 8004a14:	4402      	add	r2, r0
 8004a16:	4603      	mov	r3, r0
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d100      	bne.n	8004a1e <memset+0xa>
 8004a1c:	4770      	bx	lr
 8004a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a22:	e7f9      	b.n	8004a18 <memset+0x4>

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4d0d      	ldr	r5, [pc, #52]	@ (8004a5c <__libc_init_array+0x38>)
 8004a28:	4c0d      	ldr	r4, [pc, #52]	@ (8004a60 <__libc_init_array+0x3c>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	2600      	movs	r6, #0
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	4d0b      	ldr	r5, [pc, #44]	@ (8004a64 <__libc_init_array+0x40>)
 8004a36:	4c0c      	ldr	r4, [pc, #48]	@ (8004a68 <__libc_init_array+0x44>)
 8004a38:	f000 f818 	bl	8004a6c <_init>
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	2600      	movs	r6, #0
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	08004aac 	.word	0x08004aac
 8004a60:	08004aac 	.word	0x08004aac
 8004a64:	08004aac 	.word	0x08004aac
 8004a68:	08004ab0 	.word	0x08004ab0

08004a6c <_init>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr

08004a78 <_fini>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr
