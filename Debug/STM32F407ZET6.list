
STM32F407ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005098  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005220  08005220  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005240  08005240  0000702c  2**0
                  CONTENTS
  4 .ARM          00000008  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005248  08005248  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005248  08005248  00006248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005250  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000702c  2**0
                  CONTENTS
 10 .bss          000003ac  2000002c  2000002c  0000702c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  0000702c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e03f  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c21  00000000  00000000  0001509b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00016cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ba  00000000  00000000  00017920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016d3  00000000  00000000  000182da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5d2  00000000  00000000  000199ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8014  00000000  00000000  00027f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eff93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003540  00000000  00000000  000effd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f3518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005208 	.word	0x08005208

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08005208 	.word	0x08005208

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b96a 	b.w	8000ac0 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	460c      	mov	r4, r1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14e      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000810:	4694      	mov	ip, r2
 8000812:	458c      	cmp	ip, r1
 8000814:	4686      	mov	lr, r0
 8000816:	fab2 f282 	clz	r2, r2
 800081a:	d962      	bls.n	80008e2 <__udivmoddi4+0xde>
 800081c:	b14a      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	4091      	lsls	r1, r2
 8000824:	fa20 f303 	lsr.w	r3, r0, r3
 8000828:	fa0c fc02 	lsl.w	ip, ip, r2
 800082c:	4319      	orrs	r1, r3
 800082e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f f68c 	uxth.w	r6, ip
 800083a:	fbb1 f4f7 	udiv	r4, r1, r7
 800083e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000842:	fb07 1114 	mls	r1, r7, r4, r1
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb04 f106 	mul.w	r1, r4, r6
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f104 30ff 	add.w	r0, r4, #4294967295
 800085a:	f080 8112 	bcs.w	8000a82 <__udivmoddi4+0x27e>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 810f 	bls.w	8000a82 <__udivmoddi4+0x27e>
 8000864:	3c02      	subs	r4, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a59      	subs	r1, r3, r1
 800086a:	fa1f f38e 	uxth.w	r3, lr
 800086e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000872:	fb07 1110 	mls	r1, r7, r0, r1
 8000876:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800087a:	fb00 f606 	mul.w	r6, r0, r6
 800087e:	429e      	cmp	r6, r3
 8000880:	d90a      	bls.n	8000898 <__udivmoddi4+0x94>
 8000882:	eb1c 0303 	adds.w	r3, ip, r3
 8000886:	f100 31ff 	add.w	r1, r0, #4294967295
 800088a:	f080 80fc 	bcs.w	8000a86 <__udivmoddi4+0x282>
 800088e:	429e      	cmp	r6, r3
 8000890:	f240 80f9 	bls.w	8000a86 <__udivmoddi4+0x282>
 8000894:	4463      	add	r3, ip
 8000896:	3802      	subs	r0, #2
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800089e:	2100      	movs	r1, #0
 80008a0:	b11d      	cbz	r5, 80008aa <__udivmoddi4+0xa6>
 80008a2:	40d3      	lsrs	r3, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	e9c5 3200 	strd	r3, r2, [r5]
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d905      	bls.n	80008be <__udivmoddi4+0xba>
 80008b2:	b10d      	cbz	r5, 80008b8 <__udivmoddi4+0xb4>
 80008b4:	e9c5 0100 	strd	r0, r1, [r5]
 80008b8:	2100      	movs	r1, #0
 80008ba:	4608      	mov	r0, r1
 80008bc:	e7f5      	b.n	80008aa <__udivmoddi4+0xa6>
 80008be:	fab3 f183 	clz	r1, r3
 80008c2:	2900      	cmp	r1, #0
 80008c4:	d146      	bne.n	8000954 <__udivmoddi4+0x150>
 80008c6:	42a3      	cmp	r3, r4
 80008c8:	d302      	bcc.n	80008d0 <__udivmoddi4+0xcc>
 80008ca:	4290      	cmp	r0, r2
 80008cc:	f0c0 80f0 	bcc.w	8000ab0 <__udivmoddi4+0x2ac>
 80008d0:	1a86      	subs	r6, r0, r2
 80008d2:	eb64 0303 	sbc.w	r3, r4, r3
 80008d6:	2001      	movs	r0, #1
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d0e6      	beq.n	80008aa <__udivmoddi4+0xa6>
 80008dc:	e9c5 6300 	strd	r6, r3, [r5]
 80008e0:	e7e3      	b.n	80008aa <__udivmoddi4+0xa6>
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x204>
 80008e8:	eba1 040c 	sub.w	r4, r1, ip
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	fa1f f78c 	uxth.w	r7, ip
 80008f4:	2101      	movs	r1, #1
 80008f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80008fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb07 f006 	mul.w	r0, r7, r6
 800090a:	4298      	cmp	r0, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x11c>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f106 34ff 	add.w	r4, r6, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x11a>
 8000918:	4298      	cmp	r0, r3
 800091a:	f200 80cd 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 800091e:	4626      	mov	r6, r4
 8000920:	1a1c      	subs	r4, r3, r0
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb4 f0f8 	udiv	r0, r4, r8
 800092a:	fb08 4410 	mls	r4, r8, r0, r4
 800092e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000932:	fb00 f707 	mul.w	r7, r0, r7
 8000936:	429f      	cmp	r7, r3
 8000938:	d908      	bls.n	800094c <__udivmoddi4+0x148>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000942:	d202      	bcs.n	800094a <__udivmoddi4+0x146>
 8000944:	429f      	cmp	r7, r3
 8000946:	f200 80b0 	bhi.w	8000aaa <__udivmoddi4+0x2a6>
 800094a:	4620      	mov	r0, r4
 800094c:	1bdb      	subs	r3, r3, r7
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	e7a5      	b.n	80008a0 <__udivmoddi4+0x9c>
 8000954:	f1c1 0620 	rsb	r6, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 f706 	lsr.w	r7, r2, r6
 800095e:	431f      	orrs	r7, r3
 8000960:	fa20 fc06 	lsr.w	ip, r0, r6
 8000964:	fa04 f301 	lsl.w	r3, r4, r1
 8000968:	ea43 030c 	orr.w	r3, r3, ip
 800096c:	40f4      	lsrs	r4, r6
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	0c38      	lsrs	r0, r7, #16
 8000974:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000978:	fbb4 fef0 	udiv	lr, r4, r0
 800097c:	fa1f fc87 	uxth.w	ip, r7
 8000980:	fb00 441e 	mls	r4, r0, lr, r4
 8000984:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000988:	fb0e f90c 	mul.w	r9, lr, ip
 800098c:	45a1      	cmp	r9, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90a      	bls.n	80009aa <__udivmoddi4+0x1a6>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f10e 3aff 	add.w	sl, lr, #4294967295
 800099a:	f080 8084 	bcs.w	8000aa6 <__udivmoddi4+0x2a2>
 800099e:	45a1      	cmp	r9, r4
 80009a0:	f240 8081 	bls.w	8000aa6 <__udivmoddi4+0x2a2>
 80009a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	eba4 0409 	sub.w	r4, r4, r9
 80009ae:	fa1f f983 	uxth.w	r9, r3
 80009b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009b6:	fb00 4413 	mls	r4, r0, r3, r4
 80009ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009be:	fb03 fc0c 	mul.w	ip, r3, ip
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d907      	bls.n	80009d6 <__udivmoddi4+0x1d2>
 80009c6:	193c      	adds	r4, r7, r4
 80009c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80009cc:	d267      	bcs.n	8000a9e <__udivmoddi4+0x29a>
 80009ce:	45a4      	cmp	ip, r4
 80009d0:	d965      	bls.n	8000a9e <__udivmoddi4+0x29a>
 80009d2:	3b02      	subs	r3, #2
 80009d4:	443c      	add	r4, r7
 80009d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009da:	fba0 9302 	umull	r9, r3, r0, r2
 80009de:	eba4 040c 	sub.w	r4, r4, ip
 80009e2:	429c      	cmp	r4, r3
 80009e4:	46ce      	mov	lr, r9
 80009e6:	469c      	mov	ip, r3
 80009e8:	d351      	bcc.n	8000a8e <__udivmoddi4+0x28a>
 80009ea:	d04e      	beq.n	8000a8a <__udivmoddi4+0x286>
 80009ec:	b155      	cbz	r5, 8000a04 <__udivmoddi4+0x200>
 80009ee:	ebb8 030e 	subs.w	r3, r8, lr
 80009f2:	eb64 040c 	sbc.w	r4, r4, ip
 80009f6:	fa04 f606 	lsl.w	r6, r4, r6
 80009fa:	40cb      	lsrs	r3, r1
 80009fc:	431e      	orrs	r6, r3
 80009fe:	40cc      	lsrs	r4, r1
 8000a00:	e9c5 6400 	strd	r6, r4, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	e750      	b.n	80008aa <__udivmoddi4+0xa6>
 8000a08:	f1c2 0320 	rsb	r3, r2, #32
 8000a0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	fa24 f303 	lsr.w	r3, r4, r3
 8000a18:	4094      	lsls	r4, r2
 8000a1a:	430c      	orrs	r4, r1
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a24:	fa1f f78c 	uxth.w	r7, ip
 8000a28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a30:	0c23      	lsrs	r3, r4, #16
 8000a32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a36:	fb00 f107 	mul.w	r1, r0, r7
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x24c>
 8000a3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a46:	d22c      	bcs.n	8000aa2 <__udivmoddi4+0x29e>
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d92a      	bls.n	8000aa2 <__udivmoddi4+0x29e>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a58:	fb08 3311 	mls	r3, r8, r1, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb01 f307 	mul.w	r3, r1, r7
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x276>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a70:	d213      	bcs.n	8000a9a <__udivmoddi4+0x296>
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	d911      	bls.n	8000a9a <__udivmoddi4+0x296>
 8000a76:	3902      	subs	r1, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	1ae4      	subs	r4, r4, r3
 8000a7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a80:	e739      	b.n	80008f6 <__udivmoddi4+0xf2>
 8000a82:	4604      	mov	r4, r0
 8000a84:	e6f0      	b.n	8000868 <__udivmoddi4+0x64>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e706      	b.n	8000898 <__udivmoddi4+0x94>
 8000a8a:	45c8      	cmp	r8, r9
 8000a8c:	d2ae      	bcs.n	80009ec <__udivmoddi4+0x1e8>
 8000a8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a96:	3801      	subs	r0, #1
 8000a98:	e7a8      	b.n	80009ec <__udivmoddi4+0x1e8>
 8000a9a:	4631      	mov	r1, r6
 8000a9c:	e7ed      	b.n	8000a7a <__udivmoddi4+0x276>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	e799      	b.n	80009d6 <__udivmoddi4+0x1d2>
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	e7d4      	b.n	8000a50 <__udivmoddi4+0x24c>
 8000aa6:	46d6      	mov	lr, sl
 8000aa8:	e77f      	b.n	80009aa <__udivmoddi4+0x1a6>
 8000aaa:	4463      	add	r3, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	e74d      	b.n	800094c <__udivmoddi4+0x148>
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e70f      	b.n	80008d8 <__udivmoddi4+0xd4>
 8000ab8:	3e02      	subs	r6, #2
 8000aba:	4463      	add	r3, ip
 8000abc:	e730      	b.n	8000920 <__udivmoddi4+0x11c>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <HAL_UART_TxCpltCallback+0x3c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d104      	bne.n	8000ae0 <HAL_UART_TxCpltCallback+0x1c>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000ad6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ada:	480a      	ldr	r0, [pc, #40]	@ (8000b04 <HAL_UART_TxCpltCallback+0x40>)
 8000adc:	f002 f9d1 	bl	8002e82 <HAL_GPIO_TogglePin>
	}

	if(huart->Instance == USART3){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_UART_TxCpltCallback+0x44>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d106      	bne.n	8000af8 <HAL_UART_TxCpltCallback+0x34>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <HAL_UART_TxCpltCallback+0x40>)
 8000af0:	f002 f9c7 	bl	8002e82 <HAL_GPIO_TogglePin>
		WT901_Update_Message();
 8000af4:	f000 fab0 	bl	8001058 <WT901_Update_Message>
	}
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40021400 	.word	0x40021400
 8000b08:	40004800 	.word	0x40004800

08000b0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <HAL_UART_RxCpltCallback+0x5c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d104      	bne.n	8000b28 <HAL_UART_RxCpltCallback+0x1c>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000b1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b22:	4812      	ldr	r0, [pc, #72]	@ (8000b6c <HAL_UART_RxCpltCallback+0x60>)
 8000b24:	f002 f9ad 	bl	8002e82 <HAL_GPIO_TogglePin>
	}

	if(huart->Instance == USART3){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <HAL_UART_RxCpltCallback+0x64>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d115      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x52>
		WT901_Update_Message();
 8000b32:	f000 fa91 	bl	8001058 <WT901_Update_Message>
		for(uint8_t i = 0; i < 11; i++){
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e008      	b.n	8000b4e <HAL_UART_RxCpltCallback+0x42>
			CH340_TX_Buffer[i] = WT901_RX_Buffer[i];
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <HAL_UART_RxCpltCallback+0x68>)
 8000b42:	5c89      	ldrb	r1, [r1, r2]
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <HAL_UART_RxCpltCallback+0x6c>)
 8000b46:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 11; i++){
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	2b0a      	cmp	r3, #10
 8000b52:	d9f3      	bls.n	8000b3c <HAL_UART_RxCpltCallback+0x30>
		}
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000b54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <HAL_UART_RxCpltCallback+0x60>)
 8000b5a:	f002 f992 	bl	8002e82 <HAL_GPIO_TogglePin>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40021400 	.word	0x40021400
 8000b70:	40004800 	.word	0x40004800
 8000b74:	200002e0 	.word	0x200002e0
 8000b78:	200002a0 	.word	0x200002a0

08000b7c <HAL_TIM_PeriodElapsedCallback>:
//void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
//	if(huart->Instance == USART1){}
//	if(huart->Instance == USART3){}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10e      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(BLUE_Signal_LED_GPIO_Port, BLUE_Signal_LED_Pin);
 8000b8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b92:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b94:	f002 f975 	bl	8002e82 <HAL_GPIO_TogglePin>
		Timer_200Hz_Trig = !(Timer_200Hz_Trig);
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2301      	moveq	r3, #1
 8000ba2:	2300      	movne	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000baa:	701a      	strb	r2, [r3, #0]
	}
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40001000 	.word	0x40001000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	200003d0 	.word	0x200003d0

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f001 f9fe 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f83c 	bl	8000c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 f974 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd0:	f000 f92c 	bl	8000e2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000bd4:	f000 f8d6 	bl	8000d84 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000bd8:	f000 f8fe 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000bdc:	f000 f89c 	bl	8000d18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <main+0x64>)
 8000be2:	f002 fe51 	bl	8003888 <HAL_TIM_Base_Start_IT>

  //HAL_UART_Transmit_DMA(&huart3, WT901_TX_Buffer, sizeof(WT901_TX_Buffer));

  HAL_UART_Transmit_DMA(&huart3, WT901_TX_ALG, sizeof(WT901_TX_ALG));
 8000be6:	2205      	movs	r2, #5
 8000be8:	490f      	ldr	r1, [pc, #60]	@ (8000c28 <main+0x68>)
 8000bea:	4810      	ldr	r0, [pc, #64]	@ (8000c2c <main+0x6c>)
 8000bec:	f003 f960 	bl	8003eb0 <HAL_UART_Transmit_DMA>
  HAL_UART_Transmit_DMA(&huart3, WT901_TX_GYRO, sizeof(WT901_TX_GYRO));
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	490f      	ldr	r1, [pc, #60]	@ (8000c30 <main+0x70>)
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <main+0x6c>)
 8000bf6:	f003 f95b 	bl	8003eb0 <HAL_UART_Transmit_DMA>
  HAL_UART_Transmit_DMA(&huart3, WT901_TX_Ret, sizeof(WT901_TX_Ret));
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <main+0x74>)
 8000bfe:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <main+0x6c>)
 8000c00:	f003 f956 	bl	8003eb0 <HAL_UART_Transmit_DMA>
  HAL_UART_Transmit_DMA(&huart3, WT901_TX_Save, sizeof(WT901_TX_Save));
 8000c04:	2205      	movs	r2, #5
 8000c06:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <main+0x78>)
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <main+0x6c>)
 8000c0a:	f003 f951 	bl	8003eb0 <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit_DMA(&huart1, CH340_TX_Buffer, sizeof(CH340_TX_Buffer));
 8000c0e:	2240      	movs	r2, #64	@ 0x40
 8000c10:	490a      	ldr	r1, [pc, #40]	@ (8000c3c <main+0x7c>)
 8000c12:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <main+0x80>)
 8000c14:	f003 f94c 	bl	8003eb0 <HAL_UART_Transmit_DMA>
//	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
//	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  HAL_Delay(500);
 8000c18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c1c:	f001 fa44 	bl	80020a8 <HAL_Delay>
	  HAL_UART_Transmit_DMA(&huart1, CH340_TX_Buffer, sizeof(CH340_TX_Buffer));
 8000c20:	bf00      	nop
 8000c22:	e7f4      	b.n	8000c0e <main+0x4e>
 8000c24:	20000048 	.word	0x20000048
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	200000d8 	.word	0x200000d8
 8000c30:	20000010 	.word	0x20000010
 8000c34:	20000018 	.word	0x20000018
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	200002a0 	.word	0x200002a0
 8000c40:	20000090 	.word	0x20000090

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	@ 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2230      	movs	r2, #48	@ 0x30
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 faac 	bl	80051b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	4a27      	ldr	r2, [pc, #156]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <SystemClock_Config+0xcc>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <SystemClock_Config+0xd0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a21      	ldr	r2, [pc, #132]	@ (8000d14 <SystemClock_Config+0xd0>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <SystemClock_Config+0xd0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cb8:	23a8      	movs	r3, #168	@ 0xa8
 8000cba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 f8f5 	bl	8002eb8 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd4:	f000 ff14 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fb56 	bl	80033a8 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d02:	f000 fefd 	bl	8001b00 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	@ 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_TIM6_Init+0x64>)
 8000d28:	4a15      	ldr	r2, [pc, #84]	@ (8000d80 <MX_TIM6_Init+0x68>)
 8000d2a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <MX_TIM6_Init+0x64>)
 8000d2e:	2253      	movs	r2, #83	@ 0x53
 8000d30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_TIM6_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <MX_TIM6_Init+0x64>)
 8000d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_TIM6_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_TIM6_Init+0x64>)
 8000d48:	f002 fd4e 	bl	80037e8 <HAL_TIM_Base_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d52:	f000 fed5 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <MX_TIM6_Init+0x64>)
 8000d64:	f002 ffc4 	bl	8003cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d6e:	f000 fec7 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000048 	.word	0x20000048
 8000d80:	40001000 	.word	0x40001000

08000d84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_USART1_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_USART1_UART_Init+0x4c>)
 8000dbc:	f003 f828 	bl	8003e10 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 fe9b 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000090 	.word	0x20000090
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <MX_USART3_UART_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART3_UART_Init+0x4c>)
 8000e10:	f002 fffe 	bl	8003e10 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e1a:	f000 fe71 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000d8 	.word	0x200000d8
 8000e28:	40004800 	.word	0x40004800

08000e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <MX_DMA_Init+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <MX_DMA_Init+0x88>)
 8000e3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <MX_DMA_Init+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_DMA_Init+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a17      	ldr	r2, [pc, #92]	@ (8000eb4 <MX_DMA_Init+0x88>)
 8000e58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_DMA_Init+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	200c      	movs	r0, #12
 8000e70:	f001 fa19 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e74:	200c      	movs	r0, #12
 8000e76:	f001 fa32 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	200e      	movs	r0, #14
 8000e80:	f001 fa11 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e84:	200e      	movs	r0, #14
 8000e86:	f001 fa2a 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	203a      	movs	r0, #58	@ 0x3a
 8000e90:	f001 fa09 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e94:	203a      	movs	r0, #58	@ 0x3a
 8000e96:	f001 fa22 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2046      	movs	r0, #70	@ 0x46
 8000ea0:	f001 fa01 	bl	80022a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ea4:	2046      	movs	r0, #70	@ 0x46
 8000ea6:	f001 fa1a 	bl	80022de <HAL_NVIC_EnableIRQ>

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	@ 0x30
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b59      	ldr	r3, [pc, #356]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	4b55      	ldr	r3, [pc, #340]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a54      	ldr	r2, [pc, #336]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4b52      	ldr	r3, [pc, #328]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a4d      	ldr	r2, [pc, #308]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b4b      	ldr	r3, [pc, #300]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0320 	and.w	r3, r3, #32
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b47      	ldr	r3, [pc, #284]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a46      	ldr	r2, [pc, #280]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a3f      	ldr	r2, [pc, #252]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a38      	ldr	r2, [pc, #224]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <MX_GPIO_Init+0x18c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7c:	4832      	ldr	r0, [pc, #200]	@ (8001048 <MX_GPIO_Init+0x190>)
 8000f7e:	f001 ff67 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f88:	482f      	ldr	r0, [pc, #188]	@ (8001048 <MX_GPIO_Init+0x190>)
 8000f8a:	f001 ff61 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BLUE_Signal_LED_Pin|GREEN_Signal_LED_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000f94:	482d      	ldr	r0, [pc, #180]	@ (800104c <MX_GPIO_Init+0x194>)
 8000f96:	f001 ff5b 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_Signal_LED_GPIO_Port, RED_Signal_LED_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa0:	482b      	ldr	r0, [pc, #172]	@ (8001050 <MX_GPIO_Init+0x198>)
 8000fa2:	f001 ff55 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4824      	ldr	r0, [pc, #144]	@ (800104c <MX_GPIO_Init+0x194>)
 8000fba:	f001 fdad 	bl	8002b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000fbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	@ (8001048 <MX_GPIO_Init+0x190>)
 8000fd8:	f001 fd9e 	bl	8002b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUE_Signal_LED_Pin GREEN_Signal_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_Signal_LED_Pin|GREEN_Signal_LED_Pin;
 8000fdc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4815      	ldr	r0, [pc, #84]	@ (800104c <MX_GPIO_Init+0x194>)
 8000ff6:	f001 fd8f 	bl	8002b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_Signal_LED_Pin */
  GPIO_InitStruct.Pin = RED_Signal_LED_Pin;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RED_Signal_LED_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	480f      	ldr	r0, [pc, #60]	@ (8001050 <MX_GPIO_Init+0x198>)
 8001014:	f001 fd80 	bl	8002b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001018:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102a:	2304      	movs	r3, #4
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_GPIO_Init+0x198>)
 8001036:	f001 fd6f 	bl	8002b18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	@ 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40021400 	.word	0x40021400
 800104c:	40021000 	.word	0x40021000
 8001050:	40020400 	.word	0x40020400
 8001054:	00000000 	.word	0x00000000

08001058 <WT901_Update_Message>:

/* USER CODE BEGIN 4 */
static void WT901_Update_Message(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, WT901_RX_Buffer, sizeof(WT901_RX_Buffer));
 800105e:	220b      	movs	r2, #11
 8001060:	499f      	ldr	r1, [pc, #636]	@ (80012e0 <WT901_Update_Message+0x288>)
 8001062:	48a0      	ldr	r0, [pc, #640]	@ (80012e4 <WT901_Update_Message+0x28c>)
 8001064:	f002 ff94 	bl	8003f90 <HAL_UART_Receive_DMA>

	Receive_Message_Struct_t Receive_Message_Temporary_Buffer;

	Receive_Message_Temporary_Buffer.First_Byte_Receive = WT901_RX_Buffer[0];
 8001068:	4b9d      	ldr	r3, [pc, #628]	@ (80012e0 <WT901_Update_Message+0x288>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	703b      	strb	r3, [r7, #0]
	Receive_Message_Temporary_Buffer.Message_Address_Receive = WT901_RX_Buffer[1];
 800106e:	4b9c      	ldr	r3, [pc, #624]	@ (80012e0 <WT901_Update_Message+0x288>)
 8001070:	785b      	ldrb	r3, [r3, #1]
 8001072:	707b      	strb	r3, [r7, #1]
	Receive_Message_Temporary_Buffer.Data_Byte_0 = WT901_RX_Buffer[2];
 8001074:	4b9a      	ldr	r3, [pc, #616]	@ (80012e0 <WT901_Update_Message+0x288>)
 8001076:	789b      	ldrb	r3, [r3, #2]
 8001078:	70bb      	strb	r3, [r7, #2]
	Receive_Message_Temporary_Buffer.Data_Byte_1 = WT901_RX_Buffer[3];
 800107a:	4b99      	ldr	r3, [pc, #612]	@ (80012e0 <WT901_Update_Message+0x288>)
 800107c:	78db      	ldrb	r3, [r3, #3]
 800107e:	70fb      	strb	r3, [r7, #3]
	Receive_Message_Temporary_Buffer.Data_Byte_2 = WT901_RX_Buffer[4];
 8001080:	4b97      	ldr	r3, [pc, #604]	@ (80012e0 <WT901_Update_Message+0x288>)
 8001082:	791b      	ldrb	r3, [r3, #4]
 8001084:	713b      	strb	r3, [r7, #4]
	Receive_Message_Temporary_Buffer.Data_Byte_3 = WT901_RX_Buffer[5];
 8001086:	4b96      	ldr	r3, [pc, #600]	@ (80012e0 <WT901_Update_Message+0x288>)
 8001088:	795b      	ldrb	r3, [r3, #5]
 800108a:	717b      	strb	r3, [r7, #5]
	Receive_Message_Temporary_Buffer.Data_Byte_4 = WT901_RX_Buffer[6];
 800108c:	4b94      	ldr	r3, [pc, #592]	@ (80012e0 <WT901_Update_Message+0x288>)
 800108e:	799b      	ldrb	r3, [r3, #6]
 8001090:	71bb      	strb	r3, [r7, #6]
	Receive_Message_Temporary_Buffer.Data_Byte_5 = WT901_RX_Buffer[7];
 8001092:	4b93      	ldr	r3, [pc, #588]	@ (80012e0 <WT901_Update_Message+0x288>)
 8001094:	79db      	ldrb	r3, [r3, #7]
 8001096:	71fb      	strb	r3, [r7, #7]
	Receive_Message_Temporary_Buffer.Data_Byte_6 = WT901_RX_Buffer[8];
 8001098:	4b91      	ldr	r3, [pc, #580]	@ (80012e0 <WT901_Update_Message+0x288>)
 800109a:	7a1b      	ldrb	r3, [r3, #8]
 800109c:	723b      	strb	r3, [r7, #8]
	Receive_Message_Temporary_Buffer.Data_Byte_7 = WT901_RX_Buffer[9];
 800109e:	4b90      	ldr	r3, [pc, #576]	@ (80012e0 <WT901_Update_Message+0x288>)
 80010a0:	7a5b      	ldrb	r3, [r3, #9]
 80010a2:	727b      	strb	r3, [r7, #9]
	Receive_Message_Temporary_Buffer.Checksum = WT901_RX_Buffer[10];
 80010a4:	4b8e      	ldr	r3, [pc, #568]	@ (80012e0 <WT901_Update_Message+0x288>)
 80010a6:	7a9b      	ldrb	r3, [r3, #10]
 80010a8:	72bb      	strb	r3, [r7, #10]


	uint16_t Receive_Message_Validate = Receive_Message_Temporary_Buffer.First_Byte_Receive \
 80010aa:	783b      	ldrb	r3, [r7, #0]
 80010ac:	461a      	mov	r2, r3
									  + Receive_Message_Temporary_Buffer.Message_Address_Receive \
 80010ae:	787b      	ldrb	r3, [r7, #1]
 80010b0:	4413      	add	r3, r2
 80010b2:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_0 \
 80010b4:	78ba      	ldrb	r2, [r7, #2]
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_1 \
 80010ba:	78fa      	ldrb	r2, [r7, #3]
 80010bc:	4413      	add	r3, r2
 80010be:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_2 \
 80010c0:	793a      	ldrb	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_3 \
 80010c6:	797a      	ldrb	r2, [r7, #5]
 80010c8:	4413      	add	r3, r2
 80010ca:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_4 \
 80010cc:	79ba      	ldrb	r2, [r7, #6]
 80010ce:	4413      	add	r3, r2
 80010d0:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_5 \
 80010d2:	79fa      	ldrb	r2, [r7, #7]
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_6 \
 80010d8:	7a3a      	ldrb	r2, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
									  + Receive_Message_Temporary_Buffer.Data_Byte_7;
 80010de:	7a7a      	ldrb	r2, [r7, #9]
	uint16_t Receive_Message_Validate = Receive_Message_Temporary_Buffer.First_Byte_Receive \
 80010e0:	4413      	add	r3, r2
 80010e2:	81fb      	strh	r3, [r7, #14]


	Receive_Message_Addr_e Receive_Message_Addr = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	737b      	strb	r3, [r7, #13]


	if(Receive_Message_Temporary_Buffer.First_Byte_Receive == First_Byte_Receive_Data_Pack && \
 80010e8:	783b      	ldrb	r3, [r7, #0]
 80010ea:	2255      	movs	r2, #85	@ 0x55
 80010ec:	4293      	cmp	r3, r2
 80010ee:	f040 84ff 	bne.w	8001af0 <WT901_Update_Message+0xa98>
	  (Receive_Message_Validate & Receive_Message_Temporary_Buffer.Checksum) == Receive_Message_Temporary_Buffer.Checksum){
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	7aba      	ldrb	r2, [r7, #10]
 80010f6:	4013      	ands	r3, r2
 80010f8:	7aba      	ldrb	r2, [r7, #10]
	if(Receive_Message_Temporary_Buffer.First_Byte_Receive == First_Byte_Receive_Data_Pack && \
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f040 84f8 	bne.w	8001af0 <WT901_Update_Message+0xa98>
		switch (Receive_Message_Addr) {
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	3b50      	subs	r3, #80	@ 0x50
 8001104:	2b0a      	cmp	r3, #10
 8001106:	f200 84f4 	bhi.w	8001af2 <WT901_Update_Message+0xa9a>
 800110a:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <WT901_Update_Message+0xb8>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	0800113d 	.word	0x0800113d
 8001114:	0800119b 	.word	0x0800119b
 8001118:	080012f1 	.word	0x080012f1
 800111c:	08001401 	.word	0x08001401
 8001120:	08001525 	.word	0x08001525
 8001124:	080015fd 	.word	0x080015fd
 8001128:	080016cf 	.word	0x080016cf
 800112c:	08001789 	.word	0x08001789
 8001130:	0800183b 	.word	0x0800183b
 8001134:	08001915 	.word	0x08001915
 8001138:	08001a0d 	.word	0x08001a0d
		  case Time:
			  WT901_Out_msg.Time.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 800113c:	783a      	ldrb	r2, [r7, #0]
 800113e:	4b6a      	ldr	r3, [pc, #424]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001140:	701a      	strb	r2, [r3, #0]
			  WT901_Out_msg.Time.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001142:	787a      	ldrb	r2, [r7, #1]
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001146:	705a      	strb	r2, [r3, #1]
			  WT901_Out_msg.Time.Registers.YY 		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001148:	78ba      	ldrb	r2, [r7, #2]
 800114a:	4b67      	ldr	r3, [pc, #412]	@ (80012e8 <WT901_Update_Message+0x290>)
 800114c:	709a      	strb	r2, [r3, #2]
			  WT901_Out_msg.Time.Registers.MM 		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	4b65      	ldr	r3, [pc, #404]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001152:	70da      	strb	r2, [r3, #3]
			  WT901_Out_msg.Time.Registers.DD 		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8001154:	793a      	ldrb	r2, [r7, #4]
 8001156:	4b64      	ldr	r3, [pc, #400]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001158:	711a      	strb	r2, [r3, #4]
			  WT901_Out_msg.Time.Registers.hh 		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 800115a:	797a      	ldrb	r2, [r7, #5]
 800115c:	4b62      	ldr	r3, [pc, #392]	@ (80012e8 <WT901_Update_Message+0x290>)
 800115e:	715a      	strb	r2, [r3, #5]
			  WT901_Out_msg.Time.Registers.mm 		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8001160:	79ba      	ldrb	r2, [r7, #6]
 8001162:	4b61      	ldr	r3, [pc, #388]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001164:	719a      	strb	r2, [r3, #6]
			  WT901_Out_msg.Time.Registers.ss 		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4b5f      	ldr	r3, [pc, #380]	@ (80012e8 <WT901_Update_Message+0x290>)
 800116a:	71da      	strb	r2, [r3, #7]
			  WT901_Out_msg.Time.Registers.msL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 800116c:	7a3a      	ldrb	r2, [r7, #8]
 800116e:	4b5e      	ldr	r3, [pc, #376]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001170:	721a      	strb	r2, [r3, #8]
			  WT901_Out_msg.Time.Registers.msH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001172:	7a7a      	ldrb	r2, [r7, #9]
 8001174:	4b5c      	ldr	r3, [pc, #368]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001176:	725a      	strb	r2, [r3, #9]
			  WT901_Out_msg.Time.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8001178:	7aba      	ldrb	r2, [r7, #10]
 800117a:	4b5b      	ldr	r3, [pc, #364]	@ (80012e8 <WT901_Update_Message+0x290>)
 800117c:	729a      	strb	r2, [r3, #10]

			  WT901_Out_msg.Time.Millisecond = ((WT901_Out_msg.Time.Registers.msH << 8) | WT901_Out_msg.Time.Registers.msL);
 800117e:	4b5a      	ldr	r3, [pc, #360]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001180:	7a5b      	ldrb	r3, [r3, #9]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21b      	sxth	r3, r3
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b55      	ldr	r3, [pc, #340]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001194:	829a      	strh	r2, [r3, #20]
			break;
 8001196:	f000 bcac 	b.w	8001af2 <WT901_Update_Message+0xa9a>

		  case Acceleration:
				WT901_Out_msg.Acceleration.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 800119a:	783a      	ldrb	r2, [r7, #0]
 800119c:	4b52      	ldr	r3, [pc, #328]	@ (80012e8 <WT901_Update_Message+0x290>)
 800119e:	771a      	strb	r2, [r3, #28]
				WT901_Out_msg.Acceleration.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80011a0:	787a      	ldrb	r2, [r7, #1]
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011a4:	775a      	strb	r2, [r3, #29]
				WT901_Out_msg.Acceleration.Registers.AxL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 80011a6:	78ba      	ldrb	r2, [r7, #2]
 80011a8:	4b4f      	ldr	r3, [pc, #316]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011aa:	779a      	strb	r2, [r3, #30]
				WT901_Out_msg.Acceleration.Registers.AxH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 80011ac:	78fa      	ldrb	r2, [r7, #3]
 80011ae:	4b4e      	ldr	r3, [pc, #312]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011b0:	77da      	strb	r2, [r3, #31]
				WT901_Out_msg.Acceleration.Registers.AyL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 80011b2:	793a      	ldrb	r2, [r7, #4]
 80011b4:	4b4c      	ldr	r3, [pc, #304]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]
				WT901_Out_msg.Acceleration.Registers.AyH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 80011ba:	797a      	ldrb	r2, [r7, #5]
 80011bc:	4b4a      	ldr	r3, [pc, #296]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				WT901_Out_msg.Acceleration.Registers.AzL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 80011c2:	79ba      	ldrb	r2, [r7, #6]
 80011c4:	4b48      	ldr	r3, [pc, #288]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
				WT901_Out_msg.Acceleration.Registers.AzH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	4b46      	ldr	r3, [pc, #280]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011ce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
				WT901_Out_msg.Acceleration.Registers.TL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 80011d2:	7a3a      	ldrb	r2, [r7, #8]
 80011d4:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				WT901_Out_msg.Acceleration.Registers.TH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 80011da:	7a7a      	ldrb	r2, [r7, #9]
 80011dc:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				WT901_Out_msg.Acceleration.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 80011e2:	7aba      	ldrb	r2, [r7, #10]
 80011e4:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

				WT901_Out_msg.Acceleration.X_Acceleration = ((WT901_Out_msg.Acceleration.Registers.AxH << 8) | WT901_Out_msg.Acceleration.Registers.AxL) / 32768 * 16 * 9.8;
 80011ea:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011ec:	7fdb      	ldrb	r3, [r3, #31]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	4a3d      	ldr	r2, [pc, #244]	@ (80012e8 <WT901_Update_Message+0x290>)
 80011f2:	7f92      	ldrb	r2, [r2, #30]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da02      	bge.n	8001200 <WT901_Update_Message+0x1a8>
 80011fa:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80011fe:	337f      	adds	r3, #127	@ 0x7f
 8001200:	13db      	asrs	r3, r3, #15
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fa5b 	bl	80006c0 <__aeabi_i2d>
 800120a:	a333      	add	r3, pc, #204	@ (adr r3, 80012d8 <WT901_Update_Message+0x280>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7fe ffda 	bl	80001c8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff faba 	bl	8000794 <__aeabi_d2uiz>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001226:	851a      	strh	r2, [r3, #40]	@ 0x28
				WT901_Out_msg.Acceleration.Y_Acceleration = ((WT901_Out_msg.Acceleration.Registers.AyH << 8) | WT901_Out_msg.Acceleration.Registers.AyL) / 32768 * 16 * 9.8;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <WT901_Update_Message+0x290>)
 800122a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001232:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001236:	4313      	orrs	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	da02      	bge.n	8001242 <WT901_Update_Message+0x1ea>
 800123c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001240:	337f      	adds	r3, #127	@ 0x7f
 8001242:	13db      	asrs	r3, r3, #15
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fa3a 	bl	80006c0 <__aeabi_i2d>
 800124c:	a322      	add	r3, pc, #136	@ (adr r3, 80012d8 <WT901_Update_Message+0x280>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7fe ffb9 	bl	80001c8 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fa99 	bl	8000794 <__aeabi_d2uiz>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001268:	855a      	strh	r2, [r3, #42]	@ 0x2a
				WT901_Out_msg.Acceleration.Z_Acceleration = ((WT901_Out_msg.Acceleration.Registers.AzH << 8) | WT901_Out_msg.Acceleration.Registers.AzL) / 32768 * 16 * 9.8;
 800126a:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <WT901_Update_Message+0x290>)
 800126c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	4a1d      	ldr	r2, [pc, #116]	@ (80012e8 <WT901_Update_Message+0x290>)
 8001274:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8001278:	4313      	orrs	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	da02      	bge.n	8001284 <WT901_Update_Message+0x22c>
 800127e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001282:	337f      	adds	r3, #127	@ 0x7f
 8001284:	13db      	asrs	r3, r3, #15
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa19 	bl	80006c0 <__aeabi_i2d>
 800128e:	a312      	add	r3, pc, #72	@ (adr r3, 80012d8 <WT901_Update_Message+0x280>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7fe ff98 	bl	80001c8 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fa78 	bl	8000794 <__aeabi_d2uiz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <WT901_Update_Message+0x290>)
 80012aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
				WT901_Out_msg.Acceleration.Temperature = ((WT901_Out_msg.Acceleration.Registers.TH << 8) | WT901_Out_msg.Acceleration.Registers.TL) / 100;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <WT901_Update_Message+0x290>)
 80012ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <WT901_Update_Message+0x290>)
 80012b6:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80012ba:	4313      	orrs	r3, r2
 80012bc:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <WT901_Update_Message+0x294>)
 80012be:	fb82 1203 	smull	r1, r2, r2, r3
 80012c2:	1152      	asrs	r2, r2, #5
 80012c4:	17db      	asrs	r3, r3, #31
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <WT901_Update_Message+0x290>)
 80012cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
			break;
 80012ce:	f000 bc10 	b.w	8001af2 <WT901_Update_Message+0xa9a>
 80012d2:	bf00      	nop
 80012d4:	f3af 8000 	nop.w
 80012d8:	9999999a 	.word	0x9999999a
 80012dc:	40239999 	.word	0x40239999
 80012e0:	200002e0 	.word	0x200002e0
 80012e4:	200000d8 	.word	0x200000d8
 80012e8:	200002ec 	.word	0x200002ec
 80012ec:	51eb851f 	.word	0x51eb851f

		  case Angular_Velocity:
			  WT901_Out_msg.Angular_Velocity.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 80012f0:	783a      	ldrb	r2, [r7, #0]
 80012f2:	4b8a      	ldr	r3, [pc, #552]	@ (800151c <WT901_Update_Message+0x4c4>)
 80012f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			  WT901_Out_msg.Angular_Velocity.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80012f8:	787a      	ldrb	r2, [r7, #1]
 80012fa:	4b88      	ldr	r3, [pc, #544]	@ (800151c <WT901_Update_Message+0x4c4>)
 80012fc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			  WT901_Out_msg.Angular_Velocity.Registers.WxL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001300:	78ba      	ldrb	r2, [r7, #2]
 8001302:	4b86      	ldr	r3, [pc, #536]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001304:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			  WT901_Out_msg.Angular_Velocity.Registers.WxH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	4b84      	ldr	r3, [pc, #528]	@ (800151c <WT901_Update_Message+0x4c4>)
 800130c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
			  WT901_Out_msg.Angular_Velocity.Registers.WyL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8001310:	793a      	ldrb	r2, [r7, #4]
 8001312:	4b82      	ldr	r3, [pc, #520]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			  WT901_Out_msg.Angular_Velocity.Registers.WyH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001318:	797a      	ldrb	r2, [r7, #5]
 800131a:	4b80      	ldr	r3, [pc, #512]	@ (800151c <WT901_Update_Message+0x4c4>)
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
			  WT901_Out_msg.Angular_Velocity.Registers.WzL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8001320:	79ba      	ldrb	r2, [r7, #6]
 8001322:	4b7e      	ldr	r3, [pc, #504]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001324:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
			  WT901_Out_msg.Angular_Velocity.Registers.WzH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	4b7c      	ldr	r3, [pc, #496]	@ (800151c <WT901_Update_Message+0x4c4>)
 800132c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
			  WT901_Out_msg.Angular_Velocity.Registers.TL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8001330:	7a3a      	ldrb	r2, [r7, #8]
 8001332:	4b7a      	ldr	r3, [pc, #488]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001334:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			  WT901_Out_msg.Angular_Velocity.Registers.TH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001338:	7a7a      	ldrb	r2, [r7, #9]
 800133a:	4b78      	ldr	r3, [pc, #480]	@ (800151c <WT901_Update_Message+0x4c4>)
 800133c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			  WT901_Out_msg.Angular_Velocity.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8001340:	7aba      	ldrb	r2, [r7, #10]
 8001342:	4b76      	ldr	r3, [pc, #472]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001344:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

			  WT901_Out_msg.Angular_Velocity.X_Angular_Velocity = ((WT901_Out_msg.Angular_Velocity.Registers.WxH << 8) | WT901_Out_msg.Angular_Velocity.Registers.WxL) / 32768 * 2000;
 8001348:	4b74      	ldr	r3, [pc, #464]	@ (800151c <WT901_Update_Message+0x4c4>)
 800134a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	4a72      	ldr	r2, [pc, #456]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001352:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001356:	4313      	orrs	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	da02      	bge.n	8001362 <WT901_Update_Message+0x30a>
 800135c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001360:	337f      	adds	r3, #127	@ 0x7f
 8001362:	13db      	asrs	r3, r3, #15
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	0152      	lsls	r2, r2, #5
 800136a:	1ad2      	subs	r2, r2, r3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4413      	add	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b69      	ldr	r3, [pc, #420]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001376:	879a      	strh	r2, [r3, #60]	@ 0x3c
			  WT901_Out_msg.Angular_Velocity.Y_Angular_Velocity = ((WT901_Out_msg.Angular_Velocity.Registers.WyH << 8) | WT901_Out_msg.Angular_Velocity.Registers.WyL) / 32768 * 2000;
 8001378:	4b68      	ldr	r3, [pc, #416]	@ (800151c <WT901_Update_Message+0x4c4>)
 800137a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4a66      	ldr	r2, [pc, #408]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001382:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8001386:	4313      	orrs	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	da02      	bge.n	8001392 <WT901_Update_Message+0x33a>
 800138c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001390:	337f      	adds	r3, #127	@ 0x7f
 8001392:	13db      	asrs	r3, r3, #15
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	0152      	lsls	r2, r2, #5
 800139a:	1ad2      	subs	r2, r2, r3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4413      	add	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b5d      	ldr	r3, [pc, #372]	@ (800151c <WT901_Update_Message+0x4c4>)
 80013a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
			  WT901_Out_msg.Angular_Velocity.Z_Angular_Velocity = ((WT901_Out_msg.Angular_Velocity.Registers.WzH << 8) | WT901_Out_msg.Angular_Velocity.Registers.WzL) / 32768 * 2000;
 80013a8:	4b5c      	ldr	r3, [pc, #368]	@ (800151c <WT901_Update_Message+0x4c4>)
 80013aa:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	4a5a      	ldr	r2, [pc, #360]	@ (800151c <WT901_Update_Message+0x4c4>)
 80013b2:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80013b6:	4313      	orrs	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da02      	bge.n	80013c2 <WT901_Update_Message+0x36a>
 80013bc:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80013c0:	337f      	adds	r3, #127	@ 0x7f
 80013c2:	13db      	asrs	r3, r3, #15
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	0152      	lsls	r2, r2, #5
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b51      	ldr	r3, [pc, #324]	@ (800151c <WT901_Update_Message+0x4c4>)
 80013d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			  WT901_Out_msg.Angular_Velocity.Temperature = ((WT901_Out_msg.Angular_Velocity.Registers.TH << 8) | WT901_Out_msg.Angular_Velocity.Registers.TL) / 100;
 80013da:	4b50      	ldr	r3, [pc, #320]	@ (800151c <WT901_Update_Message+0x4c4>)
 80013dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4a4e      	ldr	r2, [pc, #312]	@ (800151c <WT901_Update_Message+0x4c4>)
 80013e4:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 80013e8:	4313      	orrs	r3, r2
 80013ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001520 <WT901_Update_Message+0x4c8>)
 80013ec:	fb82 1203 	smull	r1, r2, r2, r3
 80013f0:	1152      	asrs	r2, r2, #5
 80013f2:	17db      	asrs	r3, r3, #31
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b48      	ldr	r3, [pc, #288]	@ (800151c <WT901_Update_Message+0x4c4>)
 80013fa:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
			break;
 80013fe:	e378      	b.n	8001af2 <WT901_Update_Message+0xa9a>

		  case Angle:
			  WT901_Out_msg.Angle.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8001400:	783a      	ldrb	r2, [r7, #0]
 8001402:	4b46      	ldr	r3, [pc, #280]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			  WT901_Out_msg.Angle.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001408:	787a      	ldrb	r2, [r7, #1]
 800140a:	4b44      	ldr	r3, [pc, #272]	@ (800151c <WT901_Update_Message+0x4c4>)
 800140c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			  WT901_Out_msg.Angle.Registers.RollL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001410:	78ba      	ldrb	r2, [r7, #2]
 8001412:	4b42      	ldr	r3, [pc, #264]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001414:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			  WT901_Out_msg.Angle.Registers.RollH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	4b40      	ldr	r3, [pc, #256]	@ (800151c <WT901_Update_Message+0x4c4>)
 800141c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			  WT901_Out_msg.Angle.Registers.PitchL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8001420:	793a      	ldrb	r2, [r7, #4]
 8001422:	4b3e      	ldr	r3, [pc, #248]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			  WT901_Out_msg.Angle.Registers.PitchH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001428:	797a      	ldrb	r2, [r7, #5]
 800142a:	4b3c      	ldr	r3, [pc, #240]	@ (800151c <WT901_Update_Message+0x4c4>)
 800142c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
			  WT901_Out_msg.Angle.Registers.YawL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8001430:	79ba      	ldrb	r2, [r7, #6]
 8001432:	4b3a      	ldr	r3, [pc, #232]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001434:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
			  WT901_Out_msg.Angle.Registers.YawH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	4b38      	ldr	r3, [pc, #224]	@ (800151c <WT901_Update_Message+0x4c4>)
 800143c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
			  WT901_Out_msg.Angle.Registers.TL 		 	 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8001440:	7a3a      	ldrb	r2, [r7, #8]
 8001442:	4b36      	ldr	r3, [pc, #216]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001444:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			  WT901_Out_msg.Angle.Registers.TH 		 	 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001448:	7a7a      	ldrb	r2, [r7, #9]
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <WT901_Update_Message+0x4c4>)
 800144c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			  WT901_Out_msg.Angle.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8001450:	7aba      	ldrb	r2, [r7, #10]
 8001452:	4b32      	ldr	r3, [pc, #200]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001454:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

			  WT901_Out_msg.Angle.Roll 	= ((WT901_Out_msg.Angle.Registers.RollH << 8)  | WT901_Out_msg.Angle.Registers.RollL)  / 32768 * 180;
 8001458:	4b30      	ldr	r3, [pc, #192]	@ (800151c <WT901_Update_Message+0x4c4>)
 800145a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	4a2e      	ldr	r2, [pc, #184]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001462:	f892 2046 	ldrb.w	r2, [r2, #70]	@ 0x46
 8001466:	4313      	orrs	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	da02      	bge.n	8001472 <WT901_Update_Message+0x41a>
 800146c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001470:	337f      	adds	r3, #127	@ 0x7f
 8001472:	13db      	asrs	r3, r3, #15
 8001474:	b29b      	uxth	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	0052      	lsls	r2, r2, #1
 800147a:	4413      	add	r3, r2
 800147c:	461a      	mov	r2, r3
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	b29a      	uxth	r2, r3
 8001486:	4b25      	ldr	r3, [pc, #148]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001488:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			  WT901_Out_msg.Angle.Pitch = ((WT901_Out_msg.Angle.Registers.PitchH << 8) | WT901_Out_msg.Angle.Registers.PitchL) / 32768 * 180;
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <WT901_Update_Message+0x4c4>)
 800148e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001496:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800149a:	4313      	orrs	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	da02      	bge.n	80014a6 <WT901_Update_Message+0x44e>
 80014a0:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80014a4:	337f      	adds	r3, #127	@ 0x7f
 80014a6:	13db      	asrs	r3, r3, #15
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	0052      	lsls	r2, r2, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <WT901_Update_Message+0x4c4>)
 80014bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			  WT901_Out_msg.Angle.Yaw 	= ((WT901_Out_msg.Angle.Registers.YawH << 8)   | WT901_Out_msg.Angle.Registers.YawL)   / 32768 * 180;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <WT901_Update_Message+0x4c4>)
 80014c2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	4a14      	ldr	r2, [pc, #80]	@ (800151c <WT901_Update_Message+0x4c4>)
 80014ca:	f892 204a 	ldrb.w	r2, [r2, #74]	@ 0x4a
 80014ce:	4313      	orrs	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da02      	bge.n	80014da <WT901_Update_Message+0x482>
 80014d4:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80014d8:	337f      	adds	r3, #127	@ 0x7f
 80014da:	13db      	asrs	r3, r3, #15
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	0052      	lsls	r2, r2, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <WT901_Update_Message+0x4c4>)
 80014f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			  WT901_Out_msg.Angle.Temperature = ((WT901_Out_msg.Angle.Registers.TH << 8) | WT901_Out_msg.Angle.Registers.TL) / 100;
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <WT901_Update_Message+0x4c4>)
 80014f6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	4a07      	ldr	r2, [pc, #28]	@ (800151c <WT901_Update_Message+0x4c4>)
 80014fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001502:	4313      	orrs	r3, r2
 8001504:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <WT901_Update_Message+0x4c8>)
 8001506:	fb82 1203 	smull	r1, r2, r2, r3
 800150a:	1152      	asrs	r2, r2, #5
 800150c:	17db      	asrs	r3, r3, #31
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b02      	ldr	r3, [pc, #8]	@ (800151c <WT901_Update_Message+0x4c4>)
 8001514:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			break;
 8001518:	e2eb      	b.n	8001af2 <WT901_Update_Message+0xa9a>
 800151a:	bf00      	nop
 800151c:	200002ec 	.word	0x200002ec
 8001520:	51eb851f 	.word	0x51eb851f

		  case Magnetic:
			  WT901_Out_msg.Magnetic.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8001524:	783a      	ldrb	r2, [r7, #0]
 8001526:	4b96      	ldr	r3, [pc, #600]	@ (8001780 <WT901_Update_Message+0x728>)
 8001528:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			  WT901_Out_msg.Magnetic.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 800152c:	787a      	ldrb	r2, [r7, #1]
 800152e:	4b94      	ldr	r3, [pc, #592]	@ (8001780 <WT901_Update_Message+0x728>)
 8001530:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			  WT901_Out_msg.Magnetic.Registers.HxL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001534:	78ba      	ldrb	r2, [r7, #2]
 8001536:	4b92      	ldr	r3, [pc, #584]	@ (8001780 <WT901_Update_Message+0x728>)
 8001538:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			  WT901_Out_msg.Magnetic.Registers.HxH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	4b90      	ldr	r3, [pc, #576]	@ (8001780 <WT901_Update_Message+0x728>)
 8001540:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
			  WT901_Out_msg.Magnetic.Registers.HyL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8001544:	793a      	ldrb	r2, [r7, #4]
 8001546:	4b8e      	ldr	r3, [pc, #568]	@ (8001780 <WT901_Update_Message+0x728>)
 8001548:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			  WT901_Out_msg.Magnetic.Registers.HyH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 800154c:	797a      	ldrb	r2, [r7, #5]
 800154e:	4b8c      	ldr	r3, [pc, #560]	@ (8001780 <WT901_Update_Message+0x728>)
 8001550:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			  WT901_Out_msg.Magnetic.Registers.HzL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8001554:	79ba      	ldrb	r2, [r7, #6]
 8001556:	4b8a      	ldr	r3, [pc, #552]	@ (8001780 <WT901_Update_Message+0x728>)
 8001558:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			  WT901_Out_msg.Magnetic.Registers.HzH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	4b88      	ldr	r3, [pc, #544]	@ (8001780 <WT901_Update_Message+0x728>)
 8001560:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
			  WT901_Out_msg.Magnetic.Registers.TL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8001564:	7a3a      	ldrb	r2, [r7, #8]
 8001566:	4b86      	ldr	r3, [pc, #536]	@ (8001780 <WT901_Update_Message+0x728>)
 8001568:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			  WT901_Out_msg.Magnetic.Registers.TH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 800156c:	7a7a      	ldrb	r2, [r7, #9]
 800156e:	4b84      	ldr	r3, [pc, #528]	@ (8001780 <WT901_Update_Message+0x728>)
 8001570:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			  WT901_Out_msg.Magnetic.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8001574:	7aba      	ldrb	r2, [r7, #10]
 8001576:	4b82      	ldr	r3, [pc, #520]	@ (8001780 <WT901_Update_Message+0x728>)
 8001578:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

			  WT901_Out_msg.Magnetic.X_Magnetic = ((WT901_Out_msg.Magnetic.Registers.HxH << 8) | WT901_Out_msg.Magnetic.Registers.HxL);
 800157c:	4b80      	ldr	r3, [pc, #512]	@ (8001780 <WT901_Update_Message+0x728>)
 800157e:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b7e      	ldr	r3, [pc, #504]	@ (8001780 <WT901_Update_Message+0x728>)
 8001588:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21b      	sxth	r3, r3
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b7a      	ldr	r3, [pc, #488]	@ (8001780 <WT901_Update_Message+0x728>)
 8001596:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
			  WT901_Out_msg.Magnetic.Y_Magnetic = ((WT901_Out_msg.Magnetic.Registers.HyH << 8) | WT901_Out_msg.Magnetic.Registers.HyL);
 800159a:	4b79      	ldr	r3, [pc, #484]	@ (8001780 <WT901_Update_Message+0x728>)
 800159c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b76      	ldr	r3, [pc, #472]	@ (8001780 <WT901_Update_Message+0x728>)
 80015a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b73      	ldr	r3, [pc, #460]	@ (8001780 <WT901_Update_Message+0x728>)
 80015b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
			  WT901_Out_msg.Magnetic.Z_Magnetic = ((WT901_Out_msg.Magnetic.Registers.HzH << 8) | WT901_Out_msg.Magnetic.Registers.HzL);
 80015b8:	4b71      	ldr	r3, [pc, #452]	@ (8001780 <WT901_Update_Message+0x728>)
 80015ba:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <WT901_Update_Message+0x728>)
 80015c4:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001780 <WT901_Update_Message+0x728>)
 80015d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
			  WT901_Out_msg.Magnetic.Temperature = ((WT901_Out_msg.Magnetic.Registers.TH << 8) | WT901_Out_msg.Magnetic.Registers.TL) / 100;
 80015d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <WT901_Update_Message+0x728>)
 80015d8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	4a68      	ldr	r2, [pc, #416]	@ (8001780 <WT901_Update_Message+0x728>)
 80015e0:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80015e4:	4313      	orrs	r3, r2
 80015e6:	4a67      	ldr	r2, [pc, #412]	@ (8001784 <WT901_Update_Message+0x72c>)
 80015e8:	fb82 1203 	smull	r1, r2, r2, r3
 80015ec:	1152      	asrs	r2, r2, #5
 80015ee:	17db      	asrs	r3, r3, #31
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b62      	ldr	r3, [pc, #392]	@ (8001780 <WT901_Update_Message+0x728>)
 80015f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
			break;
 80015fa:	e27a      	b.n	8001af2 <WT901_Update_Message+0xa9a>

		  case Data_Port_Status:
			  WT901_Out_msg.Data_Port_Status.Registers.Msg_Begin = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 80015fc:	783a      	ldrb	r2, [r7, #0]
 80015fe:	4b60      	ldr	r3, [pc, #384]	@ (8001780 <WT901_Update_Message+0x728>)
 8001600:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
			  WT901_Out_msg.Data_Port_Status.Registers.Msg_Addr  = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001604:	787a      	ldrb	r2, [r7, #1]
 8001606:	4b5e      	ldr	r3, [pc, #376]	@ (8001780 <WT901_Update_Message+0x728>)
 8001608:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
			  WT901_Out_msg.Data_Port_Status.Registers.D0L		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 800160c:	78ba      	ldrb	r2, [r7, #2]
 800160e:	4b5c      	ldr	r3, [pc, #368]	@ (8001780 <WT901_Update_Message+0x728>)
 8001610:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
			  WT901_Out_msg.Data_Port_Status.Registers.D0H		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <WT901_Update_Message+0x728>)
 8001618:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
			  WT901_Out_msg.Data_Port_Status.Registers.D1L		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 800161c:	793a      	ldrb	r2, [r7, #4]
 800161e:	4b58      	ldr	r3, [pc, #352]	@ (8001780 <WT901_Update_Message+0x728>)
 8001620:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
			  WT901_Out_msg.Data_Port_Status.Registers.D1H		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001624:	797a      	ldrb	r2, [r7, #5]
 8001626:	4b56      	ldr	r3, [pc, #344]	@ (8001780 <WT901_Update_Message+0x728>)
 8001628:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
			  WT901_Out_msg.Data_Port_Status.Registers.D2L		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 800162c:	79ba      	ldrb	r2, [r7, #6]
 800162e:	4b54      	ldr	r3, [pc, #336]	@ (8001780 <WT901_Update_Message+0x728>)
 8001630:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
			  WT901_Out_msg.Data_Port_Status.Registers.D2H		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4b52      	ldr	r3, [pc, #328]	@ (8001780 <WT901_Update_Message+0x728>)
 8001638:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
			  WT901_Out_msg.Data_Port_Status.Registers.D3L 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 800163c:	7a3a      	ldrb	r2, [r7, #8]
 800163e:	4b50      	ldr	r3, [pc, #320]	@ (8001780 <WT901_Update_Message+0x728>)
 8001640:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
			  WT901_Out_msg.Data_Port_Status.Registers.D3H 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001644:	7a7a      	ldrb	r2, [r7, #9]
 8001646:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <WT901_Update_Message+0x728>)
 8001648:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
			  WT901_Out_msg.Data_Port_Status.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 800164c:	7aba      	ldrb	r2, [r7, #10]
 800164e:	4b4c      	ldr	r3, [pc, #304]	@ (8001780 <WT901_Update_Message+0x728>)
 8001650:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

			  WT901_Out_msg.Data_Port_Status.Port_0 = (WT901_Out_msg.Data_Port_Status.Registers.D0H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D0L;
 8001654:	4b4a      	ldr	r3, [pc, #296]	@ (8001780 <WT901_Update_Message+0x728>)
 8001656:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b48      	ldr	r3, [pc, #288]	@ (8001780 <WT901_Update_Message+0x728>)
 8001660:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b44      	ldr	r3, [pc, #272]	@ (8001780 <WT901_Update_Message+0x728>)
 800166e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
			  WT901_Out_msg.Data_Port_Status.Port_1 = (WT901_Out_msg.Data_Port_Status.Registers.D1H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D1L;
 8001672:	4b43      	ldr	r3, [pc, #268]	@ (8001780 <WT901_Update_Message+0x728>)
 8001674:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	b21a      	sxth	r2, r3
 800167c:	4b40      	ldr	r3, [pc, #256]	@ (8001780 <WT901_Update_Message+0x728>)
 800167e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21b      	sxth	r3, r3
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b3d      	ldr	r3, [pc, #244]	@ (8001780 <WT901_Update_Message+0x728>)
 800168c:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
			  WT901_Out_msg.Data_Port_Status.Port_2 = (WT901_Out_msg.Data_Port_Status.Registers.D2H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D2L;
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <WT901_Update_Message+0x728>)
 8001692:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <WT901_Update_Message+0x728>)
 800169c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <WT901_Update_Message+0x728>)
 80016aa:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
			  WT901_Out_msg.Data_Port_Status.Port_3 = (WT901_Out_msg.Data_Port_Status.Registers.D3H << 8) | WT901_Out_msg.Data_Port_Status.Registers.D3L;
 80016ae:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <WT901_Update_Message+0x728>)
 80016b0:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <WT901_Update_Message+0x728>)
 80016ba:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <WT901_Update_Message+0x728>)
 80016c8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
			break;
 80016cc:	e211      	b.n	8001af2 <WT901_Update_Message+0xa9a>

		  case Atmospheric_Pressure_Height:
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.Msg_Begin  = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 80016ce:	783a      	ldrb	r2, [r7, #0]
 80016d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <WT901_Update_Message+0x728>)
 80016d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.Msg_Addr   = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 80016d6:	787a      	ldrb	r2, [r7, #1]
 80016d8:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <WT901_Update_Message+0x728>)
 80016da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P0		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 80016de:	78ba      	ldrb	r2, [r7, #2]
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <WT901_Update_Message+0x728>)
 80016e2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P1		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	4b25      	ldr	r3, [pc, #148]	@ (8001780 <WT901_Update_Message+0x728>)
 80016ea:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P2		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 80016ee:	793a      	ldrb	r2, [r7, #4]
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <WT901_Update_Message+0x728>)
 80016f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 80016f6:	797a      	ldrb	r2, [r7, #5]
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <WT901_Update_Message+0x728>)
 80016fa:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H0		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 80016fe:	79ba      	ldrb	r2, [r7, #6]
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <WT901_Update_Message+0x728>)
 8001702:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H1		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <WT901_Update_Message+0x728>)
 800170a:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H2 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 800170e:	7a3a      	ldrb	r2, [r7, #8]
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <WT901_Update_Message+0x728>)
 8001712:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001716:	7a7a      	ldrb	r2, [r7, #9]
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <WT901_Update_Message+0x728>)
 800171a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
			  WT901_Out_msg.Atmospheric_Pressure_Height.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 800171e:	7aba      	ldrb	r2, [r7, #10]
 8001720:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <WT901_Update_Message+0x728>)
 8001722:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a

			  WT901_Out_msg.Atmospheric_Pressure_Height.Atmospheric_Pressure = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3 << 24) | \
 8001726:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <WT901_Update_Message+0x728>)
 8001728:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800172c:	061a      	lsls	r2, r3, #24
			  			  			  					  	  	  	   	   	    (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P2 << 16) | \
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <WT901_Update_Message+0x728>)
 8001730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8001734:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Atmospheric_Pressure_Height.Atmospheric_Pressure = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3 << 24) | \
 8001736:	431a      	orrs	r2, r3
																				(WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P1 << 8)  | \
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <WT901_Update_Message+0x728>)
 800173a:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 800173e:	021b      	lsls	r3, r3, #8
			  			  			  					  	  	  	   	   	    (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P2 << 16) | \
 8001740:	4313      	orrs	r3, r2
																				 WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P0);
 8001742:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <WT901_Update_Message+0x728>)
 8001744:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
																				(WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P1 << 8)  | \
 8001748:	4313      	orrs	r3, r2
 800174a:	461a      	mov	r2, r3
			  WT901_Out_msg.Atmospheric_Pressure_Height.Atmospheric_Pressure = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.P3 << 24) | \
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <WT901_Update_Message+0x728>)
 800174e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

			  WT901_Out_msg.Atmospheric_Pressure_Height.Height = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 << 24) | \
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <WT901_Update_Message+0x728>)
 8001754:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8001758:	061a      	lsls	r2, r3, #24
			  			  			  			  				  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H2 << 16) | \
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <WT901_Update_Message+0x728>)
 800175c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001760:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Atmospheric_Pressure_Height.Height = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 << 24) | \
 8001762:	431a      	orrs	r2, r3
			  													  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H1 << 8)  | \
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <WT901_Update_Message+0x728>)
 8001766:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800176a:	021b      	lsls	r3, r3, #8
			  			  			  			  				  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H2 << 16) | \
 800176c:	4313      	orrs	r3, r2
			  													   WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H0);
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <WT901_Update_Message+0x728>)
 8001770:	f892 2086 	ldrb.w	r2, [r2, #134]	@ 0x86
			  													  (WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H1 << 8)  | \
 8001774:	4313      	orrs	r3, r2
 8001776:	461a      	mov	r2, r3
			  WT901_Out_msg.Atmospheric_Pressure_Height.Height = ((WT901_Out_msg.Atmospheric_Pressure_Height.Registers.H3 << 24) | \
 8001778:	4b01      	ldr	r3, [pc, #4]	@ (8001780 <WT901_Update_Message+0x728>)
 800177a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			break;
 800177e:	e1b8      	b.n	8001af2 <WT901_Update_Message+0xa9a>
 8001780:	200002ec 	.word	0x200002ec
 8001784:	51eb851f 	.word	0x51eb851f

		  case Longitude_Latitude:
			  WT901_Out_msg.Longitude_Latitude.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8001788:	783a      	ldrb	r2, [r7, #0]
 800178a:	4b9d      	ldr	r3, [pc, #628]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800178c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
			  WT901_Out_msg.Longitude_Latitude.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001790:	787a      	ldrb	r2, [r7, #1]
 8001792:	4b9b      	ldr	r3, [pc, #620]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001794:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon0		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001798:	78ba      	ldrb	r2, [r7, #2]
 800179a:	4b99      	ldr	r3, [pc, #612]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800179c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon1		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	4b97      	ldr	r3, [pc, #604]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017a4:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon2		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 80017a8:	793a      	ldrb	r2, [r7, #4]
 80017aa:	4b95      	ldr	r3, [pc, #596]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017ac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
			  WT901_Out_msg.Longitude_Latitude.Registers.Lon3		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 80017b0:	797a      	ldrb	r2, [r7, #5]
 80017b2:	4b93      	ldr	r3, [pc, #588]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017b4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat0		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 80017b8:	79ba      	ldrb	r2, [r7, #6]
 80017ba:	4b91      	ldr	r3, [pc, #580]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat1		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 80017c0:	79fa      	ldrb	r2, [r7, #7]
 80017c2:	4b8f      	ldr	r3, [pc, #572]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017c4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat2 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 80017c8:	7a3a      	ldrb	r2, [r7, #8]
 80017ca:	4b8d      	ldr	r3, [pc, #564]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017cc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  WT901_Out_msg.Longitude_Latitude.Registers.Lat3 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 80017d0:	7a7a      	ldrb	r2, [r7, #9]
 80017d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017d4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  WT901_Out_msg.Longitude_Latitude.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 80017d8:	7aba      	ldrb	r2, [r7, #10]
 80017da:	4b89      	ldr	r3, [pc, #548]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017dc:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e

			  WT901_Out_msg.Longitude_Latitude.Longitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lon3 << 24) | \
 80017e0:	4b87      	ldr	r3, [pc, #540]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80017e6:	061a      	lsls	r2, r3, #24
			  					  	  	  	  	  	  	  	(WT901_Out_msg.Longitude_Latitude.Registers.Lon2 << 16) | \
 80017e8:	4b85      	ldr	r3, [pc, #532]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017ea:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80017ee:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Longitude_Latitude.Longitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lon3 << 24) | \
 80017f0:	431a      	orrs	r2, r3
			  												(WT901_Out_msg.Longitude_Latitude.Registers.Lon1 << 8)  | \
 80017f2:	4b83      	ldr	r3, [pc, #524]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017f4:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 80017f8:	021b      	lsls	r3, r3, #8
			  					  	  	  	  	  	  	  	(WT901_Out_msg.Longitude_Latitude.Registers.Lon2 << 16) | \
 80017fa:	4313      	orrs	r3, r2
															 WT901_Out_msg.Longitude_Latitude.Registers.Lon0);
 80017fc:	4a80      	ldr	r2, [pc, #512]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80017fe:	f892 2096 	ldrb.w	r2, [r2, #150]	@ 0x96
			  												(WT901_Out_msg.Longitude_Latitude.Registers.Lon1 << 8)  | \
 8001802:	4313      	orrs	r3, r2
 8001804:	461a      	mov	r2, r3
			  WT901_Out_msg.Longitude_Latitude.Longitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lon3 << 24) | \
 8001806:	4b7e      	ldr	r3, [pc, #504]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001808:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			  WT901_Out_msg.Longitude_Latitude.Latitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lat3 << 24) | \
 800180c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800180e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8001812:	061a      	lsls	r2, r3, #24
			  			  					  	  	  	   (WT901_Out_msg.Longitude_Latitude.Registers.Lat2 << 16) | \
 8001814:	4b7a      	ldr	r3, [pc, #488]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001816:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800181a:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Longitude_Latitude.Latitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lat3 << 24) | \
 800181c:	431a      	orrs	r2, r3
			  			  								   (WT901_Out_msg.Longitude_Latitude.Registers.Lat1 << 8)  | \
 800181e:	4b78      	ldr	r3, [pc, #480]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001820:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8001824:	021b      	lsls	r3, r3, #8
			  			  					  	  	  	   (WT901_Out_msg.Longitude_Latitude.Registers.Lat2 << 16) | \
 8001826:	4313      	orrs	r3, r2
			  												WT901_Out_msg.Longitude_Latitude.Registers.Lat0);
 8001828:	4a75      	ldr	r2, [pc, #468]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800182a:	f892 209a 	ldrb.w	r2, [r2, #154]	@ 0x9a
			  			  								   (WT901_Out_msg.Longitude_Latitude.Registers.Lat1 << 8)  | \
 800182e:	4313      	orrs	r3, r2
 8001830:	461a      	mov	r2, r3
			  WT901_Out_msg.Longitude_Latitude.Latitude = ((WT901_Out_msg.Longitude_Latitude.Registers.Lat3 << 24) | \
 8001832:	4b73      	ldr	r3, [pc, #460]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001834:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			break;
 8001838:	e15b      	b.n	8001af2 <WT901_Update_Message+0xa9a>

		  case Ground_Speed:
			  WT901_Out_msg.Ground_Speed.Registers.Msg_Begin 	= Receive_Message_Temporary_Buffer.First_Byte_Receive;
 800183a:	783a      	ldrb	r2, [r7, #0]
 800183c:	4b70      	ldr	r3, [pc, #448]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800183e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
			  WT901_Out_msg.Ground_Speed.Registers.Msg_Addr  	= Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001842:	787a      	ldrb	r2, [r7, #1]
 8001844:	4b6e      	ldr	r3, [pc, #440]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001846:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			  WT901_Out_msg.Ground_Speed.Registers.GPSHeightL	= Receive_Message_Temporary_Buffer.Data_Byte_0;
 800184a:	78ba      	ldrb	r2, [r7, #2]
 800184c:	4b6c      	ldr	r3, [pc, #432]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800184e:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
			  WT901_Out_msg.Ground_Speed.Registers.GPSHeightH	= Receive_Message_Temporary_Buffer.Data_Byte_1;
 8001852:	78fa      	ldrb	r2, [r7, #3]
 8001854:	4b6a      	ldr	r3, [pc, #424]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001856:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
			  WT901_Out_msg.Ground_Speed.Registers.GPSYawL		= Receive_Message_Temporary_Buffer.Data_Byte_2;
 800185a:	793a      	ldrb	r2, [r7, #4]
 800185c:	4b68      	ldr	r3, [pc, #416]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800185e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
			  WT901_Out_msg.Ground_Speed.Registers.GPSYawH		= Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001862:	797a      	ldrb	r2, [r7, #5]
 8001864:	4b66      	ldr	r3, [pc, #408]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001866:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			  WT901_Out_msg.Ground_Speed.Registers.GPSV0		= Receive_Message_Temporary_Buffer.Data_Byte_4;
 800186a:	79ba      	ldrb	r2, [r7, #6]
 800186c:	4b64      	ldr	r3, [pc, #400]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800186e:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
			  WT901_Out_msg.Ground_Speed.Registers.GPSV1		= Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001872:	79fa      	ldrb	r2, [r7, #7]
 8001874:	4b62      	ldr	r3, [pc, #392]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001876:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
			  WT901_Out_msg.Ground_Speed.Registers.GPSV2 		= Receive_Message_Temporary_Buffer.Data_Byte_6;
 800187a:	7a3a      	ldrb	r2, [r7, #8]
 800187c:	4b60      	ldr	r3, [pc, #384]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800187e:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
			  WT901_Out_msg.Ground_Speed.Registers.GPSV3 		= Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001882:	7a7a      	ldrb	r2, [r7, #9]
 8001884:	4b5e      	ldr	r3, [pc, #376]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001886:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
			  WT901_Out_msg.Ground_Speed.Registers.SUM 		 	= Receive_Message_Temporary_Buffer.Checksum;
 800188a:	7aba      	ldrb	r2, [r7, #10]
 800188c:	4b5c      	ldr	r3, [pc, #368]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800188e:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2

			  WT901_Out_msg.Ground_Speed.GPS_Height = ((WT901_Out_msg.Ground_Speed.Registers.GPSHeightH << 8) | WT901_Out_msg.Ground_Speed.Registers.GPSHeightL) / 10;
 8001892:	4b5b      	ldr	r3, [pc, #364]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001894:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800189c:	f892 20aa 	ldrb.w	r2, [r2, #170]	@ 0xaa
 80018a0:	4313      	orrs	r3, r2
 80018a2:	4a58      	ldr	r2, [pc, #352]	@ (8001a04 <WT901_Update_Message+0x9ac>)
 80018a4:	fb82 1203 	smull	r1, r2, r2, r3
 80018a8:	1092      	asrs	r2, r2, #2
 80018aa:	17db      	asrs	r3, r3, #31
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018b2:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
			  WT901_Out_msg.Ground_Speed.GPS_Yaw 	= ((WT901_Out_msg.Ground_Speed.Registers.GPSYawH << 8) | WT901_Out_msg.Ground_Speed.Registers.GPSYawL) / 10;
 80018b6:	4b52      	ldr	r3, [pc, #328]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018b8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	4a50      	ldr	r2, [pc, #320]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018c0:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 80018c4:	4313      	orrs	r3, r2
 80018c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001a04 <WT901_Update_Message+0x9ac>)
 80018c8:	fb82 1203 	smull	r1, r2, r2, r3
 80018cc:	1092      	asrs	r2, r2, #2
 80018ce:	17db      	asrs	r3, r3, #31
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018d6:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
			  WT901_Out_msg.Ground_Speed.GPS_Velocity = ((WT901_Out_msg.Ground_Speed.Registers.GPSV3 << 24) | \
 80018da:	4b49      	ldr	r3, [pc, #292]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80018e0:	061a      	lsls	r2, r3, #24
					  	  	  	  	  	  	  	  	  	 (WT901_Out_msg.Ground_Speed.Registers.GPSV2 << 16) | \
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018e4:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80018e8:	041b      	lsls	r3, r3, #16
			  WT901_Out_msg.Ground_Speed.GPS_Velocity = ((WT901_Out_msg.Ground_Speed.Registers.GPSV3 << 24) | \
 80018ea:	431a      	orrs	r2, r3
														 (WT901_Out_msg.Ground_Speed.Registers.GPSV1 << 8)  | \
 80018ec:	4b44      	ldr	r3, [pc, #272]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018ee:	f893 30af 	ldrb.w	r3, [r3, #175]	@ 0xaf
 80018f2:	021b      	lsls	r3, r3, #8
					  	  	  	  	  	  	  	  	  	 (WT901_Out_msg.Ground_Speed.Registers.GPSV2 << 16) | \
 80018f4:	4313      	orrs	r3, r2
														  WT901_Out_msg.Ground_Speed.Registers.GPSV0) / 1000;
 80018f6:	4a42      	ldr	r2, [pc, #264]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80018f8:	f892 20ae 	ldrb.w	r2, [r2, #174]	@ 0xae
														 (WT901_Out_msg.Ground_Speed.Registers.GPSV1 << 8)  | \
 80018fc:	4313      	orrs	r3, r2
														  WT901_Out_msg.Ground_Speed.Registers.GPSV0) / 1000;
 80018fe:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <WT901_Update_Message+0x9b0>)
 8001900:	fb82 1203 	smull	r1, r2, r2, r3
 8001904:	1192      	asrs	r2, r2, #6
 8001906:	17db      	asrs	r3, r3, #31
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	461a      	mov	r2, r3
			  WT901_Out_msg.Ground_Speed.GPS_Velocity = ((WT901_Out_msg.Ground_Speed.Registers.GPSV3 << 24) | \
 800190c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800190e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
			break;
 8001912:	e0ee      	b.n	8001af2 <WT901_Update_Message+0xa9a>

		  case Quaternion:
			  WT901_Out_msg.Quaternion.Registers.Msg_Begin  = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8001914:	783a      	ldrb	r2, [r7, #0]
 8001916:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001918:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
			  WT901_Out_msg.Quaternion.Registers.Msg_Addr   = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 800191c:	787a      	ldrb	r2, [r7, #1]
 800191e:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001920:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
			  WT901_Out_msg.Quaternion.Registers.Q0L		= Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001924:	78ba      	ldrb	r2, [r7, #2]
 8001926:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001928:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
			  WT901_Out_msg.Quaternion.Registers.Q0H		= Receive_Message_Temporary_Buffer.Data_Byte_1;
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001930:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
			  WT901_Out_msg.Quaternion.Registers.Q1L		= Receive_Message_Temporary_Buffer.Data_Byte_2;
 8001934:	793a      	ldrb	r2, [r7, #4]
 8001936:	4b32      	ldr	r3, [pc, #200]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001938:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
			  WT901_Out_msg.Quaternion.Registers.Q1H		= Receive_Message_Temporary_Buffer.Data_Byte_3;
 800193c:	797a      	ldrb	r2, [r7, #5]
 800193e:	4b30      	ldr	r3, [pc, #192]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001940:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
			  WT901_Out_msg.Quaternion.Registers.Q2L		= Receive_Message_Temporary_Buffer.Data_Byte_4;
 8001944:	79ba      	ldrb	r2, [r7, #6]
 8001946:	4b2e      	ldr	r3, [pc, #184]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001948:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
			  WT901_Out_msg.Quaternion.Registers.Q2H		= Receive_Message_Temporary_Buffer.Data_Byte_5;
 800194c:	79fa      	ldrb	r2, [r7, #7]
 800194e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001950:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
			  WT901_Out_msg.Quaternion.Registers.Q3L 		= Receive_Message_Temporary_Buffer.Data_Byte_6;
 8001954:	7a3a      	ldrb	r2, [r7, #8]
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001958:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			  WT901_Out_msg.Quaternion.Registers.Q3H 		= Receive_Message_Temporary_Buffer.Data_Byte_7;
 800195c:	7a7a      	ldrb	r2, [r7, #9]
 800195e:	4b28      	ldr	r3, [pc, #160]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001960:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
			  WT901_Out_msg.Quaternion.Registers.SUM 		= Receive_Message_Temporary_Buffer.Checksum;
 8001964:	7aba      	ldrb	r2, [r7, #10]
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001968:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6

			  WT901_Out_msg.Quaternion.Quaternion_0 = ((WT901_Out_msg.Quaternion.Registers.Q0H << 8) | WT901_Out_msg.Quaternion.Registers.Q0L) / 32768;
 800196c:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800196e:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001976:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 800197a:	4313      	orrs	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	da02      	bge.n	8001986 <WT901_Update_Message+0x92e>
 8001980:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001984:	337f      	adds	r3, #127	@ 0x7f
 8001986:	13db      	asrs	r3, r3, #15
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800198c:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
			  WT901_Out_msg.Quaternion.Quaternion_1 = ((WT901_Out_msg.Quaternion.Registers.Q1H << 8) | WT901_Out_msg.Quaternion.Registers.Q1L) / 32768;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 8001992:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 800199a:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 800199e:	4313      	orrs	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da02      	bge.n	80019aa <WT901_Update_Message+0x952>
 80019a4:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80019a8:	337f      	adds	r3, #127	@ 0x7f
 80019aa:	13db      	asrs	r3, r3, #15
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80019b0:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
			  WT901_Out_msg.Quaternion.Quaternion_2 = ((WT901_Out_msg.Quaternion.Registers.Q2H << 8) | WT901_Out_msg.Quaternion.Registers.Q2L) / 32768;
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80019b6:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80019be:	f892 20c2 	ldrb.w	r2, [r2, #194]	@ 0xc2
 80019c2:	4313      	orrs	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da02      	bge.n	80019ce <WT901_Update_Message+0x976>
 80019c8:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80019cc:	337f      	adds	r3, #127	@ 0x7f
 80019ce:	13db      	asrs	r3, r3, #15
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80019d4:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
			  WT901_Out_msg.Quaternion.Quaternion_3 = ((WT901_Out_msg.Quaternion.Registers.Q3H << 8) | WT901_Out_msg.Quaternion.Registers.Q3L) / 32768;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80019da:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80019e2:	f892 20c4 	ldrb.w	r2, [r2, #196]	@ 0xc4
 80019e6:	4313      	orrs	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da02      	bge.n	80019f2 <WT901_Update_Message+0x99a>
 80019ec:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80019f0:	337f      	adds	r3, #127	@ 0x7f
 80019f2:	13db      	asrs	r3, r3, #15
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b02      	ldr	r3, [pc, #8]	@ (8001a00 <WT901_Update_Message+0x9a8>)
 80019f8:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
			break;
 80019fc:	e079      	b.n	8001af2 <WT901_Update_Message+0xa9a>
 80019fe:	bf00      	nop
 8001a00:	200002ec 	.word	0x200002ec
 8001a04:	66666667 	.word	0x66666667
 8001a08:	10624dd3 	.word	0x10624dd3

		  case Satellite_Positioning_Accuracy:
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.Msg_Begin 	 = Receive_Message_Temporary_Buffer.First_Byte_Receive;
 8001a0c:	783a      	ldrb	r2, [r7, #0]
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a10:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.Msg_Addr  	 = Receive_Message_Temporary_Buffer.Message_Address_Receive;
 8001a14:	787a      	ldrb	r2, [r7, #1]
 8001a16:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a18:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNL		 = Receive_Message_Temporary_Buffer.Data_Byte_0;
 8001a1c:	78ba      	ldrb	r2, [r7, #2]
 8001a1e:	4b37      	ldr	r3, [pc, #220]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a20:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNH		 = Receive_Message_Temporary_Buffer.Data_Byte_1;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a28:	f883 20d3 	strb.w	r2, [r3, #211]	@ 0xd3
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPL		 = Receive_Message_Temporary_Buffer.Data_Byte_2;
 8001a2c:	793a      	ldrb	r2, [r7, #4]
 8001a2e:	4b33      	ldr	r3, [pc, #204]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a30:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPH		 = Receive_Message_Temporary_Buffer.Data_Byte_3;
 8001a34:	797a      	ldrb	r2, [r7, #5]
 8001a36:	4b31      	ldr	r3, [pc, #196]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a38:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPL		 = Receive_Message_Temporary_Buffer.Data_Byte_4;
 8001a3c:	79ba      	ldrb	r2, [r7, #6]
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a40:	f883 20d6 	strb.w	r2, [r3, #214]	@ 0xd6
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPH		 = Receive_Message_Temporary_Buffer.Data_Byte_5;
 8001a44:	79fa      	ldrb	r2, [r7, #7]
 8001a46:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a48:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPL 		 = Receive_Message_Temporary_Buffer.Data_Byte_6;
 8001a4c:	7a3a      	ldrb	r2, [r7, #8]
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a50:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPH 		 = Receive_Message_Temporary_Buffer.Data_Byte_7;
 8001a54:	7a7a      	ldrb	r2, [r7, #9]
 8001a56:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a58:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
			  WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SUM 		 = Receive_Message_Temporary_Buffer.Checksum;
 8001a5c:	7aba      	ldrb	r2, [r7, #10]
 8001a5e:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a60:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda

			  WT901_Out_msg.Satellite_Positioning_Accuracy.SN = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.SNL);
 8001a64:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a66:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b23      	ldr	r3, [pc, #140]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a70:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a7e:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
			  WT901_Out_msg.Satellite_Positioning_Accuracy.PDOP = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.PDOPL) / 32768;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a84:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001a8c:	f892 20d4 	ldrb.w	r2, [r2, #212]	@ 0xd4
 8001a90:	4313      	orrs	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da02      	bge.n	8001a9c <WT901_Update_Message+0xa44>
 8001a96:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001a9a:	337f      	adds	r3, #127	@ 0x7f
 8001a9c:	13db      	asrs	r3, r3, #15
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001aa2:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
			  WT901_Out_msg.Satellite_Positioning_Accuracy.HDOP = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.HDOPL) / 32768;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001aa8:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	4a13      	ldr	r2, [pc, #76]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001ab0:	f892 20d6 	ldrb.w	r2, [r2, #214]	@ 0xd6
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da02      	bge.n	8001ac0 <WT901_Update_Message+0xa68>
 8001aba:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001abe:	337f      	adds	r3, #127	@ 0x7f
 8001ac0:	13db      	asrs	r3, r3, #15
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001ac6:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
			  WT901_Out_msg.Satellite_Positioning_Accuracy.VDOP = ((WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPH << 8) | WT901_Out_msg.Satellite_Positioning_Accuracy.Registers.VDOPL) / 32768;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001acc:	f893 30d9 	ldrb.w	r3, [r3, #217]	@ 0xd9
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001ad4:	f892 20d8 	ldrb.w	r2, [r2, #216]	@ 0xd8
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da02      	bge.n	8001ae4 <WT901_Update_Message+0xa8c>
 8001ade:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001ae2:	337f      	adds	r3, #127	@ 0x7f
 8001ae4:	13db      	asrs	r3, r3, #15
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <WT901_Update_Message+0xaa4>)
 8001aea:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
			break;
 8001aee:	e000      	b.n	8001af2 <WT901_Update_Message+0xa9a>

		  default:
 8001af0:	bf00      	nop
		// code block
    	}
	}
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002ec 	.word	0x200002ec

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <Error_Handler+0x8>

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a08      	ldr	r2, [pc, #32]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x48>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d115      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8001b78:	f043 0310 	orr.w	r3, r3, #16
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x4c>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2036      	movs	r0, #54	@ 0x36
 8001b90:	f000 fb89 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b94:	2036      	movs	r0, #54	@ 0x36
 8001b96:	f000 fba2 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40001000 	.word	0x40001000
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	@ 0x30
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a98      	ldr	r2, [pc, #608]	@ (8001e2c <HAL_UART_MspInit+0x280>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f040 8092 	bne.w	8001cf4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	4b96      	ldr	r3, [pc, #600]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd8:	4a95      	ldr	r2, [pc, #596]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be0:	4b93      	ldr	r3, [pc, #588]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	4a8e      	ldr	r2, [pc, #568]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	4883      	ldr	r0, [pc, #524]	@ (8001e34 <HAL_UART_MspInit+0x288>)
 8001c26:	f000 ff77 	bl	8002b18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c2a:	4b83      	ldr	r3, [pc, #524]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c2c:	4a83      	ldr	r2, [pc, #524]	@ (8001e3c <HAL_UART_MspInit+0x290>)
 8001c2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c30:	4b81      	ldr	r3, [pc, #516]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c38:	4b7f      	ldr	r3, [pc, #508]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c44:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c52:	4b79      	ldr	r3, [pc, #484]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c58:	4b77      	ldr	r3, [pc, #476]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5e:	4b76      	ldr	r3, [pc, #472]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c64:	4b74      	ldr	r3, [pc, #464]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c6a:	4873      	ldr	r0, [pc, #460]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c6c:	f000 fb52 	bl	8002314 <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001c76:	f7ff ff43 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c80:	4a6d      	ldr	r2, [pc, #436]	@ (8001e38 <HAL_UART_MspInit+0x28c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001c86:	4b6e      	ldr	r3, [pc, #440]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001c88:	4a6e      	ldr	r2, [pc, #440]	@ (8001e44 <HAL_UART_MspInit+0x298>)
 8001c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001c8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c92:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c94:	4b6a      	ldr	r3, [pc, #424]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001c96:	2240      	movs	r2, #64	@ 0x40
 8001c98:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9a:	4b69      	ldr	r3, [pc, #420]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca0:	4b67      	ldr	r3, [pc, #412]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca8:	4b65      	ldr	r3, [pc, #404]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cae:	4b64      	ldr	r3, [pc, #400]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001cb4:	4b62      	ldr	r3, [pc, #392]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cba:	4b61      	ldr	r3, [pc, #388]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cc6:	485e      	ldr	r0, [pc, #376]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001cc8:	f000 fb24 	bl	8002314 <HAL_DMA_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001cd2:	f7ff ff15 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a59      	ldr	r2, [pc, #356]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001cda:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cdc:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <HAL_UART_MspInit+0x294>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2025      	movs	r0, #37	@ 0x25
 8001ce8:	f000 fadd 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cec:	2025      	movs	r0, #37	@ 0x25
 8001cee:	f000 faf6 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cf2:	e096      	b.n	8001e22 <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a53      	ldr	r2, [pc, #332]	@ (8001e48 <HAL_UART_MspInit+0x29c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	f040 8091 	bne.w	8001e22 <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	4a49      	ldr	r2, [pc, #292]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001d0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d10:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	4a42      	ldr	r2, [pc, #264]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2c:	4b40      	ldr	r3, [pc, #256]	@ (8001e30 <HAL_UART_MspInit+0x284>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	483d      	ldr	r0, [pc, #244]	@ (8001e4c <HAL_UART_MspInit+0x2a0>)
 8001d56:	f000 fedf 	bl	8002b18 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e54 <HAL_UART_MspInit+0x2a8>)
 8001d5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d60:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d66:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d68:	4b39      	ldr	r3, [pc, #228]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d74:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d7a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d7c:	4b34      	ldr	r3, [pc, #208]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d82:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d88:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d8e:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d94:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d9a:	482d      	ldr	r0, [pc, #180]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001d9c:	f000 faba 	bl	8002314 <HAL_DMA_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001da6:	f7ff feab 	bl	8001b00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a28      	ldr	r2, [pc, #160]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001dae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001db0:	4a27      	ldr	r2, [pc, #156]	@ (8001e50 <HAL_UART_MspInit+0x2a4>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001db8:	4a28      	ldr	r2, [pc, #160]	@ (8001e5c <HAL_UART_MspInit+0x2b0>)
 8001dba:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001dbc:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001dbe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dc2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc4:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001dc6:	2240      	movs	r2, #64	@ 0x40
 8001dc8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd0:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001de4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dea:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001df6:	4818      	ldr	r0, [pc, #96]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001df8:	f000 fa8c 	bl	8002314 <HAL_DMA_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8001e02:	f7ff fe7d 	bl	8001b00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a13      	ldr	r2, [pc, #76]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001e0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <HAL_UART_MspInit+0x2ac>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2027      	movs	r0, #39	@ 0x27
 8001e18:	f000 fa45 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e1c:	2027      	movs	r0, #39	@ 0x27
 8001e1e:	f000 fa5e 	bl	80022de <HAL_NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3730      	adds	r7, #48	@ 0x30
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	20000120 	.word	0x20000120
 8001e3c:	40026440 	.word	0x40026440
 8001e40:	20000180 	.word	0x20000180
 8001e44:	400264b8 	.word	0x400264b8
 8001e48:	40004800 	.word	0x40004800
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	200001e0 	.word	0x200001e0
 8001e54:	40026028 	.word	0x40026028
 8001e58:	20000240 	.word	0x20000240
 8001e5c:	40026058 	.word	0x40026058

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <NMI_Handler+0x4>

08001e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <MemManage_Handler+0x4>

08001e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb6:	f000 f8d7 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ec6:	f000 fbbd 	bl	8002644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200001e0 	.word	0x200001e0

08001ed4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <DMA1_Stream3_IRQHandler+0x10>)
 8001eda:	f000 fbb3 	bl	8002644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000240 	.word	0x20000240

08001ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <USART1_IRQHandler+0x10>)
 8001eee:	f002 f875 	bl	8003fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000090 	.word	0x20000090

08001efc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <USART3_IRQHandler+0x10>)
 8001f02:	f002 f86b 	bl	8003fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000d8 	.word	0x200000d8

08001f10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <TIM6_DAC_IRQHandler+0x10>)
 8001f16:	f001 fd27 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000048 	.word	0x20000048

08001f24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <DMA2_Stream2_IRQHandler+0x10>)
 8001f2a:	f000 fb8b 	bl	8002644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000120 	.word	0x20000120

08001f38 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <DMA2_Stream7_IRQHandler+0x10>)
 8001f3e:	f000 fb81 	bl	8002644 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000180 	.word	0x20000180

08001f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <SystemInit+0x20>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <SystemInit+0x20>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f74:	f7ff ffea 	bl	8001f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	@ (8001fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	@ (8001fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	@ (8001fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9e:	f003 f90f 	bl	80051c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa2:	f7fe fe0d 	bl	8000bc0 <main>
  bx  lr    
 8001fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001fb4:	08005250 	.word	0x08005250
  ldr r2, =_sbss
 8001fb8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001fbc:	200003d8 	.word	0x200003d8

08001fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <HAL_Init+0x40>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <HAL_Init+0x40>)
 8001fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_Init+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <HAL_Init+0x40>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f000 f94f 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff2:	200f      	movs	r0, #15
 8001ff4:	f000 f808 	bl	8002008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff8:	f7ff fd88 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00

08002008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_InitTick+0x54>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_InitTick+0x58>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f967 	bl	80022fa <HAL_SYSTICK_Config>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e00e      	b.n	8002054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d80a      	bhi.n	8002052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	f04f 30ff 	mov.w	r0, #4294967295
 8002044:	f000 f92f 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002048:	4a06      	ldr	r2, [pc, #24]	@ (8002064 <HAL_InitTick+0x5c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000020 	.word	0x20000020
 8002060:	20000028 	.word	0x20000028
 8002064:	20000024 	.word	0x20000024

08002068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	@ (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000028 	.word	0x20000028
 800208c:	200003d4 	.word	0x200003d4

08002090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_GetTick+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200003d4 	.word	0x200003d4

080020a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff ffee 	bl	8002090 <HAL_GetTick>
 80020b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d005      	beq.n	80020ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_Delay+0x44>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ce:	bf00      	nop
 80020d0:	f7ff ffde 	bl	8002090 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d8f7      	bhi.n	80020d0 <HAL_Delay+0x28>
  {
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000028 	.word	0x20000028

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0b      	blt.n	800217e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	@ (800218c <__NVIC_EnableIRQ+0x38>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	@ (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	@ (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	@ 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	@ (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff29 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff3e 	bl	8002138 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff31 	bl	8002154 <__NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffa2 	bl	800224c <SysTick_Config>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff feb6 	bl	8002090 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e099      	b.n	8002464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002350:	e00f      	b.n	8002372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002352:	f7ff fe9d 	bl	8002090 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b05      	cmp	r3, #5
 800235e:	d908      	bls.n	8002372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e078      	b.n	8002464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e8      	bne.n	8002352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4b38      	ldr	r3, [pc, #224]	@ (800246c <HAL_DMA_Init+0x158>)
 800238c:	4013      	ands	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d107      	bne.n	80023dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	4313      	orrs	r3, r2
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	2b04      	cmp	r3, #4
 8002404:	d117      	bne.n	8002436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fb01 	bl	8002a20 <DMA_CheckFifoParam>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	@ 0x40
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002432:	2301      	movs	r3, #1
 8002434:	e016      	b.n	8002464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fab8 	bl	80029b4 <DMA_CalcBaseAndBitshift>
 8002444:	4603      	mov	r3, r0
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	223f      	movs	r2, #63	@ 0x3f
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	f010803f 	.word	0xf010803f

08002470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Start_IT+0x26>
 8002492:	2302      	movs	r3, #2
 8002494:	e040      	b.n	8002518 <HAL_DMA_Start_IT+0xa8>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d12f      	bne.n	800250a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fa4a 	bl	8002958 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c8:	223f      	movs	r2, #63	@ 0x3f
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0216 	orr.w	r2, r2, #22
 80024de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0208 	orr.w	r2, r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e005      	b.n	8002516 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002512:	2302      	movs	r3, #2
 8002514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002516:	7dfb      	ldrb	r3, [r7, #23]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252e:	f7ff fdaf 	bl	8002090 <HAL_GetTick>
 8002532:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	@ 0x80
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e052      	b.n	80025f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0216 	bic.w	r2, r2, #22
 8002560:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002570:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <HAL_DMA_Abort+0x62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0208 	bic.w	r2, r2, #8
 8002590:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a2:	e013      	b.n	80025cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a4:	f7ff fd74 	bl	8002090 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d90c      	bls.n	80025cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2203      	movs	r2, #3
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e015      	b.n	80025f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1e4      	bne.n	80025a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025de:	223f      	movs	r2, #63	@ 0x3f
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d004      	beq.n	800261e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2280      	movs	r2, #128	@ 0x80
 8002618:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00c      	b.n	8002638 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002650:	4b8e      	ldr	r3, [pc, #568]	@ (800288c <HAL_DMA_IRQHandler+0x248>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a8e      	ldr	r2, [pc, #568]	@ (8002890 <HAL_DMA_IRQHandler+0x24c>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0a9b      	lsrs	r3, r3, #10
 800265c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266e:	2208      	movs	r2, #8
 8002670:	409a      	lsls	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01a      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0204 	bic.w	r2, r2, #4
 8002696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	2208      	movs	r2, #8
 800269e:	409a      	lsls	r2, r3
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	2201      	movs	r2, #1
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d012      	beq.n	80026e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026de:	f043 0202 	orr.w	r2, r3, #2
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	2204      	movs	r2, #4
 80026ec:	409a      	lsls	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d012      	beq.n	800271c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	2204      	movs	r2, #4
 800270a:	409a      	lsls	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	2210      	movs	r2, #16
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d043      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d03c      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273e:	2210      	movs	r2, #16
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d018      	beq.n	8002786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d108      	bne.n	8002774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d024      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
 8002772:	e01f      	b.n	80027b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01b      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
 8002784:	e016      	b.n	80027b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d107      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0208 	bic.w	r2, r2, #8
 80027a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	2220      	movs	r2, #32
 80027ba:	409a      	lsls	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 808f 	beq.w	80028e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8087 	beq.w	80028e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	2220      	movs	r2, #32
 80027dc:	409a      	lsls	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d136      	bne.n	800285c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0216 	bic.w	r2, r2, #22
 80027fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800280c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_DMA_IRQHandler+0x1da>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0208 	bic.w	r2, r2, #8
 800282c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	223f      	movs	r2, #63	@ 0x3f
 8002834:	409a      	lsls	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284e:	2b00      	cmp	r3, #0
 8002850:	d07e      	beq.n	8002950 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
        }
        return;
 800285a:	e079      	b.n	8002950 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01d      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287c:	2b00      	cmp	r3, #0
 800287e:	d031      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
 8002888:	e02c      	b.n	80028e4 <HAL_DMA_IRQHandler+0x2a0>
 800288a:	bf00      	nop
 800288c:	20000020 	.word	0x20000020
 8002890:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d023      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
 80028a4:	e01e      	b.n	80028e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10f      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0210 	bic.w	r2, r2, #16
 80028c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d032      	beq.n	8002952 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d022      	beq.n	800293e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2205      	movs	r2, #5
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	3301      	adds	r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	429a      	cmp	r2, r3
 800291a:	d307      	bcc.n	800292c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f2      	bne.n	8002910 <HAL_DMA_IRQHandler+0x2cc>
 800292a:	e000      	b.n	800292e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800292c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
 800294e:	e000      	b.n	8002952 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002950:	bf00      	nop
    }
  }
}
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002974:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b40      	cmp	r3, #64	@ 0x40
 8002984:	d108      	bne.n	8002998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002996:	e007      	b.n	80029a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3b10      	subs	r3, #16
 80029c4:	4a14      	ldr	r2, [pc, #80]	@ (8002a18 <DMA_CalcBaseAndBitshift+0x64>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ce:	4a13      	ldr	r2, [pc, #76]	@ (8002a1c <DMA_CalcBaseAndBitshift+0x68>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d909      	bls.n	80029f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	1d1a      	adds	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029f4:	e007      	b.n	8002a06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029fe:	f023 0303 	bic.w	r3, r3, #3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	aaaaaaab 	.word	0xaaaaaaab
 8002a1c:	08005238 	.word	0x08005238

08002a20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11f      	bne.n	8002a7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d856      	bhi.n	8002aee <DMA_CheckFifoParam+0xce>
 8002a40:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <DMA_CheckFifoParam+0x28>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a6b 	.word	0x08002a6b
 8002a50:	08002a59 	.word	0x08002a59
 8002a54:	08002aef 	.word	0x08002aef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d046      	beq.n	8002af2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a68:	e043      	b.n	8002af2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a72:	d140      	bne.n	8002af6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e03d      	b.n	8002af6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a82:	d121      	bne.n	8002ac8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d837      	bhi.n	8002afa <DMA_CheckFifoParam+0xda>
 8002a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <DMA_CheckFifoParam+0x70>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002aa1 	.word	0x08002aa1
 8002a94:	08002aa7 	.word	0x08002aa7
 8002a98:	08002aa1 	.word	0x08002aa1
 8002a9c:	08002ab9 	.word	0x08002ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa4:	e030      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d025      	beq.n	8002afe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab6:	e022      	b.n	8002afe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ac0:	d11f      	bne.n	8002b02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ac6:	e01c      	b.n	8002b02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d903      	bls.n	8002ad6 <DMA_CheckFifoParam+0xb6>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d003      	beq.n	8002adc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad4:	e018      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8002ada:	e015      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00e      	beq.n	8002b06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e00b      	b.n	8002b06 <DMA_CheckFifoParam+0xe6>
      break;
 8002aee:	bf00      	nop
 8002af0:	e00a      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e008      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e006      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e004      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      break;
 8002afe:	bf00      	nop
 8002b00:	e002      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
    }
  } 
  
  return status; 
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	@ 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e16b      	b.n	8002e0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b34:	2201      	movs	r2, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f040 815a 	bne.w	8002e06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d005      	beq.n	8002b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d130      	bne.n	8002bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0201 	and.w	r2, r3, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d017      	beq.n	8002c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d123      	bne.n	8002c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3208      	adds	r2, #8
 8002c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80b4 	beq.w	8002e06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	4b60      	ldr	r3, [pc, #384]	@ (8002e24 <HAL_GPIO_Init+0x30c>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	4a5f      	ldr	r2, [pc, #380]	@ (8002e24 <HAL_GPIO_Init+0x30c>)
 8002ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cae:	4b5d      	ldr	r3, [pc, #372]	@ (8002e24 <HAL_GPIO_Init+0x30c>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cba:	4a5b      	ldr	r2, [pc, #364]	@ (8002e28 <HAL_GPIO_Init+0x310>)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	@ (8002e2c <HAL_GPIO_Init+0x314>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <HAL_GPIO_Init+0x226>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a51      	ldr	r2, [pc, #324]	@ (8002e30 <HAL_GPIO_Init+0x318>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d025      	beq.n	8002d3a <HAL_GPIO_Init+0x222>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a50      	ldr	r2, [pc, #320]	@ (8002e34 <HAL_GPIO_Init+0x31c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01f      	beq.n	8002d36 <HAL_GPIO_Init+0x21e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8002e38 <HAL_GPIO_Init+0x320>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d019      	beq.n	8002d32 <HAL_GPIO_Init+0x21a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4e      	ldr	r2, [pc, #312]	@ (8002e3c <HAL_GPIO_Init+0x324>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_GPIO_Init+0x216>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4d      	ldr	r2, [pc, #308]	@ (8002e40 <HAL_GPIO_Init+0x328>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00d      	beq.n	8002d2a <HAL_GPIO_Init+0x212>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	@ (8002e44 <HAL_GPIO_Init+0x32c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <HAL_GPIO_Init+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4b      	ldr	r2, [pc, #300]	@ (8002e48 <HAL_GPIO_Init+0x330>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_GPIO_Init+0x20a>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e00e      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d22:	2308      	movs	r3, #8
 8002d24:	e00c      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d26:	2306      	movs	r3, #6
 8002d28:	e00a      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	e008      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d32:	2303      	movs	r3, #3
 8002d34:	e004      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e002      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_GPIO_Init+0x228>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f002 0203 	and.w	r2, r2, #3
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	4093      	lsls	r3, r2
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d50:	4935      	ldr	r1, [pc, #212]	@ (8002e28 <HAL_GPIO_Init+0x310>)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	3302      	adds	r3, #2
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d82:	4a32      	ldr	r2, [pc, #200]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d88:	4b30      	ldr	r3, [pc, #192]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dac:	4a27      	ldr	r2, [pc, #156]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002db2:	4b26      	ldr	r3, [pc, #152]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e00:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <HAL_GPIO_Init+0x334>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	f67f ae90 	bls.w	8002b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3724      	adds	r7, #36	@ 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40013800 	.word	0x40013800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40020400 	.word	0x40020400
 8002e34:	40020800 	.word	0x40020800
 8002e38:	40020c00 	.word	0x40020c00
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40021400 	.word	0x40021400
 8002e44:	40021800 	.word	0x40021800
 8002e48:	40021c00 	.word	0x40021c00
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e60:	787b      	ldrb	r3, [r7, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e6c:	e003      	b.n	8002e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	041a      	lsls	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e94:	887a      	ldrh	r2, [r7, #2]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	041a      	lsls	r2, r3, #16
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e267      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d075      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed6:	4b88      	ldr	r3, [pc, #544]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d00c      	beq.n	8002efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b85      	ldr	r3, [pc, #532]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d112      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4b82      	ldr	r3, [pc, #520]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b7e      	ldr	r3, [pc, #504]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d157      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e242      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x74>
 8002f1e:	4b76      	ldr	r3, [pc, #472]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a75      	ldr	r2, [pc, #468]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x98>
 8002f36:	4b70      	ldr	r3, [pc, #448]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6f      	ldr	r2, [pc, #444]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6c      	ldr	r2, [pc, #432]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f50:	4b69      	ldr	r3, [pc, #420]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a68      	ldr	r2, [pc, #416]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b66      	ldr	r3, [pc, #408]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a65      	ldr	r2, [pc, #404]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7ff f88e 	bl	8002090 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f78:	f7ff f88a 	bl	8002090 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e207      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xc0>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7ff f87a 	bl	8002090 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7ff f876 	bl	8002090 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1f3      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	4b51      	ldr	r3, [pc, #324]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xe8>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fce:	4b4a      	ldr	r3, [pc, #296]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b47      	ldr	r3, [pc, #284]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b44      	ldr	r3, [pc, #272]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	4b41      	ldr	r3, [pc, #260]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e1c7      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4937      	ldr	r1, [pc, #220]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	e03a      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003028:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_OscConfig+0x244>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7ff f82f 	bl	8002090 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7ff f82b 	bl	8002090 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1a8      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	4b2b      	ldr	r3, [pc, #172]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b28      	ldr	r3, [pc, #160]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4925      	ldr	r1, [pc, #148]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCC_OscConfig+0x244>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7ff f80e 	bl	8002090 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003078:	f7ff f80a 	bl	8002090 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e187      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d036      	beq.n	8003110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_RCC_OscConfig+0x248>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe ffee 	bl	8002090 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe ffea 	bl	8002090 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e167      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 80030cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x200>
 80030d6:	e01b      	b.n	8003110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCC_OscConfig+0x248>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7fe ffd7 	bl	8002090 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	e00e      	b.n	8003104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e6:	f7fe ffd3 	bl	8002090 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d907      	bls.n	8003104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e150      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	42470000 	.word	0x42470000
 8003100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	4b88      	ldr	r3, [pc, #544]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ea      	bne.n	80030e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8097 	beq.w	800324c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b81      	ldr	r3, [pc, #516]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	4b7d      	ldr	r3, [pc, #500]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	4a7c      	ldr	r2, [pc, #496]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	@ 0x40
 800313e:	4b7a      	ldr	r3, [pc, #488]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b77      	ldr	r3, [pc, #476]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d118      	bne.n	800318c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b74      	ldr	r3, [pc, #464]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a73      	ldr	r2, [pc, #460]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7fe ff93 	bl	8002090 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fe ff8f 	bl	8002090 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e10c      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b6a      	ldr	r3, [pc, #424]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x2ea>
 8003194:	4b64      	ldr	r3, [pc, #400]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a63      	ldr	r2, [pc, #396]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x324>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x30c>
 80031aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0x324>
 80031c4:	4b58      	ldr	r3, [pc, #352]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a57      	ldr	r2, [pc, #348]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d0:	4b55      	ldr	r3, [pc, #340]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	4a54      	ldr	r2, [pc, #336]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe ff54 	bl	8002090 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7fe ff50 	bl	8002090 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0cb      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	4b49      	ldr	r3, [pc, #292]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ee      	beq.n	80031ec <HAL_RCC_OscConfig+0x334>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003210:	f7fe ff3e 	bl	8002090 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe ff3a 	bl	8002090 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0b5      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	4b3e      	ldr	r3, [pc, #248]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ee      	bne.n	8003218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	4a38      	ldr	r2, [pc, #224]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a1 	beq.w	8003398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003256:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d05c      	beq.n	800331c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d141      	bne.n	80032ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b31      	ldr	r3, [pc, #196]	@ (8003330 <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe ff0e 	bl	8002090 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe ff0a 	bl	8002090 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e087      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	491b      	ldr	r1, [pc, #108]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <HAL_RCC_OscConfig+0x478>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fee3 	bl	8002090 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fe fedf 	bl	8002090 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e05c      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e0:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x416>
 80032ec:	e054      	b.n	8003398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <HAL_RCC_OscConfig+0x478>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fecc 	bl	8002090 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fec8 	bl	8002090 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e045      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x444>
 800331a:	e03d      	b.n	8003398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e038      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000
 8003330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_RCC_OscConfig+0x4ec>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d028      	beq.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d121      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d11a      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800336a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0cc      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b68      	ldr	r3, [pc, #416]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90c      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b65      	ldr	r3, [pc, #404]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b63      	ldr	r3, [pc, #396]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033fc:	4b59      	ldr	r3, [pc, #356]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a58      	ldr	r2, [pc, #352]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003414:	4b53      	ldr	r3, [pc, #332]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a52      	ldr	r2, [pc, #328]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800341e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b50      	ldr	r3, [pc, #320]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	494d      	ldr	r1, [pc, #308]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d044      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b47      	ldr	r3, [pc, #284]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d119      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d003      	beq.n	8003466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003462:	2b03      	cmp	r3, #3
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b3f      	ldr	r3, [pc, #252]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e06f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e067      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4934      	ldr	r1, [pc, #208]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7fe fdfa 	bl	8002090 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7fe fdf6 	bl	8002090 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e04f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b25      	ldr	r3, [pc, #148]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d20c      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b22      	ldr	r3, [pc, #136]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e032      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4916      	ldr	r1, [pc, #88]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490e      	ldr	r1, [pc, #56]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352e:	f000 f821 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490a      	ldr	r1, [pc, #40]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a09      	ldr	r2, [pc, #36]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800354a:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe fd5a 	bl	8002008 <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023c00 	.word	0x40023c00
 8003564:	40023800 	.word	0x40023800
 8003568:	08005220 	.word	0x08005220
 800356c:	20000020 	.word	0x20000020
 8003570:	20000024 	.word	0x20000024

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003578:	b094      	sub	sp, #80	@ 0x50
 800357a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003580:	2300      	movs	r3, #0
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003584:	2300      	movs	r3, #0
 8003586:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800358c:	4b79      	ldr	r3, [pc, #484]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d00d      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003598:	2b08      	cmp	r3, #8
 800359a:	f200 80e1 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x34>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x3a>
 80035a6:	e0db      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b73      	ldr	r3, [pc, #460]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 80035aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80035ac:	e0db      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ae:	4b73      	ldr	r3, [pc, #460]	@ (800377c <HAL_RCC_GetSysClockFreq+0x208>)
 80035b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035b2:	e0d8      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035be:	4b6d      	ldr	r3, [pc, #436]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	2200      	movs	r2, #0
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035de:	2300      	movs	r3, #0
 80035e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f8:	0150      	lsls	r0, r2, #5
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4621      	mov	r1, r4
 8003600:	1a51      	subs	r1, r2, r1
 8003602:	6139      	str	r1, [r7, #16]
 8003604:	4629      	mov	r1, r5
 8003606:	eb63 0301 	sbc.w	r3, r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	018b      	lsls	r3, r1, #6
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003622:	4651      	mov	r1, sl
 8003624:	018a      	lsls	r2, r1, #6
 8003626:	4651      	mov	r1, sl
 8003628:	ebb2 0801 	subs.w	r8, r2, r1
 800362c:	4659      	mov	r1, fp
 800362e:	eb63 0901 	sbc.w	r9, r3, r1
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003646:	4690      	mov	r8, r2
 8003648:	4699      	mov	r9, r3
 800364a:	4623      	mov	r3, r4
 800364c:	eb18 0303 	adds.w	r3, r8, r3
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	462b      	mov	r3, r5
 8003654:	eb49 0303 	adc.w	r3, r9, r3
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003666:	4629      	mov	r1, r5
 8003668:	024b      	lsls	r3, r1, #9
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003670:	4621      	mov	r1, r4
 8003672:	024a      	lsls	r2, r1, #9
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800367e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003684:	f7fd f8a6 	bl	80007d4 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003690:	e058      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b38      	ldr	r3, [pc, #224]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	2200      	movs	r2, #0
 800369a:	4618      	mov	r0, r3
 800369c:	4611      	mov	r1, r2
 800369e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	f04f 0000 	mov.w	r0, #0
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	0159      	lsls	r1, r3, #5
 80036ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036be:	0150      	lsls	r0, r2, #5
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4641      	mov	r1, r8
 80036c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ca:	4649      	mov	r1, r9
 80036cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e4:	ebb2 040a 	subs.w	r4, r2, sl
 80036e8:	eb63 050b 	sbc.w	r5, r3, fp
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	464b      	mov	r3, r9
 8003708:	eb45 0303 	adc.w	r3, r5, r3
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372e:	2200      	movs	r2, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	61fa      	str	r2, [r7, #28]
 8003734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003738:	f7fd f84c 	bl	80007d4 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003768:	4618      	mov	r0, r3
 800376a:	3750      	adds	r7, #80	@ 0x50
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000020 	.word	0x20000020

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	@ (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08005230 	.word	0x08005230

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	@ (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08005230 	.word	0x08005230

080037e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e041      	b.n	800387e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe f9a4 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 f9b6 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04e      	b.n	800393e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a23      	ldr	r2, [pc, #140]	@ (800394c <HAL_TIM_Base_Start_IT+0xc4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x80>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ca:	d01d      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x80>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003950 <HAL_TIM_Base_Start_IT+0xc8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x80>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_TIM_Base_Start_IT+0xcc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x80>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <HAL_TIM_Base_Start_IT+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x80>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_TIM_Base_Start_IT+0xd4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x80>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	@ (8003960 <HAL_TIM_Base_Start_IT+0xd8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0x80>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <HAL_TIM_Base_Start_IT+0xdc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d111      	bne.n	800392c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b06      	cmp	r3, #6
 8003918:	d010      	beq.n	800393c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	e007      	b.n	800393c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800
 8003958:	40000c00 	.word	0x40000c00
 800395c:	40010400 	.word	0x40010400
 8003960:	40014000 	.word	0x40014000
 8003964:	40001800 	.word	0x40001800

08003968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d020      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01b      	beq.n	80039cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0202 	mvn.w	r2, #2
 800399c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8d2 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f8c4 	bl	8003b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f8d5 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d020      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0204 	mvn.w	r2, #4
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8ac 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f89e 	bl	8003b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8af 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d020      	beq.n	8003a64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0208 	mvn.w	r2, #8
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f886 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f878 	bl	8003b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f889 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d020      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01b      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f860 	bl	8003b5c <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f852 	bl	8003b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f863 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0201 	mvn.w	r2, #1
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f854 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f982 	bl	8003dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f834 	bl	8003b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0220 	mvn.w	r2, #32
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f954 	bl	8003de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a46      	ldr	r2, [pc, #280]	@ (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a43      	ldr	r2, [pc, #268]	@ (8003cc8 <TIM_Base_SetConfig+0x130>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a42      	ldr	r2, [pc, #264]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a41      	ldr	r2, [pc, #260]	@ (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a40      	ldr	r2, [pc, #256]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a35      	ldr	r2, [pc, #212]	@ (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf8:	d027      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a32      	ldr	r2, [pc, #200]	@ (8003cc8 <TIM_Base_SetConfig+0x130>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d023      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a31      	ldr	r2, [pc, #196]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a30      	ldr	r2, [pc, #192]	@ (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd8 <TIM_Base_SetConfig+0x140>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <TIM_Base_SetConfig+0x144>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce0 <TIM_Base_SetConfig+0x148>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce4 <TIM_Base_SetConfig+0x14c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce8 <TIM_Base_SetConfig+0x150>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <TIM_Base_SetConfig+0x154>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a10      	ldr	r2, [pc, #64]	@ (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0xf8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800
 8003ce4:	40001800 	.word	0x40001800
 8003ce8:	40001c00 	.word	0x40001c00
 8003cec:	40002000 	.word	0x40002000

08003cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e05a      	b.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a21      	ldr	r2, [pc, #132]	@ (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d022      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d54:	d01d      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d018      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a18      	ldr	r2, [pc, #96]	@ (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a17      	ldr	r2, [pc, #92]	@ (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a15      	ldr	r2, [pc, #84]	@ (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10c      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40010400 	.word	0x40010400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40001800 	.word	0x40001800

08003de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e042      	b.n	8003ea8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd feb8 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	@ 0x24
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 ff37 	bl	8004cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	@ 0x30
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d156      	bne.n	8003f78 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_UART_Transmit_DMA+0x26>
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e04f      	b.n	8003f7a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	88fa      	ldrh	r2, [r7, #6]
 8003ee4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	88fa      	ldrh	r2, [r7, #6]
 8003eea:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2221      	movs	r2, #33	@ 0x21
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	4a21      	ldr	r2, [pc, #132]	@ (8003f84 <HAL_UART_Transmit_DMA+0xd4>)
 8003f00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f06:	4a20      	ldr	r2, [pc, #128]	@ (8003f88 <HAL_UART_Transmit_DMA+0xd8>)
 8003f08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <HAL_UART_Transmit_DMA+0xdc>)
 8003f10:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	2200      	movs	r2, #0
 8003f18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	461a      	mov	r2, r3
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	f7fe fa9d 	bl	8002470 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f60:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6a39      	ldr	r1, [r7, #32]
 8003f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3730      	adds	r7, #48	@ 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	08004555 	.word	0x08004555
 8003f88:	080045ef 	.word	0x080045ef
 8003f8c:	08004773 	.word	0x08004773

08003f90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d112      	bne.n	8003fd0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_Receive_DMA+0x26>
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00b      	b.n	8003fd2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fc1e 	bl	8004808 <UART_Start_Receive_DMA>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	e000      	b.n	8003fd2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b0ba      	sub	sp, #232	@ 0xe8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800401a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fd85 	bl	8004b4a <UART_Receive_IT>
      return;
 8004040:	e25b      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80de 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
 800404c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800405c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80d1 	beq.w	8004208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
 8004072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
 8004096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
 80040ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d011      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f043 0208 	orr.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 81f2 	beq.w	80044f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
 8004118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fd10 	bl	8004b4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b40      	cmp	r3, #64	@ 0x40
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_UART_IRQHandler+0x17a>
 800414e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04f      	beq.n	80041f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fc18 	bl	800498c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d141      	bne.n	80041ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004196:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800419a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1d9      	bne.n	800416a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d013      	beq.n	80041e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	4a7e      	ldr	r2, [pc, #504]	@ (80043bc <HAL_UART_IRQHandler+0x3e0>)
 80041c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fa18 	bl	8002600 <HAL_DMA_Abort_IT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e0:	4610      	mov	r0, r2
 80041e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00e      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f99e 	bl	8004528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e00a      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f99a 	bl	8004528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e006      	b.n	8004204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f996 	bl	8004528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004202:	e175      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	bf00      	nop
    return;
 8004206:	e173      	b.n	80044f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	2b01      	cmp	r3, #1
 800420e:	f040 814f 	bne.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8148 	beq.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8141 	beq.w	80044b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	f040 80b6 	bne.w	80043c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8145 	beq.w	80044f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800426e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004272:	429a      	cmp	r2, r3
 8004274:	f080 813e 	bcs.w	80044f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800427e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428a:	f000 8088 	beq.w	800439e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1d9      	bne.n	800428e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3314      	adds	r3, #20
 80042e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3314      	adds	r3, #20
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e1      	bne.n	80042da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3314      	adds	r3, #20
 800431c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800433a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800433c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800436c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004380:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004382:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004386:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800438e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e3      	bne.n	800435c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe f8c1 	bl	8002520 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8c1 	bl	800453c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ba:	e09b      	b.n	80044f4 <HAL_UART_IRQHandler+0x518>
 80043bc:	08004a53 	.word	0x08004a53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 808e 	beq.w	80044f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8089 	beq.w	80044f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800440a:	647a      	str	r2, [r7, #68]	@ 0x44
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	623b      	str	r3, [r7, #32]
   return(result);
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004442:	633a      	str	r2, [r7, #48]	@ 0x30
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e3      	bne.n	800441e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	60fb      	str	r3, [r7, #12]
   return(result);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0310 	bic.w	r3, r3, #16
 800447a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004488:	61fa      	str	r2, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	617b      	str	r3, [r7, #20]
   return(result);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e3      	bne.n	8004464 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f847 	bl	800453c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044ae:	e023      	b.n	80044f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_UART_IRQHandler+0x4f4>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fad6 	bl	8004a7a <UART_Transmit_IT>
    return;
 80044ce:	e014      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <HAL_UART_IRQHandler+0x51e>
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fb16 	bl	8004b1a <UART_EndTransmit_IT>
    return;
 80044ee:	e004      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
    return;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
      return;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_UART_IRQHandler+0x51e>
      return;
 80044f8:	bf00      	nop
  }
}
 80044fa:	37e8      	adds	r7, #232	@ 0xe8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b090      	sub	sp, #64	@ 0x40
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d137      	bne.n	80045e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004572:	2200      	movs	r2, #0
 8004574:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	623b      	str	r3, [r7, #32]
   return(result);
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800458c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800458e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004596:	633a      	str	r2, [r7, #48]	@ 0x30
 8004598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800459c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e5      	bne.n	8004576 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ca:	61fa      	str	r2, [r7, #28]
 80045cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	617b      	str	r3, [r7, #20]
   return(result);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045de:	e002      	b.n	80045e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80045e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80045e2:	f7fc fa6f 	bl	8000ac4 <HAL_UART_TxCpltCallback>
}
 80045e6:	bf00      	nop
 80045e8:	3740      	adds	r7, #64	@ 0x40
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ff7f 	bl	8004500 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b09c      	sub	sp, #112	@ 0x70
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d172      	bne.n	800470c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004628:	2200      	movs	r2, #0
 800462a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800463c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800463e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004642:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800464c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800464e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004652:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800465a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e5      	bne.n	800462c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3314      	adds	r3, #20
 8004666:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	667b      	str	r3, [r7, #100]	@ 0x64
 8004678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3314      	adds	r3, #20
 800467e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004680:	647a      	str	r2, [r7, #68]	@ 0x44
 8004682:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800468e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	623b      	str	r3, [r7, #32]
   return(result);
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d119      	bne.n	800470c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0310 	bic.w	r3, r3, #16
 80046ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	330c      	adds	r3, #12
 80046f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80046f8:	61fa      	str	r2, [r7, #28]
 80046fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69b9      	ldr	r1, [r7, #24]
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	617b      	str	r3, [r7, #20]
   return(result);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800470c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800470e:	2200      	movs	r2, #0
 8004710:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	2b01      	cmp	r3, #1
 8004718:	d106      	bne.n	8004728 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800471a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800471e:	4619      	mov	r1, r3
 8004720:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004722:	f7ff ff0b 	bl	800453c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004726:	e002      	b.n	800472e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004728:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800472a:	f7fc f9ef 	bl	8000b0c <HAL_UART_RxCpltCallback>
}
 800472e:	bf00      	nop
 8004730:	3770      	adds	r7, #112	@ 0x70
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	2b01      	cmp	r3, #1
 8004750:	d108      	bne.n	8004764 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	b29b      	uxth	r3, r3
 800475a:	4619      	mov	r1, r3
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff feed 	bl	800453c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004762:	e002      	b.n	800476a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff fed5 	bl	8004514 <HAL_UART_RxHalfCpltCallback>
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	2b80      	cmp	r3, #128	@ 0x80
 8004790:	bf0c      	ite	eq
 8004792:	2301      	moveq	r3, #1
 8004794:	2300      	movne	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b21      	cmp	r3, #33	@ 0x21
 80047a4:	d108      	bne.n	80047b8 <UART_DMAError+0x46>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80047b2:	68b8      	ldr	r0, [r7, #8]
 80047b4:	f000 f8c2 	bl	800493c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b40      	cmp	r3, #64	@ 0x40
 80047c4:	bf0c      	ite	eq
 80047c6:	2301      	moveq	r3, #1
 80047c8:	2300      	movne	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b22      	cmp	r3, #34	@ 0x22
 80047d8:	d108      	bne.n	80047ec <UART_DMAError+0x7a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80047e6:	68b8      	ldr	r0, [r7, #8]
 80047e8:	f000 f8d0 	bl	800498c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f0:	f043 0210 	orr.w	r2, r3, #16
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047f8:	68b8      	ldr	r0, [r7, #8]
 80047fa:	f7ff fe95 	bl	8004528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b098      	sub	sp, #96	@ 0x60
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2222      	movs	r2, #34	@ 0x22
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	4a3e      	ldr	r2, [pc, #248]	@ (8004930 <UART_Start_Receive_DMA+0x128>)
 8004836:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	4a3d      	ldr	r2, [pc, #244]	@ (8004934 <UART_Start_Receive_DMA+0x12c>)
 800483e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004844:	4a3c      	ldr	r2, [pc, #240]	@ (8004938 <UART_Start_Receive_DMA+0x130>)
 8004846:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	2200      	movs	r2, #0
 800484e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004850:	f107 0308 	add.w	r3, r7, #8
 8004854:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3304      	adds	r3, #4
 8004860:	4619      	mov	r1, r3
 8004862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	f7fd fe02 	bl	8002470 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d019      	beq.n	80048be <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800489a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800489c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048aa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80048ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80048b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3314      	adds	r3, #20
 80048c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3314      	adds	r3, #20
 80048dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048de:	63ba      	str	r2, [r7, #56]	@ 0x38
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80048e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e5      	bne.n	80048be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	617b      	str	r3, [r7, #20]
   return(result);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004908:	653b      	str	r3, [r7, #80]	@ 0x50
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3314      	adds	r3, #20
 8004910:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004912:	627a      	str	r2, [r7, #36]	@ 0x24
 8004914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	6a39      	ldr	r1, [r7, #32]
 8004918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e5      	bne.n	80048f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3760      	adds	r7, #96	@ 0x60
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	0800460b 	.word	0x0800460b
 8004934:	08004737 	.word	0x08004737
 8004938:	08004773 	.word	0x08004773

0800493c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	@ 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	60bb      	str	r3, [r7, #8]
   return(result);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	61ba      	str	r2, [r7, #24]
 8004966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6979      	ldr	r1, [r7, #20]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	613b      	str	r3, [r7, #16]
   return(result);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e5      	bne.n	8004944 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004980:	bf00      	nop
 8004982:	3724      	adds	r7, #36	@ 0x24
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800498c:	b480      	push	{r7}
 800498e:	b095      	sub	sp, #84	@ 0x54
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80049b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d119      	bne.n	8004a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f023 0310 	bic.w	r3, r3, #16
 8004a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a24:	61ba      	str	r2, [r7, #24]
 8004a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6979      	ldr	r1, [r7, #20]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	613b      	str	r3, [r7, #16]
   return(result);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e5      	bne.n	8004a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a46:	bf00      	nop
 8004a48:	3754      	adds	r7, #84	@ 0x54
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fd5b 	bl	8004528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b21      	cmp	r3, #33	@ 0x21
 8004a8c:	d13e      	bne.n	8004b0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a96:	d114      	bne.n	8004ac2 <UART_Transmit_IT+0x48>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d110      	bne.n	8004ac2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	1c9a      	adds	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	621a      	str	r2, [r3, #32]
 8004ac0:	e008      	b.n	8004ad4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	1c59      	adds	r1, r3, #1
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6211      	str	r1, [r2, #32]
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10f      	bne.n	8004b08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004af6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
  }
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fb ffc2 	bl	8000ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b08c      	sub	sp, #48	@ 0x30
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b22      	cmp	r3, #34	@ 0x22
 8004b5c:	f040 80ae 	bne.w	8004cbc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b68:	d117      	bne.n	8004b9a <UART_Receive_IT+0x50>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d113      	bne.n	8004b9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	1c9a      	adds	r2, r3, #2
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b98:	e026      	b.n	8004be8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bac:	d007      	beq.n	8004bbe <UART_Receive_IT+0x74>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <UART_Receive_IT+0x82>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	e008      	b.n	8004bde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d15d      	bne.n	8004cb8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0220 	bic.w	r2, r2, #32
 8004c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d135      	bne.n	8004cae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	613b      	str	r3, [r7, #16]
   return(result);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f023 0310 	bic.w	r3, r3, #16
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c68:	623a      	str	r2, [r7, #32]
 8004c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	69f9      	ldr	r1, [r7, #28]
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e5      	bne.n	8004c48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d10a      	bne.n	8004ca0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fc48 	bl	800453c <HAL_UARTEx_RxEventCallback>
 8004cac:	e002      	b.n	8004cb4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fb ff2c 	bl	8000b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e002      	b.n	8004cbe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3730      	adds	r7, #48	@ 0x30
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ccc:	b0c0      	sub	sp, #256	@ 0x100
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	68d9      	ldr	r1, [r3, #12]
 8004ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	ea40 0301 	orr.w	r3, r0, r1
 8004cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d20:	f021 010c 	bic.w	r1, r1, #12
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d42:	6999      	ldr	r1, [r3, #24]
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	ea40 0301 	orr.w	r3, r0, r1
 8004d4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b8f      	ldr	r3, [pc, #572]	@ (8004f94 <UART_SetConfig+0x2cc>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d005      	beq.n	8004d68 <UART_SetConfig+0xa0>
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b8d      	ldr	r3, [pc, #564]	@ (8004f98 <UART_SetConfig+0x2d0>)
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d104      	bne.n	8004d72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d68:	f7fe fd2a 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8004d6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d70:	e003      	b.n	8004d7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d72:	f7fe fd11 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8004d76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d84:	f040 810c 	bne.w	8004fa0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d9a:	4622      	mov	r2, r4
 8004d9c:	462b      	mov	r3, r5
 8004d9e:	1891      	adds	r1, r2, r2
 8004da0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004da2:	415b      	adcs	r3, r3
 8004da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004daa:	4621      	mov	r1, r4
 8004dac:	eb12 0801 	adds.w	r8, r2, r1
 8004db0:	4629      	mov	r1, r5
 8004db2:	eb43 0901 	adc.w	r9, r3, r1
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dca:	4690      	mov	r8, r2
 8004dcc:	4699      	mov	r9, r3
 8004dce:	4623      	mov	r3, r4
 8004dd0:	eb18 0303 	adds.w	r3, r8, r3
 8004dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dd8:	462b      	mov	r3, r5
 8004dda:	eb49 0303 	adc.w	r3, r9, r3
 8004dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004df6:	460b      	mov	r3, r1
 8004df8:	18db      	adds	r3, r3, r3
 8004dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	eb42 0303 	adc.w	r3, r2, r3
 8004e02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e0c:	f7fb fce2 	bl	80007d4 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4b61      	ldr	r3, [pc, #388]	@ (8004f9c <UART_SetConfig+0x2d4>)
 8004e16:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	011c      	lsls	r4, r3, #4
 8004e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	1891      	adds	r1, r2, r2
 8004e36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e38:	415b      	adcs	r3, r3
 8004e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e40:	4641      	mov	r1, r8
 8004e42:	eb12 0a01 	adds.w	sl, r2, r1
 8004e46:	4649      	mov	r1, r9
 8004e48:	eb43 0b01 	adc.w	fp, r3, r1
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e60:	4692      	mov	sl, r2
 8004e62:	469b      	mov	fp, r3
 8004e64:	4643      	mov	r3, r8
 8004e66:	eb1a 0303 	adds.w	r3, sl, r3
 8004e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	eb4b 0303 	adc.w	r3, fp, r3
 8004e74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	18db      	adds	r3, r3, r3
 8004e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e92:	4613      	mov	r3, r2
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ea2:	f7fb fc97 	bl	80007d4 <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4b3b      	ldr	r3, [pc, #236]	@ (8004f9c <UART_SetConfig+0x2d4>)
 8004eae:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2264      	movs	r2, #100	@ 0x64
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	1acb      	subs	r3, r1, r3
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ec2:	4b36      	ldr	r3, [pc, #216]	@ (8004f9c <UART_SetConfig+0x2d4>)
 8004ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ed0:	441c      	add	r4, r3
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004edc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ee0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004eec:	415b      	adcs	r3, r3
 8004eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	1851      	adds	r1, r2, r1
 8004ef8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004efa:	4649      	mov	r1, r9
 8004efc:	414b      	adcs	r3, r1
 8004efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4651      	mov	r1, sl
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4642      	mov	r2, r8
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f28:	464b      	mov	r3, r9
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f48:	460b      	mov	r3, r1
 8004f4a:	18db      	adds	r3, r3, r3
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f4e:	4613      	mov	r3, r2
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f5e:	f7fb fc39 	bl	80007d4 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <UART_SetConfig+0x2d4>)
 8004f68:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2164      	movs	r1, #100	@ 0x64
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	3332      	adds	r3, #50	@ 0x32
 8004f7a:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <UART_SetConfig+0x2d4>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	f003 0207 	and.w	r2, r3, #7
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4422      	add	r2, r4
 8004f8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f90:	e106      	b.n	80051a0 <UART_SetConfig+0x4d8>
 8004f92:	bf00      	nop
 8004f94:	40011000 	.word	0x40011000
 8004f98:	40011400 	.word	0x40011400
 8004f9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004faa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fb2:	4642      	mov	r2, r8
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	1891      	adds	r1, r2, r2
 8004fb8:	6239      	str	r1, [r7, #32]
 8004fba:	415b      	adcs	r3, r3
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	1854      	adds	r4, r2, r1
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	eb43 0501 	adc.w	r5, r3, r1
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	00eb      	lsls	r3, r5, #3
 8004fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fda:	00e2      	lsls	r2, r4, #3
 8004fdc:	4614      	mov	r4, r2
 8004fde:	461d      	mov	r5, r3
 8004fe0:	4643      	mov	r3, r8
 8004fe2:	18e3      	adds	r3, r4, r3
 8004fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fe8:	464b      	mov	r3, r9
 8004fea:	eb45 0303 	adc.w	r3, r5, r3
 8004fee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ffe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800500e:	4629      	mov	r1, r5
 8005010:	008b      	lsls	r3, r1, #2
 8005012:	4621      	mov	r1, r4
 8005014:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005018:	4621      	mov	r1, r4
 800501a:	008a      	lsls	r2, r1, #2
 800501c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005020:	f7fb fbd8 	bl	80007d4 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4b60      	ldr	r3, [pc, #384]	@ (80051ac <UART_SetConfig+0x4e4>)
 800502a:	fba3 2302 	umull	r2, r3, r3, r2
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	011c      	lsls	r4, r3, #4
 8005032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800503c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005040:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005044:	4642      	mov	r2, r8
 8005046:	464b      	mov	r3, r9
 8005048:	1891      	adds	r1, r2, r2
 800504a:	61b9      	str	r1, [r7, #24]
 800504c:	415b      	adcs	r3, r3
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005054:	4641      	mov	r1, r8
 8005056:	1851      	adds	r1, r2, r1
 8005058:	6139      	str	r1, [r7, #16]
 800505a:	4649      	mov	r1, r9
 800505c:	414b      	adcs	r3, r1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800506c:	4659      	mov	r1, fp
 800506e:	00cb      	lsls	r3, r1, #3
 8005070:	4651      	mov	r1, sl
 8005072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005076:	4651      	mov	r1, sl
 8005078:	00ca      	lsls	r2, r1, #3
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	4603      	mov	r3, r0
 8005080:	4642      	mov	r2, r8
 8005082:	189b      	adds	r3, r3, r2
 8005084:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005088:	464b      	mov	r3, r9
 800508a:	460a      	mov	r2, r1
 800508c:	eb42 0303 	adc.w	r3, r2, r3
 8005090:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800509e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050ac:	4649      	mov	r1, r9
 80050ae:	008b      	lsls	r3, r1, #2
 80050b0:	4641      	mov	r1, r8
 80050b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b6:	4641      	mov	r1, r8
 80050b8:	008a      	lsls	r2, r1, #2
 80050ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050be:	f7fb fb89 	bl	80007d4 <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	4b38      	ldr	r3, [pc, #224]	@ (80051ac <UART_SetConfig+0x4e4>)
 80050ca:	fba3 2301 	umull	r2, r3, r3, r1
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	2264      	movs	r2, #100	@ 0x64
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	1acb      	subs	r3, r1, r3
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	3332      	adds	r3, #50	@ 0x32
 80050dc:	4a33      	ldr	r2, [pc, #204]	@ (80051ac <UART_SetConfig+0x4e4>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050e8:	441c      	add	r4, r3
 80050ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ee:	2200      	movs	r2, #0
 80050f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80050f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80050f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	1891      	adds	r1, r2, r2
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	415b      	adcs	r3, r3
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005108:	4641      	mov	r1, r8
 800510a:	1851      	adds	r1, r2, r1
 800510c:	6039      	str	r1, [r7, #0]
 800510e:	4649      	mov	r1, r9
 8005110:	414b      	adcs	r3, r1
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005120:	4659      	mov	r1, fp
 8005122:	00cb      	lsls	r3, r1, #3
 8005124:	4651      	mov	r1, sl
 8005126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800512a:	4651      	mov	r1, sl
 800512c:	00ca      	lsls	r2, r1, #3
 800512e:	4610      	mov	r0, r2
 8005130:	4619      	mov	r1, r3
 8005132:	4603      	mov	r3, r0
 8005134:	4642      	mov	r2, r8
 8005136:	189b      	adds	r3, r3, r2
 8005138:	66bb      	str	r3, [r7, #104]	@ 0x68
 800513a:	464b      	mov	r3, r9
 800513c:	460a      	mov	r2, r1
 800513e:	eb42 0303 	adc.w	r3, r2, r3
 8005142:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	663b      	str	r3, [r7, #96]	@ 0x60
 800514e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800515c:	4649      	mov	r1, r9
 800515e:	008b      	lsls	r3, r1, #2
 8005160:	4641      	mov	r1, r8
 8005162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005166:	4641      	mov	r1, r8
 8005168:	008a      	lsls	r2, r1, #2
 800516a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800516e:	f7fb fb31 	bl	80007d4 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <UART_SetConfig+0x4e4>)
 8005178:	fba3 1302 	umull	r1, r3, r3, r2
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	2164      	movs	r1, #100	@ 0x64
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	3332      	adds	r3, #50	@ 0x32
 800518a:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <UART_SetConfig+0x4e4>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f003 020f 	and.w	r2, r3, #15
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4422      	add	r2, r4
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051a6:	46bd      	mov	sp, r7
 80051a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ac:	51eb851f 	.word	0x51eb851f

080051b0 <memset>:
 80051b0:	4402      	add	r2, r0
 80051b2:	4603      	mov	r3, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d100      	bne.n	80051ba <memset+0xa>
 80051b8:	4770      	bx	lr
 80051ba:	f803 1b01 	strb.w	r1, [r3], #1
 80051be:	e7f9      	b.n	80051b4 <memset+0x4>

080051c0 <__libc_init_array>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	4d0d      	ldr	r5, [pc, #52]	@ (80051f8 <__libc_init_array+0x38>)
 80051c4:	4c0d      	ldr	r4, [pc, #52]	@ (80051fc <__libc_init_array+0x3c>)
 80051c6:	1b64      	subs	r4, r4, r5
 80051c8:	10a4      	asrs	r4, r4, #2
 80051ca:	2600      	movs	r6, #0
 80051cc:	42a6      	cmp	r6, r4
 80051ce:	d109      	bne.n	80051e4 <__libc_init_array+0x24>
 80051d0:	4d0b      	ldr	r5, [pc, #44]	@ (8005200 <__libc_init_array+0x40>)
 80051d2:	4c0c      	ldr	r4, [pc, #48]	@ (8005204 <__libc_init_array+0x44>)
 80051d4:	f000 f818 	bl	8005208 <_init>
 80051d8:	1b64      	subs	r4, r4, r5
 80051da:	10a4      	asrs	r4, r4, #2
 80051dc:	2600      	movs	r6, #0
 80051de:	42a6      	cmp	r6, r4
 80051e0:	d105      	bne.n	80051ee <__libc_init_array+0x2e>
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
 80051e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e8:	4798      	blx	r3
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7ee      	b.n	80051cc <__libc_init_array+0xc>
 80051ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f2:	4798      	blx	r3
 80051f4:	3601      	adds	r6, #1
 80051f6:	e7f2      	b.n	80051de <__libc_init_array+0x1e>
 80051f8:	08005248 	.word	0x08005248
 80051fc:	08005248 	.word	0x08005248
 8005200:	08005248 	.word	0x08005248
 8005204:	0800524c 	.word	0x0800524c

08005208 <_init>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	bf00      	nop
 800520c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520e:	bc08      	pop	{r3}
 8005210:	469e      	mov	lr, r3
 8005212:	4770      	bx	lr

08005214 <_fini>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	bf00      	nop
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr
