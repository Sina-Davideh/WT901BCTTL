
stm32_smart_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080088b0  080088b0  000098b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008920  08008920  0000a184  2**0
                  CONTENTS
  4 .ARM          00000000  08008920  08008920  0000a184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008920  08008920  0000a184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008920  08008920  00009920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008924  08008924  00009924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08008928  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000184  08008aac  0000a184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  08008aac  0000a498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001082d  00000000  00000000  0000a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003037  00000000  00000000  0001a9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001da18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f0  00000000  00000000  0001e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019783  00000000  00000000  0001f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011eb8  00000000  00000000  000388cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e02  00000000  00000000  0004a783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  000d15c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d4a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08008898 	.word	0x08008898

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08008898 	.word	0x08008898

0800014c <HAL_UART_TxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, Receive_UART_Buffer, 11);
 8000154:	220b      	movs	r2, #11
 8000156:	4908      	ldr	r1, [pc, #32]	@ (8000178 <HAL_UART_TxCpltCallback+0x2c>)
 8000158:	4808      	ldr	r0, [pc, #32]	@ (800017c <HAL_UART_TxCpltCallback+0x30>)
 800015a:	f003 fa9a 	bl	8003692 <HAL_UART_Receive_IT>

	CDC_Transmit_FS(Receive_UART_Buffer, 11);
 800015e:	210b      	movs	r1, #11
 8000160:	4805      	ldr	r0, [pc, #20]	@ (8000178 <HAL_UART_TxCpltCallback+0x2c>)
 8000162:	f007 ff91 	bl	8008088 <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000166:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800016a:	4805      	ldr	r0, [pc, #20]	@ (8000180 <HAL_UART_TxCpltCallback+0x34>)
 800016c:	f000 ffc0 	bl	80010f0 <HAL_GPIO_TogglePin>
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	200002b0 	.word	0x200002b0
 800017c:	200001a0 	.word	0x200001a0
 8000180:	40011000 	.word	0x40011000

08000184 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){}
	HAL_UART_Receive_IT(&huart3, Receive_UART_Buffer, 11);
 800018c:	220b      	movs	r2, #11
 800018e:	4908      	ldr	r1, [pc, #32]	@ (80001b0 <HAL_UART_RxCpltCallback+0x2c>)
 8000190:	4808      	ldr	r0, [pc, #32]	@ (80001b4 <HAL_UART_RxCpltCallback+0x30>)
 8000192:	f003 fa7e 	bl	8003692 <HAL_UART_Receive_IT>

	CDC_Transmit_FS(Receive_UART_Buffer, 11);
 8000196:	210b      	movs	r1, #11
 8000198:	4805      	ldr	r0, [pc, #20]	@ (80001b0 <HAL_UART_RxCpltCallback+0x2c>)
 800019a:	f007 ff75 	bl	8008088 <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800019e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a2:	4805      	ldr	r0, [pc, #20]	@ (80001b8 <HAL_UART_RxCpltCallback+0x34>)
 80001a4:	f000 ffa4 	bl	80010f0 <HAL_GPIO_TogglePin>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	200002b0 	.word	0x200002b0
 80001b4:	200001a0 	.word	0x200001a0
 80001b8:	40011000 	.word	0x40011000

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c0:	f000 fa76 	bl	80006b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c4:	f000 f814 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c8:	f000 f8bc 	bl	8000344 <MX_GPIO_Init>
  MX_DMA_Init();
 80001cc:	f000 f894 	bl	80002f8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80001d0:	f007 fe92 	bl	8007ef8 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80001d4:	f000 f866 	bl	80002a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit_IT(&huart3, test_buf, 5);
 80001d8:	2205      	movs	r2, #5
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <main+0x2c>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <main+0x30>)
 80001de:	f003 fa23 	bl	8003628 <HAL_UART_Transmit_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e2:	bf00      	nop
 80001e4:	e7fd      	b.n	80001e2 <main+0x26>
 80001e6:	bf00      	nop
 80001e8:	20000000 	.word	0x20000000
 80001ec:	200001a0 	.word	0x200001a0

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	@ 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f008 fb10 	bl	8008824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000224:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fcd8 	bl	8002bfc <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000252:	f000 f8cf 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000266:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2102      	movs	r1, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f002 ff44 	bl	8003100 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027e:	f000 f8b9 	bl	80003f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000282:	2310      	movs	r3, #16
 8000284:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f003 f8c5 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000298:	f000 f8ac 	bl	80003f4 <Error_Handler>
  }
}
 800029c:	bf00      	nop
 800029e:	3750      	adds	r7, #80	@ 0x50
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002a8:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002aa:	4a12      	ldr	r2, [pc, #72]	@ (80002f4 <MX_USART3_UART_Init+0x50>)
 80002ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80002ae:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002ca:	220c      	movs	r2, #12
 80002cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002da:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002dc:	f003 f954 	bl	8003588 <HAL_UART_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002e6:	f000 f885 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	200001a0 	.word	0x200001a0
 80002f4:	40004800 	.word	0x40004800

080002f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002fe:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <MX_DMA_Init+0x48>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a0f      	ldr	r2, [pc, #60]	@ (8000340 <MX_DMA_Init+0x48>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <MX_DMA_Init+0x48>)
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000316:	2200      	movs	r2, #0
 8000318:	2100      	movs	r1, #0
 800031a:	200c      	movs	r0, #12
 800031c:	f000 fb01 	bl	8000922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000320:	200c      	movs	r0, #12
 8000322:	f000 fb1a 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2100      	movs	r1, #0
 800032a:	200d      	movs	r0, #13
 800032c:	f000 faf9 	bl	8000922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000330:	200d      	movs	r0, #13
 8000332:	f000 fb12 	bl	800095a <HAL_NVIC_EnableIRQ>

}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b24      	ldr	r3, [pc, #144]	@ (80003ec <MX_GPIO_Init+0xa8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a23      	ldr	r2, [pc, #140]	@ (80003ec <MX_GPIO_Init+0xa8>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b21      	ldr	r3, [pc, #132]	@ (80003ec <MX_GPIO_Init+0xa8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a1d      	ldr	r2, [pc, #116]	@ (80003ec <MX_GPIO_Init+0xa8>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a17      	ldr	r2, [pc, #92]	@ (80003ec <MX_GPIO_Init+0xa8>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <MX_GPIO_Init+0xa8>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_GPIO_Init+0xa8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003be:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <MX_GPIO_Init+0xac>)
 80003c0:	f000 fe7e 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <MX_GPIO_Init+0xac>)
 80003de:	f000 fceb 	bl	8000db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40011000 	.word	0x40011000

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <Error_Handler+0x8>

08000400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <HAL_MspInit+0x54>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a12      	ldr	r2, [pc, #72]	@ (8000454 <HAL_MspInit+0x54>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <HAL_MspInit+0x54>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <HAL_MspInit+0x54>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a0c      	ldr	r2, [pc, #48]	@ (8000454 <HAL_MspInit+0x54>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <HAL_MspInit+0x54>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <HAL_MspInit+0x58>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <HAL_MspInit+0x58>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a47      	ldr	r2, [pc, #284]	@ (8000594 <HAL_UART_MspInit+0x138>)
 8000478:	4293      	cmp	r3, r2
 800047a:	f040 8086 	bne.w	800058a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800047e:	4b46      	ldr	r3, [pc, #280]	@ (8000598 <HAL_UART_MspInit+0x13c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a45      	ldr	r2, [pc, #276]	@ (8000598 <HAL_UART_MspInit+0x13c>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b43      	ldr	r3, [pc, #268]	@ (8000598 <HAL_UART_MspInit+0x13c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b40      	ldr	r3, [pc, #256]	@ (8000598 <HAL_UART_MspInit+0x13c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a3f      	ldr	r2, [pc, #252]	@ (8000598 <HAL_UART_MspInit+0x13c>)
 800049c:	f043 0308 	orr.w	r3, r3, #8
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000598 <HAL_UART_MspInit+0x13c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0308 	and.w	r3, r3, #8
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b4:	2302      	movs	r3, #2
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b8:	2303      	movs	r3, #3
 80004ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4836      	ldr	r0, [pc, #216]	@ (800059c <HAL_UART_MspInit+0x140>)
 80004c4:	f000 fc78 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	482f      	ldr	r0, [pc, #188]	@ (800059c <HAL_UART_MspInit+0x140>)
 80004de:	f000 fc6b 	bl	8000db8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80004e2:	4b2f      	ldr	r3, [pc, #188]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 80004e4:	4a2f      	ldr	r2, [pc, #188]	@ (80005a4 <HAL_UART_MspInit+0x148>)
 80004e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004e8:	4b2d      	ldr	r3, [pc, #180]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004ee:	4b2c      	ldr	r3, [pc, #176]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004f4:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 80004f6:	2280      	movs	r2, #128	@ 0x80
 80004f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004fa:	4b29      	ldr	r3, [pc, #164]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000500:	4b27      	ldr	r3, [pc, #156]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000506:	4b26      	ldr	r3, [pc, #152]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800050c:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000512:	4823      	ldr	r0, [pc, #140]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 8000514:	f000 fa3c 	bl	8000990 <HAL_DMA_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800051e:	f7ff ff69 	bl	80003f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a1e      	ldr	r2, [pc, #120]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 8000526:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000528:	4a1d      	ldr	r2, [pc, #116]	@ (80005a0 <HAL_UART_MspInit+0x144>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800052e:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000530:	4a1e      	ldr	r2, [pc, #120]	@ (80005ac <HAL_UART_MspInit+0x150>)
 8000532:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000534:	4b1c      	ldr	r3, [pc, #112]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000536:	2210      	movs	r2, #16
 8000538:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800053a:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000542:	2280      	movs	r2, #128	@ 0x80
 8000544:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000546:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800055e:	4812      	ldr	r0, [pc, #72]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000560:	f000 fa16 	bl	8000990 <HAL_DMA_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800056a:	f7ff ff43 	bl	80003f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000572:	639a      	str	r2, [r3, #56]	@ 0x38
 8000574:	4a0c      	ldr	r2, [pc, #48]	@ (80005a8 <HAL_UART_MspInit+0x14c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2027      	movs	r0, #39	@ 0x27
 8000580:	f000 f9cf 	bl	8000922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000584:	2027      	movs	r0, #39	@ 0x27
 8000586:	f000 f9e8 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40004800 	.word	0x40004800
 8000598:	40021000 	.word	0x40021000
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	200001e8 	.word	0x200001e8
 80005a4:	40020030 	.word	0x40020030
 80005a8:	2000022c 	.word	0x2000022c
 80005ac:	4002001c 	.word	0x4002001c

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <NMI_Handler+0x4>

080005b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <MemManage_Handler+0x4>

080005c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f89c 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <DMA1_Channel2_IRQHandler+0x10>)
 800060e:	f000 facd 	bl	8000bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000022c 	.word	0x2000022c

0800061c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000620:	4802      	ldr	r0, [pc, #8]	@ (800062c <DMA1_Channel3_IRQHandler+0x10>)
 8000622:	f000 fac3 	bl	8000bac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200001e8 	.word	0x200001e8

08000630 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000634:	4802      	ldr	r0, [pc, #8]	@ (8000640 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000636:	f000 fe99 	bl	800136c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000f88 	.word	0x20000f88

08000644 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000648:	4802      	ldr	r0, [pc, #8]	@ (8000654 <USART3_IRQHandler+0x10>)
 800064a:	f003 f847 	bl	80036dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200001a0 	.word	0x200001a0

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000664:	f7ff fff8 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800066a:	490c      	ldr	r1, [pc, #48]	@ (800069c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800066c:	4a0c      	ldr	r2, [pc, #48]	@ (80006a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a09      	ldr	r2, [pc, #36]	@ (80006a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000680:	4c09      	ldr	r4, [pc, #36]	@ (80006a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f008 f8d1 	bl	8008834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fd93 	bl	80001bc <main>
  bx lr
 8000696:	4770      	bx	lr
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80006a0:	08008928 	.word	0x08008928
  ldr r2, =_sbss
 80006a4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80006a8:	20001498 	.word	0x20001498

080006ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_2_IRQHandler>
	...

080006b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <HAL_Init+0x28>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <HAL_Init+0x28>)
 80006ba:	f043 0310 	orr.w	r3, r3, #16
 80006be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f923 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c6:	200f      	movs	r0, #15
 80006c8:	f000 f808 	bl	80006dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006cc:	f7ff fe98 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HAL_InitTick+0x54>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <HAL_InitTick+0x58>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f93b 	bl	8000976 <HAL_SYSTICK_Config>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e00e      	b.n	8000728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d80a      	bhi.n	8000726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000710:	2200      	movs	r2, #0
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	f04f 30ff 	mov.w	r0, #4294967295
 8000718:	f000 f903 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800071c:	4a06      	ldr	r2, [pc, #24]	@ (8000738 <HAL_InitTick+0x5c>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000008 	.word	0x20000008
 8000734:	20000010 	.word	0x20000010
 8000738:	2000000c 	.word	0x2000000c

0800073c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <HAL_IncTick+0x1c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <HAL_IncTick+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a03      	ldr	r2, [pc, #12]	@ (800075c <HAL_IncTick+0x20>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000010 	.word	0x20000010
 800075c:	200002bc 	.word	0x200002bc

08000760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b02      	ldr	r3, [pc, #8]	@ (8000770 <HAL_GetTick+0x10>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	200002bc 	.word	0x200002bc

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4906      	ldr	r1, [pc, #24]	@ (800080c <__NVIC_EnableIRQ+0x34>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	@ (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	@ (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	@ 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	@ 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff90 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	@ (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff2d 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff42 	bl	80007bc <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff90 	bl	8000864 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff35 	bl	80007d8 <__NVIC_EnableIRQ>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffa2 	bl	80008c8 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d101      	bne.n	80009a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e043      	b.n	8000a2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <HAL_DMA_Init+0xa8>)
 80009ae:	4413      	add	r3, r2
 80009b0:	4a22      	ldr	r2, [pc, #136]	@ (8000a3c <HAL_DMA_Init+0xac>)
 80009b2:	fba2 2303 	umull	r2, r3, r2, r3
 80009b6:	091b      	lsrs	r3, r3, #4
 80009b8:	009a      	lsls	r2, r3, #2
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <HAL_DMA_Init+0xb0>)
 80009c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2202      	movs	r2, #2
 80009c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80009da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80009de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	bffdfff8 	.word	0xbffdfff8
 8000a3c:	cccccccd 	.word	0xcccccccd
 8000a40:	40020000 	.word	0x40020000

08000a44 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d008      	beq.n	8000a6e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2204      	movs	r2, #4
 8000a60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e020      	b.n	8000ab0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 020e 	bic.w	r2, r2, #14
 8000a7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0201 	bic.w	r2, r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a96:	2101      	movs	r1, #1
 8000a98:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d005      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	e051      	b.n	8000b84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 020e 	bic.w	r2, r2, #14
 8000aee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0201 	bic.w	r2, r2, #1
 8000afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <HAL_DMA_Abort_IT+0xd4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d029      	beq.n	8000b5e <HAL_DMA_Abort_IT+0xa2>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a21      	ldr	r2, [pc, #132]	@ (8000b94 <HAL_DMA_Abort_IT+0xd8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d022      	beq.n	8000b5a <HAL_DMA_Abort_IT+0x9e>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1f      	ldr	r2, [pc, #124]	@ (8000b98 <HAL_DMA_Abort_IT+0xdc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d01a      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x98>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <HAL_DMA_Abort_IT+0xe0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d012      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x92>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <HAL_DMA_Abort_IT+0xe4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00a      	beq.n	8000b48 <HAL_DMA_Abort_IT+0x8c>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <HAL_DMA_Abort_IT+0xe8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d102      	bne.n	8000b42 <HAL_DMA_Abort_IT+0x86>
 8000b3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b40:	e00e      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b46:	e00b      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4c:	e008      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	e005      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b58:	e002      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b5a:	2310      	movs	r3, #16
 8000b5c:	e000      	b.n	8000b60 <HAL_DMA_Abort_IT+0xa4>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <HAL_DMA_Abort_IT+0xec>)
 8000b62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	4798      	blx	r3
    } 
  }
  return status;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40020008 	.word	0x40020008
 8000b94:	4002001c 	.word	0x4002001c
 8000b98:	40020030 	.word	0x40020030
 8000b9c:	40020044 	.word	0x40020044
 8000ba0:	40020058 	.word	0x40020058
 8000ba4:	4002006c 	.word	0x4002006c
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	2204      	movs	r2, #4
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d04f      	beq.n	8000c74 <HAL_DMA_IRQHandler+0xc8>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d04a      	beq.n	8000c74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d107      	bne.n	8000bfc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0204 	bic.w	r2, r2, #4
 8000bfa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a66      	ldr	r2, [pc, #408]	@ (8000d9c <HAL_DMA_IRQHandler+0x1f0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d029      	beq.n	8000c5a <HAL_DMA_IRQHandler+0xae>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a65      	ldr	r2, [pc, #404]	@ (8000da0 <HAL_DMA_IRQHandler+0x1f4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d022      	beq.n	8000c56 <HAL_DMA_IRQHandler+0xaa>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a63      	ldr	r2, [pc, #396]	@ (8000da4 <HAL_DMA_IRQHandler+0x1f8>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d01a      	beq.n	8000c50 <HAL_DMA_IRQHandler+0xa4>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a62      	ldr	r2, [pc, #392]	@ (8000da8 <HAL_DMA_IRQHandler+0x1fc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d012      	beq.n	8000c4a <HAL_DMA_IRQHandler+0x9e>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a60      	ldr	r2, [pc, #384]	@ (8000dac <HAL_DMA_IRQHandler+0x200>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d00a      	beq.n	8000c44 <HAL_DMA_IRQHandler+0x98>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a5f      	ldr	r2, [pc, #380]	@ (8000db0 <HAL_DMA_IRQHandler+0x204>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d102      	bne.n	8000c3e <HAL_DMA_IRQHandler+0x92>
 8000c38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c3c:	e00e      	b.n	8000c5c <HAL_DMA_IRQHandler+0xb0>
 8000c3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000c42:	e00b      	b.n	8000c5c <HAL_DMA_IRQHandler+0xb0>
 8000c44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c48:	e008      	b.n	8000c5c <HAL_DMA_IRQHandler+0xb0>
 8000c4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c4e:	e005      	b.n	8000c5c <HAL_DMA_IRQHandler+0xb0>
 8000c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c54:	e002      	b.n	8000c5c <HAL_DMA_IRQHandler+0xb0>
 8000c56:	2340      	movs	r3, #64	@ 0x40
 8000c58:	e000      	b.n	8000c5c <HAL_DMA_IRQHandler+0xb0>
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	4a55      	ldr	r2, [pc, #340]	@ (8000db4 <HAL_DMA_IRQHandler+0x208>)
 8000c5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 8094 	beq.w	8000d92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c72:	e08e      	b.n	8000d92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	2202      	movs	r2, #2
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d056      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x186>
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d051      	beq.n	8000d32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0320 	and.w	r3, r3, #32
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10b      	bne.n	8000cb4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 020a 	bic.w	r2, r2, #10
 8000caa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a38      	ldr	r2, [pc, #224]	@ (8000d9c <HAL_DMA_IRQHandler+0x1f0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d029      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x166>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a37      	ldr	r2, [pc, #220]	@ (8000da0 <HAL_DMA_IRQHandler+0x1f4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d022      	beq.n	8000d0e <HAL_DMA_IRQHandler+0x162>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a35      	ldr	r2, [pc, #212]	@ (8000da4 <HAL_DMA_IRQHandler+0x1f8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d01a      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x15c>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a34      	ldr	r2, [pc, #208]	@ (8000da8 <HAL_DMA_IRQHandler+0x1fc>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d012      	beq.n	8000d02 <HAL_DMA_IRQHandler+0x156>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a32      	ldr	r2, [pc, #200]	@ (8000dac <HAL_DMA_IRQHandler+0x200>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00a      	beq.n	8000cfc <HAL_DMA_IRQHandler+0x150>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a31      	ldr	r2, [pc, #196]	@ (8000db0 <HAL_DMA_IRQHandler+0x204>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d102      	bne.n	8000cf6 <HAL_DMA_IRQHandler+0x14a>
 8000cf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000cf4:	e00e      	b.n	8000d14 <HAL_DMA_IRQHandler+0x168>
 8000cf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000cfa:	e00b      	b.n	8000d14 <HAL_DMA_IRQHandler+0x168>
 8000cfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d00:	e008      	b.n	8000d14 <HAL_DMA_IRQHandler+0x168>
 8000d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d06:	e005      	b.n	8000d14 <HAL_DMA_IRQHandler+0x168>
 8000d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d0c:	e002      	b.n	8000d14 <HAL_DMA_IRQHandler+0x168>
 8000d0e:	2320      	movs	r3, #32
 8000d10:	e000      	b.n	8000d14 <HAL_DMA_IRQHandler+0x168>
 8000d12:	2302      	movs	r3, #2
 8000d14:	4a27      	ldr	r2, [pc, #156]	@ (8000db4 <HAL_DMA_IRQHandler+0x208>)
 8000d16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d034      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d30:	e02f      	b.n	8000d92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	2208      	movs	r2, #8
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d028      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x1e8>
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d023      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 020e 	bic.w	r2, r2, #14
 8000d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d64:	2101      	movs	r1, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	4798      	blx	r3
    }
  }
  return;
 8000d92:	bf00      	nop
 8000d94:	bf00      	nop
}
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020008 	.word	0x40020008
 8000da0:	4002001c 	.word	0x4002001c
 8000da4:	40020030 	.word	0x40020030
 8000da8:	40020044 	.word	0x40020044
 8000dac:	40020058 	.word	0x40020058
 8000db0:	4002006c 	.word	0x4002006c
 8000db4:	40020000 	.word	0x40020000

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b08b      	sub	sp, #44	@ 0x2c
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	e169      	b.n	80010a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8158 	bne.w	800109a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4a9a      	ldr	r2, [pc, #616]	@ (8001058 <HAL_GPIO_Init+0x2a0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d05e      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000df4:	4a98      	ldr	r2, [pc, #608]	@ (8001058 <HAL_GPIO_Init+0x2a0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d875      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000dfa:	4a98      	ldr	r2, [pc, #608]	@ (800105c <HAL_GPIO_Init+0x2a4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d058      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e00:	4a96      	ldr	r2, [pc, #600]	@ (800105c <HAL_GPIO_Init+0x2a4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d86f      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e06:	4a96      	ldr	r2, [pc, #600]	@ (8001060 <HAL_GPIO_Init+0x2a8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d052      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a94      	ldr	r2, [pc, #592]	@ (8001060 <HAL_GPIO_Init+0x2a8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d869      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e12:	4a94      	ldr	r2, [pc, #592]	@ (8001064 <HAL_GPIO_Init+0x2ac>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d04c      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e18:	4a92      	ldr	r2, [pc, #584]	@ (8001064 <HAL_GPIO_Init+0x2ac>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d863      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e1e:	4a92      	ldr	r2, [pc, #584]	@ (8001068 <HAL_GPIO_Init+0x2b0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d046      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
 8000e24:	4a90      	ldr	r2, [pc, #576]	@ (8001068 <HAL_GPIO_Init+0x2b0>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d85d      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e2a:	2b12      	cmp	r3, #18
 8000e2c:	d82a      	bhi.n	8000e84 <HAL_GPIO_Init+0xcc>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d859      	bhi.n	8000ee6 <HAL_GPIO_Init+0x12e>
 8000e32:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <HAL_GPIO_Init+0x80>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000eb3 	.word	0x08000eb3
 8000e3c:	08000e8d 	.word	0x08000e8d
 8000e40:	08000e9f 	.word	0x08000e9f
 8000e44:	08000ee1 	.word	0x08000ee1
 8000e48:	08000ee7 	.word	0x08000ee7
 8000e4c:	08000ee7 	.word	0x08000ee7
 8000e50:	08000ee7 	.word	0x08000ee7
 8000e54:	08000ee7 	.word	0x08000ee7
 8000e58:	08000ee7 	.word	0x08000ee7
 8000e5c:	08000ee7 	.word	0x08000ee7
 8000e60:	08000ee7 	.word	0x08000ee7
 8000e64:	08000ee7 	.word	0x08000ee7
 8000e68:	08000ee7 	.word	0x08000ee7
 8000e6c:	08000ee7 	.word	0x08000ee7
 8000e70:	08000ee7 	.word	0x08000ee7
 8000e74:	08000ee7 	.word	0x08000ee7
 8000e78:	08000ee7 	.word	0x08000ee7
 8000e7c:	08000e95 	.word	0x08000e95
 8000e80:	08000ea9 	.word	0x08000ea9
 8000e84:	4a79      	ldr	r2, [pc, #484]	@ (800106c <HAL_GPIO_Init+0x2b4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8a:	e02c      	b.n	8000ee6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	623b      	str	r3, [r7, #32]
          break;
 8000e92:	e029      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e024      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e01f      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	330c      	adds	r3, #12
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e01a      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e013      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d105      	bne.n	8000ed4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	611a      	str	r2, [r3, #16]
          break;
 8000ed2:	e009      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	615a      	str	r2, [r3, #20]
          break;
 8000ede:	e003      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x130>
          break;
 8000ee6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	2bff      	cmp	r3, #255	@ 0xff
 8000eec:	d801      	bhi.n	8000ef2 <HAL_GPIO_Init+0x13a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	e001      	b.n	8000ef6 <HAL_GPIO_Init+0x13e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2bff      	cmp	r3, #255	@ 0xff
 8000efc:	d802      	bhi.n	8000f04 <HAL_GPIO_Init+0x14c>
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0x152>
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	3b08      	subs	r3, #8
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	210f      	movs	r1, #15
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	6a39      	ldr	r1, [r7, #32]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	431a      	orrs	r2, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80b1 	beq.w	800109a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f38:	4b4d      	ldr	r3, [pc, #308]	@ (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a4c      	ldr	r2, [pc, #304]	@ (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b4a      	ldr	r3, [pc, #296]	@ (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f50:	4a48      	ldr	r2, [pc, #288]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a40      	ldr	r2, [pc, #256]	@ (8001078 <HAL_GPIO_Init+0x2c0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d013      	beq.n	8000fa4 <HAL_GPIO_Init+0x1ec>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800107c <HAL_GPIO_Init+0x2c4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d00d      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e8>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3e      	ldr	r2, [pc, #248]	@ (8001080 <HAL_GPIO_Init+0x2c8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x1e4>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001084 <HAL_GPIO_Init+0x2cc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d101      	bne.n	8000f98 <HAL_GPIO_Init+0x1e0>
 8000f94:	2303      	movs	r3, #3
 8000f96:	e006      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000f98:	2304      	movs	r3, #4
 8000f9a:	e004      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <HAL_GPIO_Init+0x1ee>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fb6:	492f      	ldr	r1, [pc, #188]	@ (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	492c      	ldr	r1, [pc, #176]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	608b      	str	r3, [r1, #8]
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fde:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4928      	ldr	r1, [pc, #160]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	4922      	ldr	r1, [pc, #136]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	60cb      	str	r3, [r1, #12]
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	43db      	mvns	r3, r3
 800100e:	491e      	ldr	r1, [pc, #120]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8001010:	4013      	ands	r3, r2
 8001012:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4918      	ldr	r1, [pc, #96]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	43db      	mvns	r3, r3
 8001036:	4914      	ldr	r1, [pc, #80]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 8001038:	4013      	ands	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d021      	beq.n	800108c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	490e      	ldr	r1, [pc, #56]	@ (8001088 <HAL_GPIO_Init+0x2d0>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e021      	b.n	800109a <HAL_GPIO_Init+0x2e2>
 8001056:	bf00      	nop
 8001058:	10320000 	.word	0x10320000
 800105c:	10310000 	.word	0x10310000
 8001060:	10220000 	.word	0x10220000
 8001064:	10210000 	.word	0x10210000
 8001068:	10120000 	.word	0x10120000
 800106c:	10110000 	.word	0x10110000
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00
 8001080:	40011000 	.word	0x40011000
 8001084:	40011400 	.word	0x40011400
 8001088:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	43db      	mvns	r3, r3
 8001094:	4909      	ldr	r1, [pc, #36]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001096:	4013      	ands	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	3301      	adds	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a6:	fa22 f303 	lsr.w	r3, r2, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f47f ae8e 	bne.w	8000dcc <HAL_GPIO_Init+0x14>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	372c      	adds	r7, #44	@ 0x2c
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40010400 	.word	0x40010400

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	611a      	str	r2, [r3, #16]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43d9      	mvns	r1, r3
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	400b      	ands	r3, r1
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001124:	b08b      	sub	sp, #44	@ 0x2c
 8001126:	af06      	add	r7, sp, #24
 8001128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0f1      	b.n	8001318 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d106      	bne.n	800114e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f007 f8c1 	bl	80082d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2203      	movs	r2, #3
 8001152:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f002 ffec 	bl	8004138 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	687e      	ldr	r6, [r7, #4]
 8001168:	466d      	mov	r5, sp
 800116a:	f106 0410 	add.w	r4, r6, #16
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	602b      	str	r3, [r5, #0]
 8001176:	1d33      	adds	r3, r6, #4
 8001178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f002 ffb6 	bl	80040ec <USB_CoreInit>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e0c2      	b.n	8001318 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f002 ffe7 	bl	800416c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e040      	b.n	8001226 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	3301      	adds	r3, #1
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3303      	adds	r3, #3
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3338      	adds	r3, #56	@ 0x38
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	333c      	adds	r3, #60	@ 0x3c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3340      	adds	r3, #64	@ 0x40
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	3301      	adds	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3b9      	bcc.n	80011a4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e044      	b.n	80012c0 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3b5      	bcc.n	8001236 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	687e      	ldr	r6, [r7, #4]
 80012d2:	466d      	mov	r5, sp
 80012d4:	f106 0410 	add.w	r4, r6, #16
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	602b      	str	r3, [r5, #0]
 80012e0:	1d33      	adds	r3, r6, #4
 80012e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e4:	6838      	ldr	r0, [r7, #0]
 80012e6:	f002 ff4d 	bl	8004184 <USB_DevInit>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e00d      	b.n	8001318 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f005 f9ce 	bl	80066b2 <USB_DevDisconnect>

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001320 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_PCD_Start+0x16>
 8001332:	2302      	movs	r3, #2
 8001334:	e016      	b.n	8001364 <HAL_PCD_Start+0x44>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fee2 	bl	800410c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001348:	2101      	movs	r1, #1
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f007 fa33 	bl	80087b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f005 f9a2 	bl	800669e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f005 f9a4 	bl	80066c6 <USB_ReadInterrupts>
 800137e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fb1b 	bl	80019c6 <PCD_EP_ISR_Handler>

    return;
 8001390:	e119      	b.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013ae:	b292      	uxth	r2, r2
 80013b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f007 f806 	bl	80083c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013ba:	2100      	movs	r1, #0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f905 	bl	80015cc <HAL_PCD_SetAddress>

    return;
 80013c2:	e100      	b.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00c      	beq.n	80013e8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80013e0:	b292      	uxth	r2, r2
 80013e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013e6:	e0ee      	b.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00c      	beq.n	800140c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001404:	b292      	uxth	r2, r2
 8001406:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800140a:	e0dc      	b.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d027      	beq.n	8001466 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800141e:	b29a      	uxth	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0204 	bic.w	r2, r2, #4
 8001428:	b292      	uxth	r2, r2
 800142a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001436:	b29a      	uxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0208 	bic.w	r2, r2, #8
 8001440:	b292      	uxth	r2, r2
 8001442:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f006 fff6 	bl	8008438 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001454:	b29a      	uxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800145e:	b292      	uxth	r2, r2
 8001460:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001464:	e0af      	b.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8083 	beq.w	8001578 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	77fb      	strb	r3, [r7, #31]
 8001476:	e010      	b.n	800149a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	441a      	add	r2, r3
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	8812      	ldrh	r2, [r2, #0]
 8001488:	b292      	uxth	r2, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	3320      	adds	r3, #32
 800148e:	443b      	add	r3, r7
 8001490:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	3301      	adds	r3, #1
 8001498:	77fb      	strb	r3, [r7, #31]
 800149a:	7ffb      	ldrb	r3, [r7, #31]
 800149c:	2b07      	cmp	r3, #7
 800149e:	d9eb      	bls.n	8001478 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	b292      	uxth	r2, r2
 80014b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	b292      	uxth	r2, r2
 80014cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80014d0:	bf00      	nop
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f6      	beq.n	80014d2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014f6:	b292      	uxth	r2, r2
 80014f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
 8001500:	e00f      	b.n	8001522 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001502:	7ffb      	ldrb	r3, [r7, #31]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	4611      	mov	r1, r2
 800150a:	7ffa      	ldrb	r2, [r7, #31]
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	440a      	add	r2, r1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	3320      	adds	r3, #32
 8001514:	443b      	add	r3, r7
 8001516:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800151a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800151c:	7ffb      	ldrb	r3, [r7, #31]
 800151e:	3301      	adds	r3, #1
 8001520:	77fb      	strb	r3, [r7, #31]
 8001522:	7ffb      	ldrb	r3, [r7, #31]
 8001524:	2b07      	cmp	r3, #7
 8001526:	d9ec      	bls.n	8001502 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0208 	orr.w	r2, r2, #8
 800153a:	b292      	uxth	r2, r2
 800153c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001552:	b292      	uxth	r2, r2
 8001554:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001560:	b29a      	uxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0204 	orr.w	r2, r2, #4
 800156a:	b292      	uxth	r2, r2
 800156c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f006 ff47 	bl	8008404 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001576:	e026      	b.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00f      	beq.n	80015a2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001594:	b292      	uxth	r2, r2
 8001596:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f006 ff05 	bl	80083aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015a0:	e011      	b.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00c      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015c4:	bf00      	nop
  }
}
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_PCD_SetAddress+0x1a>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e013      	b.n	800160e <HAL_PCD_SetAddress+0x42>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f005 f83a 	bl	8006678 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	4608      	mov	r0, r1
 8001620:	4611      	mov	r1, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4603      	mov	r3, r0
 8001626:	70fb      	strb	r3, [r7, #3]
 8001628:	460b      	mov	r3, r1
 800162a:	803b      	strh	r3, [r7, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001638:	2b00      	cmp	r3, #0
 800163a:	da0e      	bge.n	800165a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	705a      	strb	r2, [r3, #1]
 8001658:	e00e      	b.n	8001678 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	f003 0207 	and.w	r2, r3, #7
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	b2da      	uxtb	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001684:	883a      	ldrh	r2, [r7, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	78ba      	ldrb	r2, [r7, #2]
 800168e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d102      	bne.n	800169c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_PCD_EP_Open+0x94>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e00e      	b.n	80016c8 <HAL_PCD_EP_Open+0xb2>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68f9      	ldr	r1, [r7, #12]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fd83 	bl	80041c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 80016c6:	7afb      	ldrb	r3, [r7, #11]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da0e      	bge.n	8001702 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	705a      	strb	r2, [r3, #1]
 8001700:	e00e      	b.n	8001720 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	f003 0207 	and.w	r2, r3, #7
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	b2da      	uxtb	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_PCD_EP_Close+0x6a>
 8001736:	2302      	movs	r3, #2
 8001738:	e00e      	b.n	8001758 <HAL_PCD_EP_Close+0x88>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f003 f8fb 	bl	8004944 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	460b      	mov	r3, r1
 800176e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	f003 0207 	and.w	r2, r3, #7
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2200      	movs	r2, #0
 800179e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6979      	ldr	r1, [r7, #20]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 fab2 	bl	8004d1c <USB_EPStartXfer>

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 0207 	and.w	r2, r3, #7
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80017e4:	681b      	ldr	r3, [r3, #0]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	460b      	mov	r3, r1
 80017fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2201      	movs	r2, #1
 800183a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	b2da      	uxtb	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6979      	ldr	r1, [r7, #20]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fa64 	bl	8004d1c <USB_EPStartXfer>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	f003 0207 	and.w	r2, r3, #7
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	d901      	bls.n	800187c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e04c      	b.n	8001916 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800187c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da0e      	bge.n	80018a2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	705a      	strb	r2, [r3, #1]
 80018a0:	e00c      	b.n	80018bc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_PCD_EP_SetStall+0x7e>
 80018d8:	2302      	movs	r3, #2
 80018da:	e01c      	b.n	8001916 <HAL_PCD_EP_SetStall+0xb8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fdc7 	bl	800647e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	f004 feec 	bl	80066e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f003 020f 	and.w	r2, r3, #15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	d901      	bls.n	800193c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e040      	b.n	80019be <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800193c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	da0e      	bge.n	8001962 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	705a      	strb	r2, [r3, #1]
 8001960:	e00e      	b.n	8001980 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	f003 0207 	and.w	r2, r3, #7
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_PCD_EP_ClrStall+0x82>
 800199c:	2302      	movs	r3, #2
 800199e:	e00e      	b.n	80019be <HAL_PCD_EP_ClrStall+0xa0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 fdb5 	bl	800651e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b096      	sub	sp, #88	@ 0x58
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019ce:	e3be      	b.n	800214e <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019d8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80019ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 8178 	bne.w	8001ce4 <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d151      	bne.n	8001aa4 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3328      	adds	r3, #40	@ 0x28
 8001a28:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	441a      	add	r2, r3
 8001a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a64:	2100      	movs	r1, #0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f006 fc85 	bl	8008376 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 836a 	beq.w	800214e <PCD_EP_ISR_Handler+0x788>
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8365 	bne.w	800214e <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001aa2:	e354      	b.n	800214e <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001aaa:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ab6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001aba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d034      	beq.n	8001b2c <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3306      	adds	r3, #6
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8001af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f004 fe3f 	bl	8006784 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b12:	4013      	ands	r3, r2
 8001b14:	823b      	strh	r3, [r7, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	8a3a      	ldrh	r2, [r7, #16]
 8001b1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b20:	b292      	uxth	r2, r2
 8001b22:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f006 fbf9 	bl	800831c <HAL_PCD_SetupStageCallback>
 8001b2a:	e310      	b.n	800214e <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f280 830c 	bge.w	800214e <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b42:	4013      	ands	r3, r2
 8001b44:	83fb      	strh	r3, [r7, #30]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	8bfa      	ldrh	r2, [r7, #30]
 8001b4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b50:	b292      	uxth	r2, r2
 8001b52:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	3306      	adds	r3, #6
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d019      	beq.n	8001bbc <PCD_EP_ISR_Handler+0x1f6>
 8001b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d015      	beq.n	8001bbc <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b96:	6959      	ldr	r1, [r3, #20]
 8001b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f004 fdef 	bl	8006784 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	441a      	add	r2, r3
 8001bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f006 fbc2 	bl	8008340 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001bc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 82bd 	bne.w	800214e <PCD_EP_ISR_Handler+0x788>
 8001bd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bd8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001bdc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001be0:	f000 82b5 	beq.w	800214e <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	801a      	strh	r2, [r3, #0]
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c1a:	d91d      	bls.n	8001c58 <PCD_EP_ISR_Handler+0x292>
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	095b      	lsrs	r3, r3, #5
 8001c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <PCD_EP_ISR_Handler+0x270>
 8001c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c32:	3b01      	subs	r3, #1
 8001c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	029b      	lsls	r3, r3, #10
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	801a      	strh	r2, [r3, #0]
 8001c56:	e026      	b.n	8001ca6 <PCD_EP_ISR_Handler+0x2e0>
 8001c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <PCD_EP_ISR_Handler+0x2b0>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	801a      	strh	r2, [r3, #0]
 8001c74:	e017      	b.n	8001ca6 <PCD_EP_ISR_Handler+0x2e0>
 8001c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <PCD_EP_ISR_Handler+0x2ca>
 8001c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cb6:	827b      	strh	r3, [r7, #18]
 8001cb8:	8a7b      	ldrh	r3, [r7, #18]
 8001cba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001cbe:	827b      	strh	r3, [r7, #18]
 8001cc0:	8a7b      	ldrh	r3, [r7, #18]
 8001cc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001cc6:	827b      	strh	r3, [r7, #18]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	8a7b      	ldrh	r3, [r7, #18]
 8001cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	8013      	strh	r3, [r2, #0]
 8001ce2:	e234      	b.n	800214e <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cf8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f280 80fc 	bge.w	8001efa <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d18:	4013      	ands	r3, r2
 8001d1a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001d30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d34:	b292      	uxth	r2, r2
 8001d36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d38:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d50:	7b1b      	ldrb	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d125      	bne.n	8001da2 <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3306      	adds	r3, #6
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001d82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8092 	beq.w	8001eb0 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d92:	6959      	ldr	r1, [r3, #20]
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	88da      	ldrh	r2, [r3, #6]
 8001d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d9c:	f004 fcf2 	bl	8006784 <USB_ReadPMA>
 8001da0:	e086      	b.n	8001eb0 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da4:	78db      	ldrb	r3, [r3, #3]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d10a      	bne.n	8001dc0 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001daa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001dae:	461a      	mov	r2, r3
 8001db0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f9d9 	bl	800216a <HAL_PCD_EP_DB_Receive>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001dbe:	e077      	b.n	8001eb0 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dda:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	441a      	add	r2, r3
 8001dec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d024      	beq.n	8001e68 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	3302      	adds	r3, #2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02e      	beq.n	8001eb0 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5c:	891a      	ldrh	r2, [r3, #8]
 8001e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e62:	f004 fc8f 	bl	8006784 <USB_ReadPMA>
 8001e66:	e023      	b.n	8001eb0 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3306      	adds	r3, #6
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e90:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea2:	6959      	ldr	r1, [r3, #20]
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea6:	895a      	ldrh	r2, [r3, #10]
 8001ea8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001eac:	f004 fc6a 	bl	8006784 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001eb8:	441a      	add	r2, r3
 8001eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ec6:	441a      	add	r2, r3
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <PCD_EP_ISR_Handler+0x51a>
 8001ed4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d206      	bcs.n	8001eee <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f006 fa2a 	bl	8008340 <HAL_PCD_DataOutStageCallback>
 8001eec:	e005      	b.n	8001efa <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 ff11 	bl	8004d1c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001efa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8123 	beq.w	800214e <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	441a      	add	r2, r3
 8001f48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5a:	78db      	ldrb	r3, [r3, #3]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	f040 80a2 	bne.w	80020a6 <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 8001f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6a:	7b1b      	ldrb	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8093 	beq.w	8002098 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d046      	beq.n	800200c <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f80:	785b      	ldrb	r3, [r3, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d126      	bne.n	8001fd4 <PCD_EP_ISR_Handler+0x60e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	4413      	add	r3, r2
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	011a      	lsls	r2, r3, #4
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001fac:	623b      	str	r3, [r7, #32]
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	801a      	strh	r2, [r3, #0]
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	e061      	b.n	8002098 <PCD_EP_ISR_Handler+0x6d2>
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d15d      	bne.n	8002098 <PCD_EP_ISR_Handler+0x6d2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff0:	4413      	add	r3, r2
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	011a      	lsls	r2, r3, #4
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002006:	2200      	movs	r2, #0
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	e045      	b.n	8002098 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d126      	bne.n	8002068 <PCD_EP_ISR_Handler+0x6a2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202e:	4413      	add	r3, r2
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	011a      	lsls	r2, r3, #4
 8002038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800203a:	4413      	add	r3, r2
 800203c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
 8002042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800204c:	b29a      	uxth	r2, r3
 800204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800205c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002060:	b29a      	uxth	r2, r3
 8002062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	e017      	b.n	8002098 <PCD_EP_ISR_Handler+0x6d2>
 8002068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d113      	bne.n	8002098 <PCD_EP_ISR_Handler+0x6d2>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207e:	4413      	add	r3, r2
 8002080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	011a      	lsls	r2, r3, #4
 8002088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208a:	4413      	add	r3, r2
 800208c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002090:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f006 f969 	bl	8008376 <HAL_PCD_DataInStageCallback>
 80020a4:	e053      	b.n	800214e <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d146      	bne.n	8002140 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	3302      	adds	r3, #2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80020de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d907      	bls.n	80020fa <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 80020ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020f2:	1ad2      	subs	r2, r2, r3
 80020f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f6:	619a      	str	r2, [r3, #24]
 80020f8:	e002      	b.n	8002100 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 80020fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f006 f931 	bl	8008376 <HAL_PCD_DataInStageCallback>
 8002114:	e01b      	b.n	800214e <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800211e:	441a      	add	r2, r3
 8002120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002122:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800212c:	441a      	add	r2, r3
 800212e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002130:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002138:	4618      	mov	r0, r3
 800213a:	f002 fdef 	bl	8004d1c <USB_EPStartXfer>
 800213e:	e006      	b.n	800214e <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002140:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002144:	461a      	mov	r2, r3
 8002146:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f91b 	bl	8002384 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002156:	b29b      	uxth	r3, r3
 8002158:	b21b      	sxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	f6ff ac38 	blt.w	80019d0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3758      	adds	r7, #88	@ 0x58
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b088      	sub	sp, #32
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	4613      	mov	r3, r2
 8002176:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07e      	beq.n	8002280 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	3302      	adds	r3, #2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	8b7b      	ldrh	r3, [r7, #26]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d306      	bcc.n	80021c4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	8b7b      	ldrh	r3, [r7, #26]
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	619a      	str	r2, [r3, #24]
 80021c2:	e002      	b.n	80021ca <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d123      	bne.n	800221a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ec:	833b      	strh	r3, [r7, #24]
 80021ee:	8b3b      	ldrh	r3, [r7, #24]
 80021f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021f4:	833b      	strh	r3, [r7, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	441a      	add	r2, r3
 8002204:	8b3b      	ldrh	r3, [r7, #24]
 8002206:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800220a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800220e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002216:	b29b      	uxth	r3, r3
 8002218:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01f      	beq.n	8002264 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800223a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800223e:	82fb      	strh	r3, [r7, #22]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	441a      	add	r2, r3
 800224e:	8afb      	ldrh	r3, [r7, #22]
 8002250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002260:	b29b      	uxth	r3, r3
 8002262:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002264:	8b7b      	ldrh	r3, [r7, #26]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	6959      	ldr	r1, [r3, #20]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	891a      	ldrh	r2, [r3, #8]
 8002278:	8b7b      	ldrh	r3, [r7, #26]
 800227a:	f004 fa83 	bl	8006784 <USB_ReadPMA>
 800227e:	e07c      	b.n	800237a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002288:	b29b      	uxth	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	3306      	adds	r3, #6
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	8b7b      	ldrh	r3, [r7, #26]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d306      	bcc.n	80022c2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	8b7b      	ldrh	r3, [r7, #26]
 80022ba:	1ad2      	subs	r2, r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	e002      	b.n	80022c8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d123      	bne.n	8002318 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ea:	83fb      	strh	r3, [r7, #30]
 80022ec:	8bfb      	ldrh	r3, [r7, #30]
 80022ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022f2:	83fb      	strh	r3, [r7, #30]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	441a      	add	r2, r3
 8002302:	8bfb      	ldrh	r3, [r7, #30]
 8002304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800230c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002314:	b29b      	uxth	r3, r3
 8002316:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11f      	bne.n	8002362 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800233c:	83bb      	strh	r3, [r7, #28]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	441a      	add	r2, r3
 800234c:	8bbb      	ldrh	r3, [r7, #28]
 800234e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800235e:	b29b      	uxth	r3, r3
 8002360:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002362:	8b7b      	ldrh	r3, [r7, #26]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6959      	ldr	r1, [r3, #20]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	895a      	ldrh	r2, [r3, #10]
 8002374:	8b7b      	ldrh	r3, [r7, #26]
 8002376:	f004 fa05 	bl	8006784 <USB_ReadPMA>
    }
  }

  return count;
 800237a:	8b7b      	ldrh	r3, [r7, #26]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0a4      	sub	sp, #144	@ 0x90
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 81dd 	beq.w	8002758 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	3302      	adds	r3, #2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d907      	bls.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	619a      	str	r2, [r3, #24]
 80023e4:	e002      	b.n	80023ec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 80b9 	bne.w	8002568 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d126      	bne.n	800244c <HAL_PCD_EP_DB_Transmit+0xc8>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002412:	4413      	add	r3, r2
 8002414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	011a      	lsls	r2, r3, #4
 800241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241e:	4413      	add	r3, r2
 8002420:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002430:	b29a      	uxth	r2, r3
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002444:	b29a      	uxth	r2, r3
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e01a      	b.n	8002482 <HAL_PCD_EP_DB_Transmit+0xfe>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d116      	bne.n	8002482 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	637b      	str	r3, [r7, #52]	@ 0x34
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002468:	4413      	add	r3, r2
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	011a      	lsls	r2, r3, #4
 8002472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002474:	4413      	add	r3, r2
 8002476:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	785b      	ldrb	r3, [r3, #1]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d126      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x15a>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	011a      	lsls	r2, r3, #4
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	801a      	strh	r2, [r3, #0]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	801a      	strh	r2, [r3, #0]
 80024dc:	e017      	b.n	800250e <HAL_PCD_EP_DB_Transmit+0x18a>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d113      	bne.n	800250e <HAL_PCD_EP_DB_Transmit+0x18a>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	4413      	add	r3, r2
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	011a      	lsls	r2, r3, #4
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	4413      	add	r3, r2
 8002502:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	2200      	movs	r2, #0
 800250c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f005 ff2e 	bl	8008376 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 82fc 	beq.w	8002b1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800253c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002540:	82fb      	strh	r3, [r7, #22]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	8afb      	ldrh	r3, [r7, #22]
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800255a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]
 8002566:	e2da      	b.n	8002b1e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d021      	beq.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	441a      	add	r2, r3
 800259e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80025a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f040 82ae 	bne.w	8002b1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025ca:	441a      	add	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025d8:	441a      	add	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d30b      	bcc.n	8002602 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	621a      	str	r2, [r3, #32]
 8002600:	e017      	b.n	8002632 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d108      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800260a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800260e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800261a:	e00a      	b.n	8002632 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d165      	bne.n	8002706 <HAL_PCD_EP_DB_Transmit+0x382>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800264e:	4413      	add	r3, r2
 8002650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	011a      	lsls	r2, r3, #4
 8002658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800265a:	4413      	add	r3, r2
 800265c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002660:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266c:	b29a      	uxth	r2, r3
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002676:	2b3e      	cmp	r3, #62	@ 0x3e
 8002678:	d91d      	bls.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x332>
 800267a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_PCD_EP_DB_Transmit+0x310>
 800268e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002690:	3b01      	subs	r3, #1
 8002692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29a      	uxth	r2, r3
 800269a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800269c:	b29b      	uxth	r3, r3
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e044      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x350>
 80026be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e035      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80026d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_PCD_EP_DB_Transmit+0x36a>
 80026e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ea:	3301      	adds	r3, #1
 80026ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	e01c      	b.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d118      	bne.n	8002740 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	647b      	str	r3, [r7, #68]	@ 0x44
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800271c:	b29b      	uxth	r3, r3
 800271e:	461a      	mov	r2, r3
 8002720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002722:	4413      	add	r3, r2
 8002724:	647b      	str	r3, [r7, #68]	@ 0x44
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	011a      	lsls	r2, r3, #4
 800272c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272e:	4413      	add	r3, r2
 8002730:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002734:	643b      	str	r3, [r7, #64]	@ 0x40
 8002736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800273a:	b29a      	uxth	r2, r3
 800273c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6959      	ldr	r1, [r3, #20]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	891a      	ldrh	r2, [r3, #8]
 800274c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002750:	b29b      	uxth	r3, r3
 8002752:	f003 ffd2 	bl	80066fa <USB_WritePMA>
 8002756:	e1e2      	b.n	8002b1e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	3306      	adds	r3, #6
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002780:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800278c:	429a      	cmp	r2, r3
 800278e:	d307      	bcc.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	619a      	str	r2, [r3, #24]
 800279e:	e002      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 80c0 	bne.w	8002930 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d126      	bne.n	8002806 <HAL_PCD_EP_DB_Transmit+0x482>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027cc:	4413      	add	r3, r2
 80027ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	011a      	lsls	r2, r3, #4
 80027d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027d8:	4413      	add	r3, r2
 80027da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fe:	b29a      	uxth	r2, r3
 8002800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	e01a      	b.n	800283c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	785b      	ldrb	r3, [r3, #1]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d116      	bne.n	800283c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	667b      	str	r3, [r7, #100]	@ 0x64
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002822:	4413      	add	r3, r2
 8002824:	667b      	str	r3, [r7, #100]	@ 0x64
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	011a      	lsls	r2, r3, #4
 800282c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800282e:	4413      	add	r3, r2
 8002830:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002834:	663b      	str	r3, [r7, #96]	@ 0x60
 8002836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002838:	2200      	movs	r2, #0
 800283a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	677b      	str	r3, [r7, #116]	@ 0x74
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	785b      	ldrb	r3, [r3, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d12b      	bne.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800285e:	4413      	add	r3, r2
 8002860:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	011a      	lsls	r2, r3, #4
 8002868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800286a:	4413      	add	r3, r2
 800286c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002874:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	b29a      	uxth	r2, r3
 8002882:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002898:	b29a      	uxth	r2, r3
 800289a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	e017      	b.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d113      	bne.n	80028d2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b8:	4413      	add	r3, r2
 80028ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	011a      	lsls	r2, r3, #4
 80028c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c4:	4413      	add	r3, r2
 80028c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80028cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028ce:	2200      	movs	r2, #0
 80028d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f005 fd4c 	bl	8008376 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 811a 	bne.w	8002b1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002904:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800291a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800291e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800292a:	b29b      	uxth	r3, r3
 800292c:	8013      	strh	r3, [r2, #0]
 800292e:	e0f6      	b.n	8002b1e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d121      	bne.n	800297e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002954:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800296a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800296e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800297a:	b29b      	uxth	r3, r3
 800297c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 80ca 	bne.w	8002b1e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002992:	441a      	add	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029a0:	441a      	add	r2, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6a1a      	ldr	r2, [r3, #32]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d30b      	bcc.n	80029ca <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c2:	1ad2      	subs	r2, r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	621a      	str	r2, [r3, #32]
 80029c8:	e017      	b.n	80029fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80029d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80029d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80029e2:	e00a      	b.n	80029fa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2200      	movs	r2, #0
 80029f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d165      	bne.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x750>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	011a      	lsls	r2, r3, #4
 8002a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a3e:	801a      	strh	r2, [r3, #0]
 8002a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a44:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a46:	d91d      	bls.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x700>
 8002a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002a5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	029b      	lsls	r3, r3, #10
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a80:	801a      	strh	r2, [r3, #0]
 8002a82:	e041      	b.n	8002b08 <HAL_PCD_EP_DB_Transmit+0x784>
 8002a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e032      	b.n	8002b08 <HAL_PCD_EP_DB_Transmit+0x784>
 8002aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa6:	085b      	lsrs	r3, r3, #1
 8002aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_PCD_EP_DB_Transmit+0x738>
 8002ab6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ab8:	3301      	adds	r3, #1
 8002aba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002abc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	e019      	b.n	8002b08 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d115      	bne.n	8002b08 <HAL_PCD_EP_DB_Transmit+0x784>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aea:	4413      	add	r3, r2
 8002aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	011a      	lsls	r2, r3, #4
 8002af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af6:	4413      	add	r3, r2
 8002af8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b06:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	6959      	ldr	r1, [r3, #20]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	895a      	ldrh	r2, [r3, #10]
 8002b14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f003 fdee 	bl	80066fa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b38:	82bb      	strh	r3, [r7, #20]
 8002b3a:	8abb      	ldrh	r3, [r7, #20]
 8002b3c:	f083 0310 	eor.w	r3, r3, #16
 8002b40:	82bb      	strh	r3, [r7, #20]
 8002b42:	8abb      	ldrh	r3, [r7, #20]
 8002b44:	f083 0320 	eor.w	r3, r3, #32
 8002b48:	82bb      	strh	r3, [r7, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	441a      	add	r2, r3
 8002b58:	8abb      	ldrh	r3, [r7, #20]
 8002b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3790      	adds	r7, #144	@ 0x90
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	4613      	mov	r3, r2
 8002b88:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e009      	b.n	8002bc2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bae:	897a      	ldrh	r2, [r7, #10]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002bc2:	893b      	ldrh	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	80da      	strh	r2, [r3, #6]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e272      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8087 	beq.w	8002d2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c1c:	4b92      	ldr	r3, [pc, #584]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d00c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c28:	4b8f      	ldr	r3, [pc, #572]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d112      	bne.n	8002c5a <HAL_RCC_OscConfig+0x5e>
 8002c34:	4b8c      	ldr	r3, [pc, #560]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c40:	d10b      	bne.n	8002c5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c42:	4b89      	ldr	r3, [pc, #548]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d06c      	beq.n	8002d28 <HAL_RCC_OscConfig+0x12c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d168      	bne.n	8002d28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e24c      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x76>
 8002c64:	4b80      	ldr	r3, [pc, #512]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7f      	ldr	r2, [pc, #508]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	e02e      	b.n	8002cd0 <HAL_RCC_OscConfig+0xd4>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x98>
 8002c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b78      	ldr	r3, [pc, #480]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a77      	ldr	r2, [pc, #476]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e01d      	b.n	8002cd0 <HAL_RCC_OscConfig+0xd4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xbc>
 8002c9e:	4b72      	ldr	r3, [pc, #456]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a71      	ldr	r2, [pc, #452]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b6f      	ldr	r3, [pc, #444]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6e      	ldr	r2, [pc, #440]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0xd4>
 8002cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b68      	ldr	r3, [pc, #416]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a67      	ldr	r2, [pc, #412]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fd fd42 	bl	8000760 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fd fd3e 	bl	8000760 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e200      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe4>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fd fd2e 	bl	8000760 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fd fd2a 	bl	8000760 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	@ 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1ec      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x10c>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d063      	beq.n	8002dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d36:	4b4c      	ldr	r3, [pc, #304]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d42:	4b49      	ldr	r3, [pc, #292]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d11c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x18c>
 8002d4e:	4b46      	ldr	r3, [pc, #280]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	4b43      	ldr	r3, [pc, #268]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x176>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e1c0      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b3d      	ldr	r3, [pc, #244]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4939      	ldr	r1, [pc, #228]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	e03a      	b.n	8002dfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d90:	4b36      	ldr	r3, [pc, #216]	@ (8002e6c <HAL_RCC_OscConfig+0x270>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fd fce3 	bl	8000760 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fd fcdf 	bl	8000760 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1a1      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4927      	ldr	r1, [pc, #156]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <HAL_RCC_OscConfig+0x270>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fd fcc2 	bl	8000760 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fd fcbe 	bl	8000760 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e180      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d03a      	beq.n	8002e80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d019      	beq.n	8002e46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b17      	ldr	r3, [pc, #92]	@ (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fd fca2 	bl	8000760 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e20:	f7fd fc9e 	bl	8000760 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e160      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f000 face 	bl	80033e0 <RCC_Delay>
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e46:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fd fc88 	bl	8000760 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e52:	e00f      	b.n	8002e74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fd fc84 	bl	8000760 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d908      	bls.n	8002e74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e146      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	42420000 	.word	0x42420000
 8002e70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b92      	ldr	r3, [pc, #584]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e9      	bne.n	8002e54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a6 	beq.w	8002fda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e92:	4b8b      	ldr	r3, [pc, #556]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10d      	bne.n	8002eba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a87      	ldr	r2, [pc, #540]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	61d3      	str	r3, [r2, #28]
 8002eaa:	4b85      	ldr	r3, [pc, #532]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b82      	ldr	r3, [pc, #520]	@ (80030c4 <HAL_RCC_OscConfig+0x4c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80030c4 <HAL_RCC_OscConfig+0x4c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a7e      	ldr	r2, [pc, #504]	@ (80030c4 <HAL_RCC_OscConfig+0x4c8>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fd fc45 	bl	8000760 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fd fc41 	bl	8000760 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	@ 0x64
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e103      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b75      	ldr	r3, [pc, #468]	@ (80030c4 <HAL_RCC_OscConfig+0x4c8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x312>
 8002f00:	4b6f      	ldr	r3, [pc, #444]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a6e      	ldr	r2, [pc, #440]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	e02d      	b.n	8002f6a <HAL_RCC_OscConfig+0x36e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x334>
 8002f16:	4b6a      	ldr	r3, [pc, #424]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a69      	ldr	r2, [pc, #420]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6213      	str	r3, [r2, #32]
 8002f22:	4b67      	ldr	r3, [pc, #412]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a66      	ldr	r2, [pc, #408]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	e01c      	b.n	8002f6a <HAL_RCC_OscConfig+0x36e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCC_OscConfig+0x356>
 8002f38:	4b61      	ldr	r3, [pc, #388]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4a60      	ldr	r2, [pc, #384]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6213      	str	r3, [r2, #32]
 8002f44:	4b5e      	ldr	r3, [pc, #376]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a5d      	ldr	r2, [pc, #372]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6213      	str	r3, [r2, #32]
 8002f50:	e00b      	b.n	8002f6a <HAL_RCC_OscConfig+0x36e>
 8002f52:	4b5b      	ldr	r3, [pc, #364]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4a5a      	ldr	r2, [pc, #360]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6213      	str	r3, [r2, #32]
 8002f5e:	4b58      	ldr	r3, [pc, #352]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4a57      	ldr	r2, [pc, #348]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d015      	beq.n	8002f9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fd fbf5 	bl	8000760 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fd fbf1 	bl	8000760 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0b1      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	4b4b      	ldr	r3, [pc, #300]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ee      	beq.n	8002f7a <HAL_RCC_OscConfig+0x37e>
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fd fbdf 	bl	8000760 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fd fbdb 	bl	8000760 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e09b      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	4b40      	ldr	r3, [pc, #256]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ee      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b3c      	ldr	r3, [pc, #240]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4a3b      	ldr	r2, [pc, #236]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8087 	beq.w	80030f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe4:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d061      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d146      	bne.n	8003086 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff8:	4b33      	ldr	r3, [pc, #204]	@ (80030c8 <HAL_RCC_OscConfig+0x4cc>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fd fbaf 	bl	8000760 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fd fbab 	bl	8000760 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e06d      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003018:	4b29      	ldr	r3, [pc, #164]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800302c:	d108      	bne.n	8003040 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4921      	ldr	r1, [pc, #132]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003040:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a19      	ldr	r1, [r3, #32]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	430b      	orrs	r3, r1
 8003052:	491b      	ldr	r1, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003058:	4b1b      	ldr	r3, [pc, #108]	@ (80030c8 <HAL_RCC_OscConfig+0x4cc>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7fd fb7f 	bl	8000760 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003066:	f7fd fb7b 	bl	8000760 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e03d      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003078:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x46a>
 8003084:	e035      	b.n	80030f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003086:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <HAL_RCC_OscConfig+0x4cc>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fd fb68 	bl	8000760 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003094:	f7fd fb64 	bl	8000760 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e026      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a6:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x498>
 80030b2:	e01e      	b.n	80030f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e019      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40007000 	.word	0x40007000
 80030c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_OscConfig+0x500>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0d0      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b6a      	ldr	r3, [pc, #424]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d910      	bls.n	8003144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b67      	ldr	r3, [pc, #412]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 0207 	bic.w	r2, r3, #7
 800312a:	4965      	ldr	r1, [pc, #404]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b63      	ldr	r3, [pc, #396]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0b8      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800315c:	4b59      	ldr	r3, [pc, #356]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a58      	ldr	r2, [pc, #352]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003166:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003174:	4b53      	ldr	r3, [pc, #332]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a52      	ldr	r2, [pc, #328]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800317e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b50      	ldr	r3, [pc, #320]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	494d      	ldr	r1, [pc, #308]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d040      	beq.n	8003220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d115      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07f      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	4b41      	ldr	r3, [pc, #260]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e073      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ce:	4b3d      	ldr	r3, [pc, #244]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06b      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031de:	4b39      	ldr	r3, [pc, #228]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f023 0203 	bic.w	r2, r3, #3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4936      	ldr	r1, [pc, #216]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fd fab6 	bl	8000760 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f6:	e00a      	b.n	800320e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f8:	f7fd fab2 	bl	8000760 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e053      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	4b2d      	ldr	r3, [pc, #180]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 020c 	and.w	r2, r3, #12
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d1eb      	bne.n	80031f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003220:	4b27      	ldr	r3, [pc, #156]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d210      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 0207 	bic.w	r2, r3, #7
 8003236:	4922      	ldr	r1, [pc, #136]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e032      	b.n	80032b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800325c:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4916      	ldr	r1, [pc, #88]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	490e      	ldr	r1, [pc, #56]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328e:	f000 f821 	bl	80032d4 <HAL_RCC_GetSysClockFreq>
 8003292:	4602      	mov	r2, r0
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	490a      	ldr	r1, [pc, #40]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032a0:	5ccb      	ldrb	r3, [r1, r3]
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <HAL_RCC_ClockConfig+0x1cc>)
 80032a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x1d0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fa14 	bl	80006dc <HAL_InitTick>

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40021000 	.word	0x40021000
 80032c8:	080088f4 	.word	0x080088f4
 80032cc:	20000008 	.word	0x20000008
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x94>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x30>
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x36>
 8003302:	e027      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <HAL_RCC_GetSysClockFreq+0x98>)
 8003306:	613b      	str	r3, [r7, #16]
      break;
 8003308:	e027      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	0c9b      	lsrs	r3, r3, #18
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	4a17      	ldr	r2, [pc, #92]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d010      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003322:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x94>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0c5b      	lsrs	r3, r3, #17
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	4a11      	ldr	r2, [pc, #68]	@ (8003374 <HAL_RCC_GetSysClockFreq+0xa0>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a0d      	ldr	r2, [pc, #52]	@ (800336c <HAL_RCC_GetSysClockFreq+0x98>)
 8003336:	fb03 f202 	mul.w	r2, r3, r2
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e004      	b.n	800334e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a0c      	ldr	r2, [pc, #48]	@ (8003378 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	613b      	str	r3, [r7, #16]
      break;
 8003352:	e002      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCC_GetSysClockFreq+0x98>)
 8003356:	613b      	str	r3, [r7, #16]
      break;
 8003358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335a:	693b      	ldr	r3, [r7, #16]
}
 800335c:	4618      	mov	r0, r3
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	007a1200 	.word	0x007a1200
 8003370:	0800890c 	.word	0x0800890c
 8003374:	0800891c 	.word	0x0800891c
 8003378:	003d0900 	.word	0x003d0900

0800337c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003380:	4b02      	ldr	r3, [pc, #8]	@ (800338c <HAL_RCC_GetHCLKFreq+0x10>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	20000008 	.word	0x20000008

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003394:	f7ff fff2 	bl	800337c <HAL_RCC_GetHCLKFreq>
 8003398:	4602      	mov	r2, r0
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4903      	ldr	r1, [pc, #12]	@ (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a6:	5ccb      	ldrb	r3, [r1, r3]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40021000 	.word	0x40021000
 80033b4:	08008904 	.word	0x08008904

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033bc:	f7ff ffde 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0adb      	lsrs	r3, r3, #11
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	@ (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08008904 	.word	0x08008904

080033e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <RCC_Delay+0x34>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003418 <RCC_Delay+0x38>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0a5b      	lsrs	r3, r3, #9
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033fc:	bf00      	nop
  }
  while (Delay --);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1e5a      	subs	r2, r3, #1
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f9      	bne.n	80033fc <RCC_Delay+0x1c>
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	20000008 	.word	0x20000008
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d07d      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343c:	4b4f      	ldr	r3, [pc, #316]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b4c      	ldr	r3, [pc, #304]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4a4b      	ldr	r2, [pc, #300]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003452:	61d3      	str	r3, [r2, #28]
 8003454:	4b49      	ldr	r3, [pc, #292]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b46      	ldr	r3, [pc, #280]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d118      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003470:	4b43      	ldr	r3, [pc, #268]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a42      	ldr	r2, [pc, #264]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800347c:	f7fd f970 	bl	8000760 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fd f96c 	bl	8000760 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	@ 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e06d      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b3a      	ldr	r3, [pc, #232]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a2:	4b36      	ldr	r3, [pc, #216]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02e      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d027      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c0:	4b2e      	ldr	r3, [pc, #184]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034d6:	4a29      	ldr	r2, [pc, #164]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d014      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fd f93b 	bl	8000760 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fd f937 	bl	8000760 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e036      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	4b1d      	ldr	r3, [pc, #116]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ee      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003510:	4b1a      	ldr	r3, [pc, #104]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4917      	ldr	r1, [pc, #92]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	4313      	orrs	r3, r2
 8003520:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b14      	ldr	r3, [pc, #80]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4a13      	ldr	r2, [pc, #76]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003532:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003540:	4b0e      	ldr	r3, [pc, #56]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	490b      	ldr	r1, [pc, #44]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800355e:	4b07      	ldr	r3, [pc, #28]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4904      	ldr	r1, [pc, #16]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40021000 	.word	0x40021000
 8003580:	40007000 	.word	0x40007000
 8003584:	42420440 	.word	0x42420440

08003588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e042      	b.n	8003620 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fc ff54 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	@ 0x24
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fcff 	bl	8003fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	d121      	bne.n	8003686 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Transmit_IT+0x26>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e01a      	b.n	8003688 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2221      	movs	r2, #33	@ 0x21
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003680:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d112      	bne.n	80036d2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Receive_IT+0x26>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e00b      	b.n	80036d4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	461a      	mov	r2, r3
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 faad 	bl	8003c28 <UART_Start_Receive_IT>
 80036ce:	4603      	mov	r3, r0
 80036d0:	e000      	b.n	80036d4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b0ba      	sub	sp, #232	@ 0xe8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800371a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_UART_IRQHandler+0x66>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fb8a 	bl	8003e54 <UART_Receive_IT>
      return;
 8003740:	e25b      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80de 	beq.w	8003908 <HAL_UART_IRQHandler+0x22c>
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80d1 	beq.w	8003908 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_UART_IRQHandler+0xae>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_UART_IRQHandler+0xd2>
 8003796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f043 0202 	orr.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_UART_IRQHandler+0xf6>
 80037ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_UART_IRQHandler+0x126>
 80037de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f043 0208 	orr.w	r2, r3, #8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 81f2 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_UART_IRQHandler+0x14e>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fb15 	bl	8003e54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <HAL_UART_IRQHandler+0x17a>
 800384e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d04f      	beq.n	80038f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa1f 	bl	8003c9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d041      	beq.n	80038ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3314      	adds	r3, #20
 8003892:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003896:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800389a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1d9      	bne.n	800386a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d013      	beq.n	80038e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c2:	4a7e      	ldr	r2, [pc, #504]	@ (8003abc <HAL_UART_IRQHandler+0x3e0>)
 80038c4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd f8f6 	bl	8000abc <HAL_DMA_Abort_IT>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038e0:	4610      	mov	r0, r2
 80038e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e00e      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f98a 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e00a      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f986 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e006      	b.n	8003904 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f982 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003902:	e175      	b.n	8003bf0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003904:	bf00      	nop
    return;
 8003906:	e173      	b.n	8003bf0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 814f 	bne.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8148 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8141 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80b6 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003960:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8145 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800396e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003972:	429a      	cmp	r2, r3
 8003974:	f080 813e 	bcs.w	8003bf4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800397e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b20      	cmp	r3, #32
 8003988:	f000 8088 	beq.w	8003a9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1d9      	bne.n	800398c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3314      	adds	r3, #20
 80039de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e1      	bne.n	80039d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e3      	bne.n	8003a14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6c:	f023 0310 	bic.w	r3, r3, #16
 8003a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc ffd4 	bl	8000a44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8ad 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ab8:	e09c      	b.n	8003bf4 <HAL_UART_IRQHandler+0x518>
 8003aba:	bf00      	nop
 8003abc:	08003d5f 	.word	0x08003d5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808e 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8089 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003afc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e3      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b42:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0310 	bic.w	r3, r3, #16
 8003b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b88:	61fa      	str	r2, [r7, #28]
 8003b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	69b9      	ldr	r1, [r7, #24]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	617b      	str	r3, [r7, #20]
   return(result);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f832 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bae:	e023      	b.n	8003bf8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x4f4>
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f8dc 	bl	8003d86 <UART_Transmit_IT>
    return;
 8003bce:	e014      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <HAL_UART_IRQHandler+0x51e>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f91b 	bl	8003e24 <UART_EndTransmit_IT>
    return;
 8003bee:	e004      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
    return;
 8003bf0:	bf00      	nop
 8003bf2:	e002      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf8:	bf00      	nop
  }
}
 8003bfa:	37e8      	adds	r7, #232	@ 0xe8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	88fa      	ldrh	r2, [r7, #6]
 8003c46:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2222      	movs	r2, #34	@ 0x22
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695a      	ldr	r2, [r3, #20]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0220 	orr.w	r2, r2, #32
 8003c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b095      	sub	sp, #84	@ 0x54
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e5      	bne.n	8003ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e5      	bne.n	8003cd6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d119      	bne.n	8003d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f023 0310 	bic.w	r3, r3, #16
 8003d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d32:	61ba      	str	r2, [r7, #24]
 8003d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6979      	ldr	r1, [r7, #20]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d54:	bf00      	nop
 8003d56:	3754      	adds	r7, #84	@ 0x54
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff ff41 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b21      	cmp	r3, #33	@ 0x21
 8003d98:	d13e      	bne.n	8003e18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da2:	d114      	bne.n	8003dce <UART_Transmit_IT+0x48>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d110      	bne.n	8003dce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	1c9a      	adds	r2, r3, #2
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	621a      	str	r2, [r3, #32]
 8003dcc:	e008      	b.n	8003de0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	1c59      	adds	r1, r3, #1
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6211      	str	r1, [r2, #32]
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4619      	mov	r1, r3
 8003dee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10f      	bne.n	8003e14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fc f981 	bl	800014c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	@ 0x30
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b22      	cmp	r3, #34	@ 0x22
 8003e66:	f040 80ae 	bne.w	8003fc6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e72:	d117      	bne.n	8003ea4 <UART_Receive_IT+0x50>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ea2:	e026      	b.n	8003ef2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	d007      	beq.n	8003ec8 <UART_Receive_IT+0x74>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <UART_Receive_IT+0x82>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e008      	b.n	8003ee8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4619      	mov	r1, r3
 8003f00:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d15d      	bne.n	8003fc2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0220 	bic.w	r2, r2, #32
 8003f14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d135      	bne.n	8003fb8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 0310 	bic.w	r3, r3, #16
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f72:	623a      	str	r2, [r7, #32]
 8003f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	69f9      	ldr	r1, [r7, #28]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d10a      	bne.n	8003faa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fe2e 	bl	8003c12 <HAL_UARTEx_RxEventCallback>
 8003fb6:	e002      	b.n	8003fbe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fc f8e3 	bl	8000184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e002      	b.n	8003fc8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3730      	adds	r7, #48	@ 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800400a:	f023 030c 	bic.w	r3, r3, #12
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	430b      	orrs	r3, r1
 8004016:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2c      	ldr	r2, [pc, #176]	@ (80040e4 <UART_SetConfig+0x114>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7ff f9be 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	e002      	b.n	8004046 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7ff f9a6 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8004044:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009a      	lsls	r2, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <UART_SetConfig+0x118>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	0119      	lsls	r1, r3, #4
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f2f3 	udiv	r2, r2, r3
 800407c:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <UART_SetConfig+0x118>)
 800407e:	fba3 0302 	umull	r0, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	2064      	movs	r0, #100	@ 0x64
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	3332      	adds	r3, #50	@ 0x32
 8004090:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <UART_SetConfig+0x118>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800409c:	4419      	add	r1, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009a      	lsls	r2, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b4:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <UART_SetConfig+0x118>)
 80040b6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2064      	movs	r0, #100	@ 0x64
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	3332      	adds	r3, #50	@ 0x32
 80040c8:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <UART_SetConfig+0x118>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	440a      	add	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40013800 	.word	0x40013800
 80040e8:	51eb851f 	.word	0x51eb851f

080040ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040ec:	b084      	sub	sp, #16
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	f107 0014 	add.w	r0, r7, #20
 80040fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	b004      	add	sp, #16
 800410a:	4770      	bx	lr

0800410c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800411c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004120:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004140:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004144:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	b29b      	uxth	r3, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	b29b      	uxth	r3, r3
 8004156:	4013      	ands	r3, r2
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004184:	b084      	sub	sp, #16
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	f107 0014 	add.w	r0, r7, #20
 8004192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	b004      	add	sp, #16
 80041c2:	4770      	bx	lr

080041c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b09d      	sub	sp, #116	@ 0x74
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80041e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	78db      	ldrb	r3, [r3, #3]
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d81f      	bhi.n	8004236 <USB_ActivateEndpoint+0x72>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <USB_ActivateEndpoint+0x38>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	08004229 	.word	0x08004229
 8004204:	0800423f 	.word	0x0800423f
 8004208:	0800421b 	.word	0x0800421b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800420c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004210:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004214:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004218:	e012      	b.n	8004240 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800421a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800421e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004222:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004226:	e00b      	b.n	8004240 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004228:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800422c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004230:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004234:	e004      	b.n	8004240 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800423c:	e000      	b.n	8004240 <USB_ActivateEndpoint+0x7c>
      break;
 800423e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800424e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004252:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800425a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800425e:	b29b      	uxth	r3, r3
 8004260:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004278:	b29b      	uxth	r3, r3
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800429a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800429e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	7b1b      	ldrb	r3, [r3, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 8178 	bne.w	80045a0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	785b      	ldrb	r3, [r3, #1]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8084 	beq.w	80043c2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4413      	add	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	011a      	lsls	r2, r3, #4
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	88db      	ldrh	r3, [r3, #6]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	827b      	strh	r3, [r7, #18]
 80042fc:	8a7b      	ldrh	r3, [r7, #18]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01b      	beq.n	800433e <USB_ActivateEndpoint+0x17a>
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431c:	823b      	strh	r3, [r7, #16]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	8a3b      	ldrh	r3, [r7, #16]
 800432a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800432e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004336:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800433a:	b29b      	uxth	r3, r3
 800433c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	78db      	ldrb	r3, [r3, #3]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d020      	beq.n	8004388 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800435c:	81bb      	strh	r3, [r7, #12]
 800435e:	89bb      	ldrh	r3, [r7, #12]
 8004360:	f083 0320 	eor.w	r3, r3, #32
 8004364:	81bb      	strh	r3, [r7, #12]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	89bb      	ldrh	r3, [r7, #12]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800437a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800437e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]
 8004386:	e2d5      	b.n	8004934 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800439a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800439e:	81fb      	strh	r3, [r7, #14]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	89fb      	ldrh	r3, [r7, #14]
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
 80043c0:	e2b8      	b.n	8004934 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	4413      	add	r3, r2
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	011a      	lsls	r2, r3, #4
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	88db      	ldrh	r3, [r3, #6]
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	4413      	add	r3, r2
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	011a      	lsls	r2, r3, #4
 8004410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004412:	4413      	add	r3, r2
 8004414:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004424:	b29a      	uxth	r2, r3
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004430:	d91d      	bls.n	800446e <USB_ActivateEndpoint+0x2aa>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <USB_ActivateEndpoint+0x288>
 8004446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004448:	3b01      	subs	r3, #1
 800444a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29a      	uxth	r2, r3
 8004452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004454:	b29b      	uxth	r3, r3
 8004456:	029b      	lsls	r3, r3, #10
 8004458:	b29b      	uxth	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	b29b      	uxth	r3, r3
 800445e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004466:	b29a      	uxth	r2, r3
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	e026      	b.n	80044bc <USB_ActivateEndpoint+0x2f8>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <USB_ActivateEndpoint+0x2c8>
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004484:	b29a      	uxth	r2, r3
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	e017      	b.n	80044bc <USB_ActivateEndpoint+0x2f8>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <USB_ActivateEndpoint+0x2e2>
 80044a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044a2:	3301      	adds	r3, #1
 80044a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80044ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <USB_ActivateEndpoint+0x348>
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ea:	843b      	strh	r3, [r7, #32]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	8c3b      	ldrh	r3, [r7, #32]
 80044f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004508:	b29b      	uxth	r3, r3
 800450a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d124      	bne.n	800455e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452a:	83bb      	strh	r3, [r7, #28]
 800452c:	8bbb      	ldrh	r3, [r7, #28]
 800452e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004532:	83bb      	strh	r3, [r7, #28]
 8004534:	8bbb      	ldrh	r3, [r7, #28]
 8004536:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800453a:	83bb      	strh	r3, [r7, #28]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	8bbb      	ldrh	r3, [r7, #28]
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]
 800455c:	e1ea      	b.n	8004934 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004574:	83fb      	strh	r3, [r7, #30]
 8004576:	8bfb      	ldrh	r3, [r7, #30]
 8004578:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800457c:	83fb      	strh	r3, [r7, #30]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8bfb      	ldrh	r3, [r7, #30]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
 800459e:	e1c9      	b.n	8004934 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	78db      	ldrb	r3, [r3, #3]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d11e      	bne.n	80045e6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045be:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	441a      	add	r2, r3
 80045cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80045d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045d8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80045dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	8013      	strh	r3, [r2, #0]
 80045e4:	e01d      	b.n	8004622 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80045f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800460e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800461a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800461e:	b29b      	uxth	r3, r3
 8004620:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800462c:	b29b      	uxth	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004632:	4413      	add	r3, r2
 8004634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	011a      	lsls	r2, r3, #4
 800463c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800463e:	4413      	add	r3, r2
 8004640:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004644:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	891b      	ldrh	r3, [r3, #8]
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	b29b      	uxth	r3, r3
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	657b      	str	r3, [r7, #84]	@ 0x54
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004660:	b29b      	uxth	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004666:	4413      	add	r3, r2
 8004668:	657b      	str	r3, [r7, #84]	@ 0x54
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	011a      	lsls	r2, r3, #4
 8004670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004672:	4413      	add	r3, r2
 8004674:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004678:	653b      	str	r3, [r7, #80]	@ 0x50
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	895b      	ldrh	r3, [r3, #10]
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004688:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f040 8093 	bne.w	80047ba <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80046a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80046a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <USB_ActivateEndpoint+0x524>
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80046f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <USB_ActivateEndpoint+0x574>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004716:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004730:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800474a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004750:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004752:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004756:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004758:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800475a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800475e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004796:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]
 80047b8:	e0bc      	b.n	8004934 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80047ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80047ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01d      	beq.n	8004812 <USB_ActivateEndpoint+0x64e>
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ec:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80047fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004806:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800480a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800480e:	b29b      	uxth	r3, r3
 8004810:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004822:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01d      	beq.n	800486a <USB_ActivateEndpoint+0x6a6>
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004844:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800485e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004862:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d024      	beq.n	80048bc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004888:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800488c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004890:	f083 0320 	eor.w	r3, r3, #32
 8004894:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80048a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]
 80048ba:	e01d      	b.n	80048f8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	441a      	add	r2, r3
 800491c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004930:	b29b      	uxth	r3, r3
 8004932:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004934:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004938:	4618      	mov	r0, r3
 800493a:	3774      	adds	r7, #116	@ 0x74
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop

08004944 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004944:	b480      	push	{r7}
 8004946:	b08d      	sub	sp, #52	@ 0x34
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	7b1b      	ldrb	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 808e 	bne.w	8004a74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d044      	beq.n	80049ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	81bb      	strh	r3, [r7, #12]
 800496e:	89bb      	ldrh	r3, [r7, #12]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <USB_DeactivateEndpoint+0x6c>
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800498a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498e:	817b      	strh	r3, [r7, #10]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049c6:	813b      	strh	r3, [r7, #8]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	441a      	add	r2, r3
 80049d2:	893b      	ldrh	r3, [r7, #8]
 80049d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]
 80049e8:	e192      	b.n	8004d10 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	827b      	strh	r3, [r7, #18]
 80049f8:	8a7b      	ldrh	r3, [r7, #18]
 80049fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01b      	beq.n	8004a3a <USB_DeactivateEndpoint+0xf6>
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a18:	823b      	strh	r3, [r7, #16]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8a3b      	ldrh	r3, [r7, #16]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a50:	81fb      	strh	r3, [r7, #14]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	441a      	add	r2, r3
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
 8004a72:	e14d      	b.n	8004d10 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 80a5 	bne.w	8004bc8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	843b      	strh	r3, [r7, #32]
 8004a8c:	8c3b      	ldrh	r3, [r7, #32]
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <USB_DeactivateEndpoint+0x18a>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aac:	83fb      	strh	r3, [r7, #30]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8bfb      	ldrh	r3, [r7, #30]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	83bb      	strh	r3, [r7, #28]
 8004adc:	8bbb      	ldrh	r3, [r7, #28]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01b      	beq.n	8004b1e <USB_DeactivateEndpoint+0x1da>
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afc:	837b      	strh	r3, [r7, #26]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	8b7b      	ldrh	r3, [r7, #26]
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b34:	833b      	strh	r3, [r7, #24]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	8b3b      	ldrh	r3, [r7, #24]
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6c:	82fb      	strh	r3, [r7, #22]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8afb      	ldrh	r3, [r7, #22]
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba4:	82bb      	strh	r3, [r7, #20]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	8abb      	ldrh	r3, [r7, #20]
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
 8004bc6:	e0a3      	b.n	8004d10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004bd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <USB_DeactivateEndpoint+0x2d4>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004c26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <USB_DeactivateEndpoint+0x324>
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c46:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3734      	adds	r7, #52	@ 0x34
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr

08004d1c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b0c2      	sub	sp, #264	@ 0x108
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d2a:	6018      	str	r0, [r3, #0]
 8004d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d34:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	f040 86b7 	bne.w	8005ab6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d908      	bls.n	8004d76 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d74:	e007      	b.n	8004d86 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	7b1b      	ldrb	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d13a      	bne.n	8004e0c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6959      	ldr	r1, [r3, #20]
 8004da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	88da      	ldrh	r2, [r3, #6]
 8004dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004db8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f001 fc9c 	bl	80066fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	011a      	lsls	r2, r3, #4
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	f000 be1f 	b.w	8005a4a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	78db      	ldrb	r3, [r3, #3]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	f040 8462 	bne.w	80056e2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	f240 83df 	bls.w	80055fa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e8c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	1ad2      	subs	r2, r2, r3
 8004eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 81c7 	beq.w	800526c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d177      	bne.n	8004fea <USB_EPStartXfer+0x2ce>
 8004efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	4413      	add	r3, r2
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	011a      	lsls	r2, r3, #4
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	4413      	add	r3, r2
 8004f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f4c:	d921      	bls.n	8004f92 <USB_EPStartXfer+0x276>
 8004f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <USB_EPStartXfer+0x252>
 8004f64:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	029b      	lsls	r3, r3, #10
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e050      	b.n	8005034 <USB_EPStartXfer+0x318>
 8004f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <USB_EPStartXfer+0x294>
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	801a      	strh	r2, [r3, #0]
 8004fae:	e041      	b.n	8005034 <USB_EPStartXfer+0x318>
 8004fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <USB_EPStartXfer+0x2b4>
 8004fc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fca:	3301      	adds	r3, #1
 8004fcc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	029b      	lsls	r3, r3, #10
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	e024      	b.n	8005034 <USB_EPStartXfer+0x318>
 8004fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d11c      	bne.n	8005034 <USB_EPStartXfer+0x318>
 8004ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005008:	b29b      	uxth	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	4413      	add	r3, r2
 8005010:	633b      	str	r3, [r7, #48]	@ 0x30
 8005012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	011a      	lsls	r2, r3, #4
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	4413      	add	r3, r2
 8005024:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502e:	b29a      	uxth	r2, r3
 8005030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005032:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	895b      	ldrh	r3, [r3, #10]
 8005040:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6959      	ldr	r1, [r3, #20]
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005054:	b29b      	uxth	r3, r3
 8005056:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800505a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800505e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005062:	6800      	ldr	r0, [r0, #0]
 8005064:	f001 fb49 	bl	80066fa <USB_WritePMA>
            ep->xfer_buff += len;
 8005068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005078:	441a      	add	r2, r3
 800507a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d90f      	bls.n	80050c2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80050a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b2:	1ad2      	subs	r2, r2, r3
 80050b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	621a      	str	r2, [r3, #32]
 80050c0:	e00e      	b.n	80050e0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80050c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80050d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d177      	bne.n	80051e0 <USB_EPStartXfer+0x4c4>
 80050f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800510a:	b29b      	uxth	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	4413      	add	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4413      	add	r3, r2
 8005126:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005136:	b29a      	uxth	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005140:	2b3e      	cmp	r3, #62	@ 0x3e
 8005142:	d921      	bls.n	8005188 <USB_EPStartXfer+0x46c>
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <USB_EPStartXfer+0x448>
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800515e:	3b01      	subs	r3, #1
 8005160:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	4313      	orrs	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005180:	b29a      	uxth	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	e056      	b.n	8005236 <USB_EPStartXfer+0x51a>
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <USB_EPStartXfer+0x48a>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519e:	b29a      	uxth	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	e047      	b.n	8005236 <USB_EPStartXfer+0x51a>
 80051a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <USB_EPStartXfer+0x4aa>
 80051bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c0:	3301      	adds	r3, #1
 80051c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	029b      	lsls	r3, r3, #10
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	4313      	orrs	r3, r2
 80051d8:	b29a      	uxth	r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e02a      	b.n	8005236 <USB_EPStartXfer+0x51a>
 80051e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d122      	bne.n	8005236 <USB_EPStartXfer+0x51a>
 80051f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	623b      	str	r3, [r7, #32]
 80051fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	4413      	add	r3, r2
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	011a      	lsls	r2, r3, #4
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	4413      	add	r3, r2
 8005226:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005230:	b29a      	uxth	r2, r3
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	891b      	ldrh	r3, [r3, #8]
 8005242:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6959      	ldr	r1, [r3, #20]
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005256:	b29b      	uxth	r3, r3
 8005258:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800525c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005260:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005264:	6800      	ldr	r0, [r0, #0]
 8005266:	f001 fa48 	bl	80066fa <USB_WritePMA>
 800526a:	e3ee      	b.n	8005a4a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800526c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d177      	bne.n	800536c <USB_EPStartXfer+0x650>
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005296:	b29b      	uxth	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800529c:	4413      	add	r3, r2
 800529e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	011a      	lsls	r2, r3, #4
 80052ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ce:	d921      	bls.n	8005314 <USB_EPStartXfer+0x5f8>
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <USB_EPStartXfer+0x5d4>
 80052e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ea:	3b01      	subs	r3, #1
 80052ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	029b      	lsls	r3, r3, #10
 80052fe:	b29b      	uxth	r3, r3
 8005300:	4313      	orrs	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530c:	b29a      	uxth	r2, r3
 800530e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e056      	b.n	80053c2 <USB_EPStartXfer+0x6a6>
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <USB_EPStartXfer+0x616>
 800531c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532e:	801a      	strh	r2, [r3, #0]
 8005330:	e047      	b.n	80053c2 <USB_EPStartXfer+0x6a6>
 8005332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <USB_EPStartXfer+0x636>
 8005348:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800534c:	3301      	adds	r3, #1
 800534e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800535c:	b29b      	uxth	r3, r3
 800535e:	029b      	lsls	r3, r3, #10
 8005360:	b29b      	uxth	r3, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	b29a      	uxth	r2, r3
 8005366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	e02a      	b.n	80053c2 <USB_EPStartXfer+0x6a6>
 800536c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d122      	bne.n	80053c2 <USB_EPStartXfer+0x6a6>
 800537c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005380:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	653b      	str	r3, [r7, #80]	@ 0x50
 8005388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800539c:	4413      	add	r3, r2
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	011a      	lsls	r2, r3, #4
 80053ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b0:	4413      	add	r3, r2
 80053b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	891b      	ldrh	r3, [r3, #8]
 80053ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6959      	ldr	r1, [r3, #20]
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053f0:	6800      	ldr	r0, [r0, #0]
 80053f2:	f001 f982 	bl	80066fa <USB_WritePMA>
            ep->xfer_buff += len;
 80053f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005406:	441a      	add	r2, r3
 8005408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	429a      	cmp	r2, r3
 800542e:	d90f      	bls.n	8005450 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005440:	1ad2      	subs	r2, r2, r3
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	621a      	str	r2, [r3, #32]
 800544e:	e00e      	b.n	800546e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800546e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	643b      	str	r3, [r7, #64]	@ 0x40
 800547a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d177      	bne.n	800557a <USB_EPStartXfer+0x85e>
 800548a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054aa:	4413      	add	r3, r2
 80054ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	011a      	lsls	r2, r3, #4
 80054bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054be:	4413      	add	r3, r2
 80054c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054da:	2b3e      	cmp	r3, #62	@ 0x3e
 80054dc:	d921      	bls.n	8005522 <USB_EPStartXfer+0x806>
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d104      	bne.n	80054fe <USB_EPStartXfer+0x7e2>
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	3b01      	subs	r3, #1
 80054fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29a      	uxth	r2, r3
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005508:	b29b      	uxth	r3, r3
 800550a:	029b      	lsls	r3, r3, #10
 800550c:	b29b      	uxth	r3, r3
 800550e:	4313      	orrs	r3, r2
 8005510:	b29b      	uxth	r3, r3
 8005512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551a:	b29a      	uxth	r2, r3
 800551c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e050      	b.n	80055c4 <USB_EPStartXfer+0x8a8>
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <USB_EPStartXfer+0x824>
 800552a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e041      	b.n	80055c4 <USB_EPStartXfer+0x8a8>
 8005540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <USB_EPStartXfer+0x844>
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555a:	3301      	adds	r3, #1
 800555c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29a      	uxth	r2, r3
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	b29b      	uxth	r3, r3
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	b29b      	uxth	r3, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	b29a      	uxth	r2, r3
 8005574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	e024      	b.n	80055c4 <USB_EPStartXfer+0x8a8>
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d11c      	bne.n	80055c4 <USB_EPStartXfer+0x8a8>
 800558a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800559e:	4413      	add	r3, r2
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	011a      	lsls	r2, r3, #4
 80055b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055b2:	4413      	add	r3, r2
 80055b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	895b      	ldrh	r3, [r3, #10]
 80055d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6959      	ldr	r1, [r3, #20]
 80055e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055f2:	6800      	ldr	r0, [r0, #0]
 80055f4:	f001 f881 	bl	80066fa <USB_WritePMA>
 80055f8:	e227      	b.n	8005a4a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800560a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800562c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005630:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800565a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005680:	b29b      	uxth	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005686:	4413      	add	r3, r2
 8005688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800568a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	011a      	lsls	r2, r3, #4
 8005698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800569a:	4413      	add	r3, r2
 800569c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	891b      	ldrh	r3, [r3, #8]
 80056b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6959      	ldr	r1, [r3, #20]
 80056c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056da:	6800      	ldr	r0, [r0, #0]
 80056dc:	f001 f80d 	bl	80066fa <USB_WritePMA>
 80056e0:	e1b3      	b.n	8005a4a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80056e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6a1a      	ldr	r2, [r3, #32]
 80056ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f2:	1ad2      	subs	r2, r2, r3
 80056f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80c6 	beq.w	80058b4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	673b      	str	r3, [r7, #112]	@ 0x70
 8005734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d177      	bne.n	8005834 <USB_EPStartXfer+0xb18>
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005764:	4413      	add	r3, r2
 8005766:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	011a      	lsls	r2, r3, #4
 8005776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005778:	4413      	add	r3, r2
 800577a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800577e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578a:	b29a      	uxth	r2, r3
 800578c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005794:	2b3e      	cmp	r3, #62	@ 0x3e
 8005796:	d921      	bls.n	80057dc <USB_EPStartXfer+0xac0>
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <USB_EPStartXfer+0xa9c>
 80057ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057b2:	3b01      	subs	r3, #1
 80057b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29a      	uxth	r2, r3
 80057be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e050      	b.n	800587e <USB_EPStartXfer+0xb62>
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <USB_EPStartXfer+0xade>
 80057e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	e041      	b.n	800587e <USB_EPStartXfer+0xb62>
 80057fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d004      	beq.n	800581a <USB_EPStartXfer+0xafe>
 8005810:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005814:	3301      	adds	r3, #1
 8005816:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800581a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29a      	uxth	r2, r3
 8005820:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005824:	b29b      	uxth	r3, r3
 8005826:	029b      	lsls	r3, r3, #10
 8005828:	b29b      	uxth	r3, r3
 800582a:	4313      	orrs	r3, r2
 800582c:	b29a      	uxth	r2, r3
 800582e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	e024      	b.n	800587e <USB_EPStartXfer+0xb62>
 8005834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d11c      	bne.n	800587e <USB_EPStartXfer+0xb62>
 8005844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005858:	4413      	add	r3, r2
 800585a:	673b      	str	r3, [r7, #112]	@ 0x70
 800585c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	011a      	lsls	r2, r3, #4
 800586a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800586c:	4413      	add	r3, r2
 800586e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	b29a      	uxth	r2, r3
 800587a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800587c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800587e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	895b      	ldrh	r3, [r3, #10]
 800588a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800588e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6959      	ldr	r1, [r3, #20]
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f000 ff24 	bl	80066fa <USB_WritePMA>
 80058b2:	e0ca      	b.n	8005a4a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d177      	bne.n	80059b4 <USB_EPStartXfer+0xc98>
 80058c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058de:	b29b      	uxth	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058e4:	4413      	add	r3, r2
 80058e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	011a      	lsls	r2, r3, #4
 80058f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590a:	b29a      	uxth	r2, r3
 800590c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005914:	2b3e      	cmp	r3, #62	@ 0x3e
 8005916:	d921      	bls.n	800595c <USB_EPStartXfer+0xc40>
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <USB_EPStartXfer+0xc1c>
 800592e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005932:	3b01      	subs	r3, #1
 8005934:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005938:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29a      	uxth	r2, r3
 800593e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005942:	b29b      	uxth	r3, r3
 8005944:	029b      	lsls	r3, r3, #10
 8005946:	b29b      	uxth	r3, r3
 8005948:	4313      	orrs	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005954:	b29a      	uxth	r2, r3
 8005956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e05c      	b.n	8005a16 <USB_EPStartXfer+0xcfa>
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <USB_EPStartXfer+0xc5e>
 8005964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005972:	b29a      	uxth	r2, r3
 8005974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	e04d      	b.n	8005a16 <USB_EPStartXfer+0xcfa>
 800597a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <USB_EPStartXfer+0xc7e>
 8005990:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005994:	3301      	adds	r3, #1
 8005996:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800599a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	029b      	lsls	r3, r3, #10
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	4313      	orrs	r3, r2
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	e030      	b.n	8005a16 <USB_EPStartXfer+0xcfa>
 80059b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d128      	bne.n	8005a16 <USB_EPStartXfer+0xcfa>
 80059c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059e8:	4413      	add	r3, r2
 80059ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	011a      	lsls	r2, r3, #4
 80059fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	891b      	ldrh	r3, [r3, #8]
 8005a22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6959      	ldr	r1, [r3, #20]
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a44:	6800      	ldr	r0, [r0, #0]
 8005a46:	f000 fe58 	bl	80066fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a70:	817b      	strh	r3, [r7, #10]
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	f083 0310 	eor.w	r3, r3, #16
 8005a78:	817b      	strh	r3, [r7, #10]
 8005a7a:	897b      	ldrh	r3, [r7, #10]
 8005a7c:	f083 0320 	eor.w	r3, r3, #32
 8005a80:	817b      	strh	r3, [r7, #10]
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	441a      	add	r2, r3
 8005a9c:	897b      	ldrh	r3, [r7, #10]
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]
 8005ab2:	f000 bcde 	b.w	8006472 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	7b1b      	ldrb	r3, [r3, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f040 80bb 	bne.w	8005c3e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d917      	bls.n	8005b14 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b04:	1ad2      	subs	r2, r2, r3
 8005b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	619a      	str	r2, [r3, #24]
 8005b12:	e00e      	b.n	8005b32 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b56:	4413      	add	r3, r2
 8005b58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	011a      	lsls	r2, r3, #4
 8005b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b92:	d924      	bls.n	8005bde <USB_EPStartXfer+0xec2>
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <USB_EPStartXfer+0xe98>
 8005baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	029b      	lsls	r3, r3, #10
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	f000 bc10 	b.w	80063fe <USB_EPStartXfer+0x16e2>
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10c      	bne.n	8005c00 <USB_EPStartXfer+0xee4>
 8005be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e3fe      	b.n	80063fe <USB_EPStartXfer+0x16e2>
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <USB_EPStartXfer+0xf04>
 8005c16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	029b      	lsls	r3, r3, #10
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	e3df      	b.n	80063fe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	78db      	ldrb	r3, [r3, #3]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	f040 8218 	bne.w	8006080 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 809d 	bne.w	8005d9c <USB_EPStartXfer+0x1080>
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c86:	4413      	add	r3, r2
 8005c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cba:	801a      	strh	r2, [r3, #0]
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cca:	d92b      	bls.n	8005d24 <USB_EPStartXfer+0x1008>
 8005ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <USB_EPStartXfer+0xfe0>
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	029b      	lsls	r3, r3, #10
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	e070      	b.n	8005e06 <USB_EPStartXfer+0x10ea>
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10c      	bne.n	8005d4e <USB_EPStartXfer+0x1032>
 8005d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e05b      	b.n	8005e06 <USB_EPStartXfer+0x10ea>
 8005d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <USB_EPStartXfer+0x1062>
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d78:	3301      	adds	r3, #1
 8005d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	4313      	orrs	r3, r2
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e034      	b.n	8005e06 <USB_EPStartXfer+0x10ea>
 8005d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d12c      	bne.n	8005e06 <USB_EPStartXfer+0x10ea>
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	011a      	lsls	r2, r3, #4
 8005de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005de8:	4413      	add	r3, r2
 8005dea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 809d 	bne.w	8005f60 <USB_EPStartXfer+0x1244>
 8005e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	011a      	lsls	r2, r3, #4
 8005e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e62:	4413      	add	r3, r2
 8005e64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e8e:	d92b      	bls.n	8005ee8 <USB_EPStartXfer+0x11cc>
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <USB_EPStartXfer+0x11a4>
 8005eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e069      	b.n	8005fbc <USB_EPStartXfer+0x12a0>
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10c      	bne.n	8005f12 <USB_EPStartXfer+0x11f6>
 8005ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e054      	b.n	8005fbc <USB_EPStartXfer+0x12a0>
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <USB_EPStartXfer+0x1226>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	029b      	lsls	r3, r3, #10
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	4313      	orrs	r3, r2
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	e02d      	b.n	8005fbc <USB_EPStartXfer+0x12a0>
 8005f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d125      	bne.n	8005fbc <USB_EPStartXfer+0x12a0>
 8005f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f86:	4413      	add	r3, r2
 8005f88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	011a      	lsls	r2, r3, #4
 8005f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8218 	beq.w	80063fe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <USB_EPStartXfer+0x12ea>
 8005ffa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10d      	bne.n	8006022 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006006:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800600a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 81f5 	bne.w	80063fe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006014:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 81ee 	bne.w	80063fe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006048:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800604c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	441a      	add	r2, r3
 8006066:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006076:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]
 800607e:	e1be      	b.n	80063fe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	78db      	ldrb	r3, [r3, #3]
 800608c:	2b01      	cmp	r3, #1
 800608e:	f040 81b4 	bne.w	80063fa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d917      	bls.n	80060de <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80060ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80060be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	619a      	str	r2, [r3, #24]
 80060dc:	e00e      	b.n	80060fc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80060de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80060fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 8085 	bne.w	8006218 <USB_EPStartXfer+0x14fc>
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800614a:	4413      	add	r3, r2
 800614c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006150:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006160:	b29a      	uxth	r2, r3
 8006162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	2b3e      	cmp	r3, #62	@ 0x3e
 800616e:	d923      	bls.n	80061b8 <USB_EPStartXfer+0x149c>
 8006170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <USB_EPStartXfer+0x1474>
 8006186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800618a:	3b01      	subs	r3, #1
 800618c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29a      	uxth	r2, r3
 8006198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800619c:	b29b      	uxth	r3, r3
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	e060      	b.n	800627a <USB_EPStartXfer+0x155e>
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10c      	bne.n	80061da <USB_EPStartXfer+0x14be>
 80061c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e04f      	b.n	800627a <USB_EPStartXfer+0x155e>
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <USB_EPStartXfer+0x14de>
 80061f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061f4:	3301      	adds	r3, #1
 80061f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29a      	uxth	r2, r3
 8006202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006206:	b29b      	uxth	r3, r3
 8006208:	029b      	lsls	r3, r3, #10
 800620a:	b29b      	uxth	r3, r3
 800620c:	4313      	orrs	r3, r2
 800620e:	b29a      	uxth	r2, r3
 8006210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e030      	b.n	800627a <USB_EPStartXfer+0x155e>
 8006218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d128      	bne.n	800627a <USB_EPStartXfer+0x155e>
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006244:	b29b      	uxth	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800624c:	4413      	add	r3, r2
 800624e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	011a      	lsls	r2, r3, #4
 8006260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006264:	4413      	add	r3, r2
 8006266:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800626a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	b29a      	uxth	r2, r3
 8006274:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006278:	801a      	strh	r2, [r3, #0]
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 8085 	bne.w	80063a4 <USB_EPStartXfer+0x1688>
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062be:	4413      	add	r3, r2
 80062c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	011a      	lsls	r2, r3, #4
 80062d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062d6:	4413      	add	r3, r2
 80062d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80062fa:	d923      	bls.n	8006344 <USB_EPStartXfer+0x1628>
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <USB_EPStartXfer+0x1600>
 8006312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006316:	3b01      	subs	r3, #1
 8006318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800631c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29b      	uxth	r3, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e05c      	b.n	80063fe <USB_EPStartXfer+0x16e2>
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10c      	bne.n	8006366 <USB_EPStartXfer+0x164a>
 800634c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	e04b      	b.n	80063fe <USB_EPStartXfer+0x16e2>
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <USB_EPStartXfer+0x166a>
 800637c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006380:	3301      	adds	r3, #1
 8006382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006392:	b29b      	uxth	r3, r3
 8006394:	029b      	lsls	r3, r3, #10
 8006396:	b29b      	uxth	r3, r3
 8006398:	4313      	orrs	r3, r2
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e02c      	b.n	80063fe <USB_EPStartXfer+0x16e2>
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d124      	bne.n	80063fe <USB_EPStartXfer+0x16e2>
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063ca:	4413      	add	r3, r2
 80063cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	011a      	lsls	r2, r3, #4
 80063de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063e2:	4413      	add	r3, r2
 80063e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	e001      	b.n	80063fe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e03a      	b.n	8006474 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006424:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006428:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800642c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006430:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006434:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006438:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800643c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800646a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d020      	beq.n	80064d2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064a6:	81bb      	strh	r3, [r7, #12]
 80064a8:	89bb      	ldrh	r3, [r7, #12]
 80064aa:	f083 0310 	eor.w	r3, r3, #16
 80064ae:	81bb      	strh	r3, [r7, #12]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	441a      	add	r2, r3
 80064ba:	89bb      	ldrh	r3, [r7, #12]
 80064bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	8013      	strh	r3, [r2, #0]
 80064d0:	e01f      	b.n	8006512 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e8:	81fb      	strh	r3, [r7, #14]
 80064ea:	89fb      	ldrh	r3, [r7, #14]
 80064ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064f0:	81fb      	strh	r3, [r7, #14]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	441a      	add	r2, r3
 80064fc:	89fb      	ldrh	r3, [r7, #14]
 80064fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650e:	b29b      	uxth	r3, r3
 8006510:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800651e:	b480      	push	{r7}
 8006520:	b087      	sub	sp, #28
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	7b1b      	ldrb	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 809d 	bne.w	800666c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d04c      	beq.n	80065d4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	823b      	strh	r3, [r7, #16]
 8006548:	8a3b      	ldrh	r3, [r7, #16]
 800654a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01b      	beq.n	800658a <USB_EPClearStall+0x6c>
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006568:	81fb      	strh	r3, [r7, #14]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	441a      	add	r2, r3
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800657e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006582:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006586:	b29b      	uxth	r3, r3
 8006588:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	78db      	ldrb	r3, [r3, #3]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d06c      	beq.n	800666c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a8:	81bb      	strh	r3, [r7, #12]
 80065aa:	89bb      	ldrh	r3, [r7, #12]
 80065ac:	f083 0320 	eor.w	r3, r3, #32
 80065b0:	81bb      	strh	r3, [r7, #12]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	89bb      	ldrh	r3, [r7, #12]
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]
 80065d2:	e04b      	b.n	800666c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	82fb      	strh	r3, [r7, #22]
 80065e2:	8afb      	ldrh	r3, [r7, #22]
 80065e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01b      	beq.n	8006624 <USB_EPClearStall+0x106>
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006602:	82bb      	strh	r3, [r7, #20]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	441a      	add	r2, r3
 800660e:	8abb      	ldrh	r3, [r7, #20]
 8006610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800661c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006620:	b29b      	uxth	r3, r3
 8006622:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800663a:	827b      	strh	r3, [r7, #18]
 800663c:	8a7b      	ldrh	r3, [r7, #18]
 800663e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006642:	827b      	strh	r3, [r7, #18]
 8006644:	8a7b      	ldrh	r3, [r7, #18]
 8006646:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800664a:	827b      	strh	r3, [r7, #18]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	441a      	add	r2, r3
 8006656:	8a7b      	ldrh	r3, [r7, #18]
 8006658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006668:	b29b      	uxth	r3, r3
 800666a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2280      	movs	r2, #128	@ 0x80
 800668e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr

080066b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066d8:	68fb      	ldr	r3, [r7, #12]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b08b      	sub	sp, #44	@ 0x2c
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	4611      	mov	r1, r2
 8006706:	461a      	mov	r2, r3
 8006708:	460b      	mov	r3, r1
 800670a:	80fb      	strh	r3, [r7, #6]
 800670c:	4613      	mov	r3, r2
 800670e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006710:	88bb      	ldrh	r3, [r7, #4]
 8006712:	3301      	adds	r3, #1
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	005a      	lsls	r2, r3, #1
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800672c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
 8006732:	e01e      	b.n	8006772 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	b21a      	sxth	r2, r3
 8006744:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006748:	4313      	orrs	r3, r2
 800674a:	b21b      	sxth	r3, r3
 800674c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	8a7a      	ldrh	r2, [r7, #18]
 8006752:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	3302      	adds	r3, #2
 8006758:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	3302      	adds	r3, #2
 800675e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3301      	adds	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	3301      	adds	r3, #1
 800676a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	3b01      	subs	r3, #1
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1dd      	bne.n	8006734 <USB_WritePMA+0x3a>
  }
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	372c      	adds	r7, #44	@ 0x2c
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr

08006784 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006784:	b480      	push	{r7}
 8006786:	b08b      	sub	sp, #44	@ 0x2c
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	460b      	mov	r3, r1
 8006794:	80fb      	strh	r3, [r7, #6]
 8006796:	4613      	mov	r3, r2
 8006798:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800679a:	88bb      	ldrh	r3, [r7, #4]
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	b29b      	uxth	r3, r3
 80067a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	005a      	lsls	r2, r3, #1
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80067bc:	e01b      	b.n	80067f6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	3302      	adds	r3, #2
 80067ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	3301      	adds	r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	0a1b      	lsrs	r3, r3, #8
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	3302      	adds	r3, #2
 80067ee:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	3b01      	subs	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e0      	bne.n	80067be <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80067fc:	88bb      	ldrh	r3, [r7, #4]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	701a      	strb	r2, [r3, #0]
  }
}
 8006818:	bf00      	nop
 800681a:	372c      	adds	r7, #44	@ 0x2c
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr

08006822 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7c1b      	ldrb	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d115      	bne.n	8006866 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800683a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800683e:	2202      	movs	r2, #2
 8006840:	2181      	movs	r1, #129	@ 0x81
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fe7b 	bl	800853e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800684e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006852:	2202      	movs	r2, #2
 8006854:	2101      	movs	r1, #1
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 fe71 	bl	800853e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006864:	e012      	b.n	800688c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006866:	2340      	movs	r3, #64	@ 0x40
 8006868:	2202      	movs	r2, #2
 800686a:	2181      	movs	r1, #129	@ 0x81
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fe66 	bl	800853e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006878:	2340      	movs	r3, #64	@ 0x40
 800687a:	2202      	movs	r2, #2
 800687c:	2101      	movs	r1, #1
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 fe5d 	bl	800853e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800688c:	2308      	movs	r3, #8
 800688e:	2203      	movs	r2, #3
 8006890:	2182      	movs	r1, #130	@ 0x82
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fe53 	bl	800853e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800689e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80068a2:	f001 ff73 	bl	800878c <USBD_static_malloc>
 80068a6:	4602      	mov	r2, r0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
 80068bc:	e026      	b.n	800690c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068c4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7c1b      	ldrb	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d109      	bne.n	80068fc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068f2:	2101      	movs	r1, #1
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 ff13 	bl	8008720 <USBD_LL_PrepareReceive>
 80068fa:	e007      	b.n	800690c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006902:	2340      	movs	r3, #64	@ 0x40
 8006904:	2101      	movs	r1, #1
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 ff0a 	bl	8008720 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006926:	2181      	movs	r1, #129	@ 0x81
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fe2e 	bl	800858a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006934:	2101      	movs	r1, #1
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 fe27 	bl	800858a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006944:	2182      	movs	r1, #130	@ 0x82
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fe1f 	bl	800858a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696c:	4618      	mov	r0, r3
 800696e:	f001 ff19 	bl	80087a4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006994:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d039      	beq.n	8006a22 <USBD_CDC_Setup+0x9e>
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d17f      	bne.n	8006ab2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	88db      	ldrh	r3, [r3, #6]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d029      	beq.n	8006a0e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	da11      	bge.n	80069e8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	88d2      	ldrh	r2, [r2, #6]
 80069d6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069d8:	6939      	ldr	r1, [r7, #16]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	88db      	ldrh	r3, [r3, #6]
 80069de:	461a      	mov	r2, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fa05 	bl	8007df0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80069e6:	e06b      	b.n	8006ac0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785a      	ldrb	r2, [r3, #1]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069fe:	6939      	ldr	r1, [r7, #16]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	88db      	ldrh	r3, [r3, #6]
 8006a04:	461a      	mov	r2, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fa20 	bl	8007e4c <USBD_CtlPrepareRx>
      break;
 8006a0c:	e058      	b.n	8006ac0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	7850      	ldrb	r0, [r2, #1]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	4798      	blx	r3
      break;
 8006a20:	e04e      	b.n	8006ac0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b0b      	cmp	r3, #11
 8006a28:	d02e      	beq.n	8006a88 <USBD_CDC_Setup+0x104>
 8006a2a:	2b0b      	cmp	r3, #11
 8006a2c:	dc38      	bgt.n	8006aa0 <USBD_CDC_Setup+0x11c>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <USBD_CDC_Setup+0xb4>
 8006a32:	2b0a      	cmp	r3, #10
 8006a34:	d014      	beq.n	8006a60 <USBD_CDC_Setup+0xdc>
 8006a36:	e033      	b.n	8006aa0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d107      	bne.n	8006a52 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	2202      	movs	r2, #2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f9d0 	bl	8007df0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a50:	e02e      	b.n	8006ab0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f961 	bl	8007d1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5e:	e027      	b.n	8006ab0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d107      	bne.n	8006a7a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a6a:	f107 030f 	add.w	r3, r7, #15
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 f9bc 	bl	8007df0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a78:	e01a      	b.n	8006ab0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f94d 	bl	8007d1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a82:	2302      	movs	r3, #2
 8006a84:	75fb      	strb	r3, [r7, #23]
          break;
 8006a86:	e013      	b.n	8006ab0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d00d      	beq.n	8006aae <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f941 	bl	8007d1c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a9e:	e006      	b.n	8006aae <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 f93a 	bl	8007d1c <USBD_CtlError>
          ret = USBD_FAIL;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	75fb      	strb	r3, [r7, #23]
          break;
 8006aac:	e000      	b.n	8006ab0 <USBD_CDC_Setup+0x12c>
          break;
 8006aae:	bf00      	nop
      }
      break;
 8006ab0:	e006      	b.n	8006ac0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f931 	bl	8007d1c <USBD_CtlError>
      ret = USBD_FAIL;
 8006aba:	2302      	movs	r3, #2
 8006abc:	75fb      	strb	r3, [r7, #23]
      break;
 8006abe:	bf00      	nop
  }

  return ret;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006adc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006ae4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d03a      	beq.n	8006b66 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	331c      	adds	r3, #28
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d029      	beq.n	8006b5a <USBD_CDC_DataIn+0x90>
 8006b06:	78fa      	ldrb	r2, [r7, #3]
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	331c      	adds	r3, #28
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	78f9      	ldrb	r1, [r7, #3]
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	4403      	add	r3, r0
 8006b26:	3338      	adds	r3, #56	@ 0x38
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d110      	bne.n	8006b5a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	440b      	add	r3, r1
 8006b46:	331c      	adds	r3, #28
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b4c:	78f9      	ldrb	r1, [r7, #3]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2200      	movs	r2, #0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fdc1 	bl	80086da <USBD_LL_Transmit>
 8006b58:	e003      	b.n	8006b62 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e000      	b.n	8006b68 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b66:	2302      	movs	r3, #2
  }
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fdec 	bl	8008766 <USBD_LL_GetRxDataSize>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4798      	blx	r3

    return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d014      	beq.n	8006c0a <USBD_CDC_EP0_RxReady+0x44>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006be6:	2bff      	cmp	r3, #255	@ 0xff
 8006be8:	d00f      	beq.n	8006c0a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006bf8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c00:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	22ff      	movs	r2, #255	@ 0xff
 8006c06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2243      	movs	r2, #67	@ 0x43
 8006c20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c22:	4b03      	ldr	r3, [pc, #12]	@ (8006c30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	2000009c 	.word	0x2000009c

08006c34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2243      	movs	r2, #67	@ 0x43
 8006c40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c42:	4b03      	ldr	r3, [pc, #12]	@ (8006c50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000058 	.word	0x20000058

08006c54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2243      	movs	r2, #67	@ 0x43
 8006c60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c62:	4b03      	ldr	r3, [pc, #12]	@ (8006c70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	200000e0 	.word	0x200000e0

08006c74 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	220a      	movs	r2, #10
 8006c80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c82:	4b03      	ldr	r3, [pc, #12]	@ (8006c90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000014 	.word	0x20000014

08006c94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr

08006cf2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d02:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr

08006d18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01c      	beq.n	8006d6c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d115      	bne.n	8006d68 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2181      	movs	r1, #129	@ 0x81
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fcbb 	bl	80086da <USBD_LL_Transmit>

      return USBD_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e002      	b.n	8006d6e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d017      	beq.n	8006dc0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7c1b      	ldrb	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006da2:	2101      	movs	r1, #1
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fcbb 	bl	8008720 <USBD_LL_PrepareReceive>
 8006daa:	e007      	b.n	8006dbc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006db2:	2340      	movs	r3, #64	@ 0x40
 8006db4:	2101      	movs	r1, #1
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fcb2 	bl	8008720 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	e01a      	b.n	8006e18 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	79fa      	ldrb	r2, [r7, #7]
 8006e0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f001 fb1f 	bl	8008454 <USBD_LL_Init>

  return USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d006      	beq.n	8006e42 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	e001      	b.n	8006e46 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fb54 	bl	8008508 <USBD_LL_Start>

  return USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr

08006e7e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00c      	beq.n	8006eb2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3

  return USBD_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fed8 	bl	8007caa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f08:	461a      	mov	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d016      	beq.n	8006f4c <USBD_LL_SetupStage+0x6a>
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d81c      	bhi.n	8006f5c <USBD_LL_SetupStage+0x7a>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <USBD_LL_SetupStage+0x4a>
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d008      	beq.n	8006f3c <USBD_LL_SetupStage+0x5a>
 8006f2a:	e017      	b.n	8006f5c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f9cb 	bl	80072d0 <USBD_StdDevReq>
      break;
 8006f3a:	e01a      	b.n	8006f72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa2d 	bl	80073a4 <USBD_StdItfReq>
      break;
 8006f4a:	e012      	b.n	8006f72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa6d 	bl	8007434 <USBD_StdEPReq>
      break;
 8006f5a:	e00a      	b.n	8006f72 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fb2c 	bl	80085c8 <USBD_LL_StallEP>
      break;
 8006f70:	bf00      	nop
  }

  return USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	460b      	mov	r3, r1
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d14b      	bne.n	8007028 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006f96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d134      	bne.n	800700c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d919      	bls.n	8006fe2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d203      	bcs.n	8006fd0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	e002      	b.n	8006fd6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 ff54 	bl	8007e88 <USBD_CtlContinueRx>
 8006fe0:	e038      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d105      	bne.n	8007004 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 ff51 	bl	8007eac <USBD_CtlSendStatus>
 800700a:	e023      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007012:	2b05      	cmp	r3, #5
 8007014:	d11e      	bne.n	8007054 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800701e:	2100      	movs	r1, #0
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f001 fad1 	bl	80085c8 <USBD_LL_StallEP>
 8007026:	e015      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800703a:	2b03      	cmp	r3, #3
 800703c:	d108      	bne.n	8007050 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	7afa      	ldrb	r2, [r7, #11]
 8007048:	4611      	mov	r1, r2
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	4798      	blx	r3
 800704e:	e001      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	e000      	b.n	8007056 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	460b      	mov	r3, r1
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800706c:	7afb      	ldrb	r3, [r7, #11]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d17f      	bne.n	8007172 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3314      	adds	r3, #20
 8007076:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800707e:	2b02      	cmp	r3, #2
 8007080:	d15c      	bne.n	800713c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	d915      	bls.n	80070ba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	1ad2      	subs	r2, r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 febe 	bl	8007e28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ac:	2300      	movs	r3, #0
 80070ae:	2200      	movs	r2, #0
 80070b0:	2100      	movs	r1, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f001 fb34 	bl	8008720 <USBD_LL_PrepareReceive>
 80070b8:	e04e      	b.n	8007158 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	6912      	ldr	r2, [r2, #16]
 80070c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80070c6:	fb01 f202 	mul.w	r2, r1, r2
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11c      	bne.n	800710a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070d8:	429a      	cmp	r2, r3
 80070da:	d316      	bcc.n	800710a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d20f      	bcs.n	800710a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fe9a 	bl	8007e28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070fc:	2300      	movs	r3, #0
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f001 fb0c 	bl	8008720 <USBD_LL_PrepareReceive>
 8007108:	e026      	b.n	8007158 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800711c:	2b03      	cmp	r3, #3
 800711e:	d105      	bne.n	800712c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800712c:	2180      	movs	r1, #128	@ 0x80
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fa4a 	bl	80085c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fecc 	bl	8007ed2 <USBD_CtlReceiveStatus>
 800713a:	e00d      	b.n	8007158 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007142:	2b04      	cmp	r3, #4
 8007144:	d004      	beq.n	8007150 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007150:	2180      	movs	r1, #128	@ 0x80
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 fa38 	bl	80085c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d11d      	bne.n	800719e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff fe81 	bl	8006e6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007170:	e015      	b.n	800719e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007184:	2b03      	cmp	r3, #3
 8007186:	d108      	bne.n	800719a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	7afa      	ldrb	r2, [r7, #11]
 8007192:	4611      	mov	r1, r2
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	4798      	blx	r3
 8007198:	e001      	b.n	800719e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800719a:	2302      	movs	r3, #2
 800719c:	e000      	b.n	80071a0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b0:	2340      	movs	r3, #64	@ 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	2100      	movs	r1, #0
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f9c1 	bl	800853e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2240      	movs	r2, #64	@ 0x40
 80071c8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071cc:	2340      	movs	r3, #64	@ 0x40
 80071ce:	2200      	movs	r2, #0
 80071d0:	2180      	movs	r1, #128	@ 0x80
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 f9b3 	bl	800853e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2240      	movs	r2, #64	@ 0x40
 80071e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d009      	beq.n	8007220 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6852      	ldr	r2, [r2, #4]
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	4611      	mov	r1, r2
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
  }

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	78fa      	ldrb	r2, [r7, #3]
 800723a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2204      	movs	r2, #4
 8007260:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800727e:	2b04      	cmp	r3, #4
 8007280:	d105      	bne.n	800728e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr

0800729a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d10b      	bne.n	80072c4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072e6:	2b40      	cmp	r3, #64	@ 0x40
 80072e8:	d005      	beq.n	80072f6 <USBD_StdDevReq+0x26>
 80072ea:	2b40      	cmp	r3, #64	@ 0x40
 80072ec:	d84f      	bhi.n	800738e <USBD_StdDevReq+0xbe>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d009      	beq.n	8007306 <USBD_StdDevReq+0x36>
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d14b      	bne.n	800738e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
      break;
 8007304:	e048      	b.n	8007398 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b09      	cmp	r3, #9
 800730c:	d839      	bhi.n	8007382 <USBD_StdDevReq+0xb2>
 800730e:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <USBD_StdDevReq+0x44>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007365 	.word	0x08007365
 8007318:	08007379 	.word	0x08007379
 800731c:	08007383 	.word	0x08007383
 8007320:	0800736f 	.word	0x0800736f
 8007324:	08007383 	.word	0x08007383
 8007328:	08007347 	.word	0x08007347
 800732c:	0800733d 	.word	0x0800733d
 8007330:	08007383 	.word	0x08007383
 8007334:	0800735b 	.word	0x0800735b
 8007338:	08007351 	.word	0x08007351
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f9dc 	bl	80076fc <USBD_GetDescriptor>
          break;
 8007344:	e022      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fb3f 	bl	80079cc <USBD_SetAddress>
          break;
 800734e:	e01d      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fb7e 	bl	8007a54 <USBD_SetConfig>
          break;
 8007358:	e018      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fc07 	bl	8007b70 <USBD_GetConfig>
          break;
 8007362:	e013      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fc37 	bl	8007bda <USBD_GetStatus>
          break;
 800736c:	e00e      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fc65 	bl	8007c40 <USBD_SetFeature>
          break;
 8007376:	e009      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fc74 	bl	8007c68 <USBD_ClrFeature>
          break;
 8007380:	e004      	b.n	800738c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fcc9 	bl	8007d1c <USBD_CtlError>
          break;
 800738a:	bf00      	nop
      }
      break;
 800738c:	e004      	b.n	8007398 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fcc3 	bl	8007d1c <USBD_CtlError>
      break;
 8007396:	bf00      	nop
  }

  return ret;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80073ba:	2b40      	cmp	r3, #64	@ 0x40
 80073bc:	d005      	beq.n	80073ca <USBD_StdItfReq+0x26>
 80073be:	2b40      	cmp	r3, #64	@ 0x40
 80073c0:	d82e      	bhi.n	8007420 <USBD_StdItfReq+0x7c>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <USBD_StdItfReq+0x26>
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d12a      	bne.n	8007420 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d0:	3b01      	subs	r3, #1
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d81d      	bhi.n	8007412 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	889b      	ldrh	r3, [r3, #4]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d813      	bhi.n	8007408 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	88db      	ldrh	r3, [r3, #6]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d110      	bne.n	800741c <USBD_StdItfReq+0x78>
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10d      	bne.n	800741c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fd53 	bl	8007eac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007406:	e009      	b.n	800741c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fc86 	bl	8007d1c <USBD_CtlError>
          break;
 8007410:	e004      	b.n	800741c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc81 	bl	8007d1c <USBD_CtlError>
          break;
 800741a:	e000      	b.n	800741e <USBD_StdItfReq+0x7a>
          break;
 800741c:	bf00      	nop
      }
      break;
 800741e:	e004      	b.n	800742a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fc7a 	bl	8007d1c <USBD_CtlError>
      break;
 8007428:	bf00      	nop
  }

  return USBD_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	889b      	ldrh	r3, [r3, #4]
 8007446:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007450:	2b40      	cmp	r3, #64	@ 0x40
 8007452:	d007      	beq.n	8007464 <USBD_StdEPReq+0x30>
 8007454:	2b40      	cmp	r3, #64	@ 0x40
 8007456:	f200 8146 	bhi.w	80076e6 <USBD_StdEPReq+0x2b2>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <USBD_StdEPReq+0x40>
 800745e:	2b20      	cmp	r3, #32
 8007460:	f040 8141 	bne.w	80076e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
      break;
 8007472:	e13d      	b.n	80076f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800747c:	2b20      	cmp	r3, #32
 800747e:	d10a      	bne.n	8007496 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	e12d      	b.n	80076f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d007      	beq.n	80074ae <USBD_StdEPReq+0x7a>
 800749e:	2b03      	cmp	r3, #3
 80074a0:	f300 811b 	bgt.w	80076da <USBD_StdEPReq+0x2a6>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d072      	beq.n	800758e <USBD_StdEPReq+0x15a>
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d03a      	beq.n	8007522 <USBD_StdEPReq+0xee>
 80074ac:	e115      	b.n	80076da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d002      	beq.n	80074be <USBD_StdEPReq+0x8a>
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d015      	beq.n	80074e8 <USBD_StdEPReq+0xb4>
 80074bc:	e02b      	b.n	8007516 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00c      	beq.n	80074de <USBD_StdEPReq+0xaa>
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	2b80      	cmp	r3, #128	@ 0x80
 80074c8:	d009      	beq.n	80074de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 f87a 	bl	80085c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074d4:	2180      	movs	r1, #128	@ 0x80
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 f876 	bl	80085c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074dc:	e020      	b.n	8007520 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fc1b 	bl	8007d1c <USBD_CtlError>
              break;
 80074e6:	e01b      	b.n	8007520 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	885b      	ldrh	r3, [r3, #2]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10e      	bne.n	800750e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <USBD_StdEPReq+0xda>
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b80      	cmp	r3, #128	@ 0x80
 80074fa:	d008      	beq.n	800750e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	88db      	ldrh	r3, [r3, #6]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 f85d 	bl	80085c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fccc 	bl	8007eac <USBD_CtlSendStatus>

              break;
 8007514:	e004      	b.n	8007520 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fbff 	bl	8007d1c <USBD_CtlError>
              break;
 800751e:	bf00      	nop
          }
          break;
 8007520:	e0e0      	b.n	80076e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007528:	2b02      	cmp	r3, #2
 800752a:	d002      	beq.n	8007532 <USBD_StdEPReq+0xfe>
 800752c:	2b03      	cmp	r3, #3
 800752e:	d015      	beq.n	800755c <USBD_StdEPReq+0x128>
 8007530:	e026      	b.n	8007580 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00c      	beq.n	8007552 <USBD_StdEPReq+0x11e>
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b80      	cmp	r3, #128	@ 0x80
 800753c:	d009      	beq.n	8007552 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 f840 	bl	80085c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007548:	2180      	movs	r1, #128	@ 0x80
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 f83c 	bl	80085c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007550:	e01c      	b.n	800758c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fbe1 	bl	8007d1c <USBD_CtlError>
              break;
 800755a:	e017      	b.n	800758c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	885b      	ldrh	r3, [r3, #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d112      	bne.n	800758a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 f847 	bl	8008606 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fc97 	bl	8007eac <USBD_CtlSendStatus>
              }
              break;
 800757e:	e004      	b.n	800758a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fbca 	bl	8007d1c <USBD_CtlError>
              break;
 8007588:	e000      	b.n	800758c <USBD_StdEPReq+0x158>
              break;
 800758a:	bf00      	nop
          }
          break;
 800758c:	e0aa      	b.n	80076e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007594:	2b02      	cmp	r3, #2
 8007596:	d002      	beq.n	800759e <USBD_StdEPReq+0x16a>
 8007598:	2b03      	cmp	r3, #3
 800759a:	d032      	beq.n	8007602 <USBD_StdEPReq+0x1ce>
 800759c:	e097      	b.n	80076ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <USBD_StdEPReq+0x180>
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	2b80      	cmp	r3, #128	@ 0x80
 80075a8:	d004      	beq.n	80075b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fbb5 	bl	8007d1c <USBD_CtlError>
                break;
 80075b2:	e091      	b.n	80076d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da0b      	bge.n	80075d4 <USBD_StdEPReq+0x1a0>
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	3310      	adds	r3, #16
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	3304      	adds	r3, #4
 80075d2:	e00b      	b.n	80075ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	3304      	adds	r3, #4
 80075ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2202      	movs	r2, #2
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fbf8 	bl	8007df0 <USBD_CtlSendData>
              break;
 8007600:	e06a      	b.n	80076d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007606:	2b00      	cmp	r3, #0
 8007608:	da11      	bge.n	800762e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	f003 020f 	and.w	r2, r3, #15
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	440b      	add	r3, r1
 800761c:	3318      	adds	r3, #24
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d117      	bne.n	8007654 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fb78 	bl	8007d1c <USBD_CtlError>
                  break;
 800762c:	e054      	b.n	80076d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	f003 020f 	and.w	r2, r3, #15
 8007634:	6879      	ldr	r1, [r7, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	440b      	add	r3, r1
 8007640:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fb65 	bl	8007d1c <USBD_CtlError>
                  break;
 8007652:	e041      	b.n	80076d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007658:	2b00      	cmp	r3, #0
 800765a:	da0b      	bge.n	8007674 <USBD_StdEPReq+0x240>
 800765c:	7bbb      	ldrb	r3, [r7, #14]
 800765e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	3310      	adds	r3, #16
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4413      	add	r3, r2
 8007670:	3304      	adds	r3, #4
 8007672:	e00b      	b.n	800768c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800767a:	4613      	mov	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	3304      	adds	r3, #4
 800768c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <USBD_StdEPReq+0x266>
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	2b80      	cmp	r3, #128	@ 0x80
 8007698:	d103      	bne.n	80076a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e00e      	b.n	80076c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 ffcc 	bl	8008644 <USBD_LL_IsStallEP>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2201      	movs	r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e002      	b.n	80076c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2202      	movs	r2, #2
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fb92 	bl	8007df0 <USBD_CtlSendData>
              break;
 80076cc:	e004      	b.n	80076d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fb23 	bl	8007d1c <USBD_CtlError>
              break;
 80076d6:	bf00      	nop
          }
          break;
 80076d8:	e004      	b.n	80076e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fb1d 	bl	8007d1c <USBD_CtlError>
          break;
 80076e2:	bf00      	nop
      }
      break;
 80076e4:	e004      	b.n	80076f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fb17 	bl	8007d1c <USBD_CtlError>
      break;
 80076ee:	bf00      	nop
  }

  return ret;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	885b      	ldrh	r3, [r3, #2]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	b29b      	uxth	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	2b06      	cmp	r3, #6
 800771e:	f200 8128 	bhi.w	8007972 <USBD_GetDescriptor+0x276>
 8007722:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <USBD_GetDescriptor+0x2c>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	08007745 	.word	0x08007745
 800772c:	0800775d 	.word	0x0800775d
 8007730:	0800779d 	.word	0x0800779d
 8007734:	08007973 	.word	0x08007973
 8007738:	08007973 	.word	0x08007973
 800773c:	08007913 	.word	0x08007913
 8007740:	0800793f 	.word	0x0800793f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7c12      	ldrb	r2, [r2, #16]
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
      break;
 800775a:	e112      	b.n	8007982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7c1b      	ldrb	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10d      	bne.n	8007780 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776c:	f107 0208 	add.w	r2, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	2202      	movs	r2, #2
 800777c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800777e:	e100      	b.n	8007982 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	f107 0208 	add.w	r2, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	2202      	movs	r2, #2
 8007798:	701a      	strb	r2, [r3, #0]
      break;
 800779a:	e0f2      	b.n	8007982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	885b      	ldrh	r3, [r3, #2]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	f200 80ac 	bhi.w	8007900 <USBD_GetDescriptor+0x204>
 80077a8:	a201      	add	r2, pc, #4	@ (adr r2, 80077b0 <USBD_GetDescriptor+0xb4>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077c9 	.word	0x080077c9
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	08007831 	.word	0x08007831
 80077bc:	08007865 	.word	0x08007865
 80077c0:	08007899 	.word	0x08007899
 80077c4:	080078cd 	.word	0x080078cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	7c12      	ldrb	r2, [r2, #16]
 80077e0:	f107 0108 	add.w	r1, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ea:	e091      	b.n	8007910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa94 	bl	8007d1c <USBD_CtlError>
            err++;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3301      	adds	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]
          break;
 80077fa:	e089      	b.n	8007910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	7c12      	ldrb	r2, [r2, #16]
 8007814:	f107 0108 	add.w	r1, r7, #8
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781e:	e077      	b.n	8007910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fa7a 	bl	8007d1c <USBD_CtlError>
            err++;
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	3301      	adds	r3, #1
 800782c:	72fb      	strb	r3, [r7, #11]
          break;
 800782e:	e06f      	b.n	8007910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	7c12      	ldrb	r2, [r2, #16]
 8007848:	f107 0108 	add.w	r1, r7, #8
 800784c:	4610      	mov	r0, r2
 800784e:	4798      	blx	r3
 8007850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007852:	e05d      	b.n	8007910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa60 	bl	8007d1c <USBD_CtlError>
            err++;
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	3301      	adds	r3, #1
 8007860:	72fb      	strb	r3, [r7, #11]
          break;
 8007862:	e055      	b.n	8007910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	7c12      	ldrb	r2, [r2, #16]
 800787c:	f107 0108 	add.w	r1, r7, #8
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007886:	e043      	b.n	8007910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa46 	bl	8007d1c <USBD_CtlError>
            err++;
 8007890:	7afb      	ldrb	r3, [r7, #11]
 8007892:	3301      	adds	r3, #1
 8007894:	72fb      	strb	r3, [r7, #11]
          break;
 8007896:	e03b      	b.n	8007910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7c12      	ldrb	r2, [r2, #16]
 80078b0:	f107 0108 	add.w	r1, r7, #8
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
 80078b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ba:	e029      	b.n	8007910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa2c 	bl	8007d1c <USBD_CtlError>
            err++;
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	3301      	adds	r3, #1
 80078c8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ca:	e021      	b.n	8007910 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	7c12      	ldrb	r2, [r2, #16]
 80078e4:	f107 0108 	add.w	r1, r7, #8
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ee:	e00f      	b.n	8007910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa12 	bl	8007d1c <USBD_CtlError>
            err++;
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	3301      	adds	r3, #1
 80078fc:	72fb      	strb	r3, [r7, #11]
          break;
 80078fe:	e007      	b.n	8007910 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa0a 	bl	8007d1c <USBD_CtlError>
          err++;
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	3301      	adds	r3, #1
 800790c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800790e:	e038      	b.n	8007982 <USBD_GetDescriptor+0x286>
 8007910:	e037      	b.n	8007982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7c1b      	ldrb	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d109      	bne.n	800792e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007922:	f107 0208 	add.w	r2, r7, #8
 8007926:	4610      	mov	r0, r2
 8007928:	4798      	blx	r3
 800792a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800792c:	e029      	b.n	8007982 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f9f3 	bl	8007d1c <USBD_CtlError>
        err++;
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	3301      	adds	r3, #1
 800793a:	72fb      	strb	r3, [r7, #11]
      break;
 800793c:	e021      	b.n	8007982 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7c1b      	ldrb	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10d      	bne.n	8007962 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800794c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	4610      	mov	r0, r2
 8007954:	4798      	blx	r3
 8007956:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3301      	adds	r3, #1
 800795c:	2207      	movs	r2, #7
 800795e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007960:	e00f      	b.n	8007982 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9d9 	bl	8007d1c <USBD_CtlError>
        err++;
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	3301      	adds	r3, #1
 800796e:	72fb      	strb	r3, [r7, #11]
      break;
 8007970:	e007      	b.n	8007982 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f9d1 	bl	8007d1c <USBD_CtlError>
      err++;
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	3301      	adds	r3, #1
 800797e:	72fb      	strb	r3, [r7, #11]
      break;
 8007980:	bf00      	nop
  }

  if (err != 0U)
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11c      	bne.n	80079c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007988:	893b      	ldrh	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d011      	beq.n	80079b2 <USBD_GetDescriptor+0x2b6>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88db      	ldrh	r3, [r3, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00d      	beq.n	80079b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	88da      	ldrh	r2, [r3, #6]
 800799a:	893b      	ldrh	r3, [r7, #8]
 800799c:	4293      	cmp	r3, r2
 800799e:	bf28      	it	cs
 80079a0:	4613      	movcs	r3, r2
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079a6:	893b      	ldrh	r3, [r7, #8]
 80079a8:	461a      	mov	r2, r3
 80079aa:	68f9      	ldr	r1, [r7, #12]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fa1f 	bl	8007df0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	88db      	ldrh	r3, [r3, #6]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa76 	bl	8007eac <USBD_CtlSendStatus>
 80079c0:	e000      	b.n	80079c4 <USBD_GetDescriptor+0x2c8>
    return;
 80079c2:	bf00      	nop
    }
  }
}
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop

080079cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	889b      	ldrh	r3, [r3, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d130      	bne.n	8007a40 <USBD_SetAddress+0x74>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88db      	ldrh	r3, [r3, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d12c      	bne.n	8007a40 <USBD_SetAddress+0x74>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80079ec:	d828      	bhi.n	8007a40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	885b      	ldrh	r3, [r3, #2]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d104      	bne.n	8007a0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f988 	bl	8007d1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0c:	e01d      	b.n	8007a4a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7bfa      	ldrb	r2, [r7, #15]
 8007a12:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fe3e 	bl	800869c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa43 	bl	8007eac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a34:	e009      	b.n	8007a4a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	e004      	b.n	8007a4a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f96a 	bl	8007d1c <USBD_CtlError>
  }
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b41      	ldr	r3, [pc, #260]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007a66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a68:	4b40      	ldr	r3, [pc, #256]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d904      	bls.n	8007a7a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f952 	bl	8007d1c <USBD_CtlError>
 8007a78:	e075      	b.n	8007b66 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d002      	beq.n	8007a8a <USBD_SetConfig+0x36>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d023      	beq.n	8007ad0 <USBD_SetConfig+0x7c>
 8007a88:	e062      	b.n	8007b50 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a8a:	4b38      	ldr	r3, [pc, #224]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01a      	beq.n	8007ac8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a92:	4b36      	ldr	r3, [pc, #216]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007aa4:	4b31      	ldr	r3, [pc, #196]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff f9e7 	bl	8006e7e <USBD_SetClassConfig>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d104      	bne.n	8007ac0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f92f 	bl	8007d1c <USBD_CtlError>
            return;
 8007abe:	e052      	b.n	8007b66 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f9f3 	bl	8007eac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ac6:	e04e      	b.n	8007b66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f9ef 	bl	8007eac <USBD_CtlSendStatus>
        break;
 8007ace:	e04a      	b.n	8007b66 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ad0:	4b26      	ldr	r3, [pc, #152]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d112      	bne.n	8007afe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007ae0:	4b22      	ldr	r3, [pc, #136]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007aea:	4b20      	ldr	r3, [pc, #128]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff f9e3 	bl	8006ebc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9d8 	bl	8007eac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007afc:	e033      	b.n	8007b66 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007afe:	4b1b      	ldr	r3, [pc, #108]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d01d      	beq.n	8007b48 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff f9d1 	bl	8006ebc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b1a:	4b14      	ldr	r3, [pc, #80]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b24:	4b11      	ldr	r3, [pc, #68]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff f9a7 	bl	8006e7e <USBD_SetClassConfig>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d104      	bne.n	8007b40 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f8ef 	bl	8007d1c <USBD_CtlError>
            return;
 8007b3e:	e012      	b.n	8007b66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f9b3 	bl	8007eac <USBD_CtlSendStatus>
        break;
 8007b46:	e00e      	b.n	8007b66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f9af 	bl	8007eac <USBD_CtlSendStatus>
        break;
 8007b4e:	e00a      	b.n	8007b66 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8e2 	bl	8007d1c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b58:	4b04      	ldr	r3, [pc, #16]	@ (8007b6c <USBD_SetConfig+0x118>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff f9ac 	bl	8006ebc <USBD_ClrClassConfig>
        break;
 8007b64:	bf00      	nop
    }
  }
}
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	200002c0 	.word	0x200002c0

08007b70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	88db      	ldrh	r3, [r3, #6]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d004      	beq.n	8007b8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f8c9 	bl	8007d1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b8a:	e022      	b.n	8007bd2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	dc02      	bgt.n	8007b9c <USBD_GetConfig+0x2c>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dc03      	bgt.n	8007ba2 <USBD_GetConfig+0x32>
 8007b9a:	e015      	b.n	8007bc8 <USBD_GetConfig+0x58>
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_GetConfig+0x48>
 8007ba0:	e012      	b.n	8007bc8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3308      	adds	r3, #8
 8007bac:	2201      	movs	r2, #1
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f91d 	bl	8007df0 <USBD_CtlSendData>
        break;
 8007bb6:	e00c      	b.n	8007bd2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f915 	bl	8007df0 <USBD_CtlSendData>
        break;
 8007bc6:	e004      	b.n	8007bd2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8a6 	bl	8007d1c <USBD_CtlError>
        break;
 8007bd0:	bf00      	nop
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bea:	3b01      	subs	r3, #1
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d81e      	bhi.n	8007c2e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	88db      	ldrh	r3, [r3, #6]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d004      	beq.n	8007c02 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f88e 	bl	8007d1c <USBD_CtlError>
        break;
 8007c00:	e01a      	b.n	8007c38 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f043 0202 	orr.w	r2, r3, #2
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	330c      	adds	r3, #12
 8007c22:	2202      	movs	r2, #2
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f8e2 	bl	8007df0 <USBD_CtlSendData>
      break;
 8007c2c:	e004      	b.n	8007c38 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f873 	bl	8007d1c <USBD_CtlError>
      break;
 8007c36:	bf00      	nop
  }
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	885b      	ldrh	r3, [r3, #2]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d106      	bne.n	8007c60 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f926 	bl	8007eac <USBD_CtlSendStatus>
  }
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d80b      	bhi.n	8007c96 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	885b      	ldrh	r3, [r3, #2]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d10c      	bne.n	8007ca0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f90c 	bl	8007eac <USBD_CtlSendStatus>
      }
      break;
 8007c94:	e004      	b.n	8007ca0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f83f 	bl	8007d1c <USBD_CtlError>
      break;
 8007c9e:	e000      	b.n	8007ca2 <USBD_ClrFeature+0x3a>
      break;
 8007ca0:	bf00      	nop
  }
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	785a      	ldrb	r2, [r3, #1]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	3302      	adds	r3, #2
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	3303      	adds	r3, #3
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	3305      	adds	r3, #5
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	3306      	adds	r3, #6
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	3307      	adds	r3, #7
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4413      	add	r3, r2
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	80da      	strh	r2, [r3, #6]

}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d26:	2180      	movs	r1, #128	@ 0x80
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fc4d 	bl	80085c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d2e:	2100      	movs	r1, #0
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc49 	bl	80085c8 <USBD_LL_StallEP>
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b086      	sub	sp, #24
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d032      	beq.n	8007dba <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f834 	bl	8007dc2 <USBD_GetLen>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	75fa      	strb	r2, [r7, #23]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4413      	add	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	75fa      	strb	r2, [r7, #23]
 8007d80:	461a      	mov	r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	2203      	movs	r2, #3
 8007d88:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d8a:	e012      	b.n	8007db2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	60fa      	str	r2, [r7, #12]
 8007d92:	7dfa      	ldrb	r2, [r7, #23]
 8007d94:	1c51      	adds	r1, r2, #1
 8007d96:	75f9      	strb	r1, [r7, #23]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	75fa      	strb	r2, [r7, #23]
 8007da8:	461a      	mov	r2, r3
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4413      	add	r3, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e8      	bne.n	8007d8c <USBD_GetString+0x4e>
    }
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007dce:	e005      	b.n	8007ddc <USBD_GetLen+0x1a>
  {
    len++;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1f5      	bne.n	8007dd0 <USBD_GetLen+0xe>
  }

  return len;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2202      	movs	r2, #2
 8007e02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e0c:	88fa      	ldrh	r2, [r7, #6]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	2100      	movs	r1, #0
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fc5e 	bl	80086da <USBD_LL_Transmit>

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fc4c 	bl	80086da <USBD_LL_Transmit>

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4613      	mov	r3, r2
 8007e58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e62:	88fa      	ldrh	r2, [r7, #6]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e6a:	88fa      	ldrh	r2, [r7, #6]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	2100      	movs	r1, #0
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fc51 	bl	8008720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	4613      	mov	r3, r2
 8007e94:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e96:	88fb      	ldrh	r3, [r7, #6]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fc3f 	bl	8008720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fc09 	bl	80086da <USBD_LL_Transmit>

  return USBD_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2205      	movs	r2, #5
 8007ede:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc19 	bl	8008720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007efc:	2200      	movs	r2, #0
 8007efe:	4912      	ldr	r1, [pc, #72]	@ (8007f48 <MX_USB_DEVICE_Init+0x50>)
 8007f00:	4812      	ldr	r0, [pc, #72]	@ (8007f4c <MX_USB_DEVICE_Init+0x54>)
 8007f02:	f7fe ff62 	bl	8006dca <USBD_Init>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f0c:	f7f8 fa72 	bl	80003f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f10:	490f      	ldr	r1, [pc, #60]	@ (8007f50 <MX_USB_DEVICE_Init+0x58>)
 8007f12:	480e      	ldr	r0, [pc, #56]	@ (8007f4c <MX_USB_DEVICE_Init+0x54>)
 8007f14:	f7fe ff84 	bl	8006e20 <USBD_RegisterClass>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f1e:	f7f8 fa69 	bl	80003f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f22:	490c      	ldr	r1, [pc, #48]	@ (8007f54 <MX_USB_DEVICE_Init+0x5c>)
 8007f24:	4809      	ldr	r0, [pc, #36]	@ (8007f4c <MX_USB_DEVICE_Init+0x54>)
 8007f26:	f7fe feb5 	bl	8006c94 <USBD_CDC_RegisterInterface>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f30:	f7f8 fa60 	bl	80003f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f34:	4805      	ldr	r0, [pc, #20]	@ (8007f4c <MX_USB_DEVICE_Init+0x54>)
 8007f36:	f7fe ff8c 	bl	8006e52 <USBD_Start>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f40:	f7f8 fa58 	bl	80003f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f44:	bf00      	nop
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20000134 	.word	0x20000134
 8007f4c:	200002c4 	.word	0x200002c4
 8007f50:	20000020 	.word	0x20000020
 8007f54:	20000124 	.word	0x20000124

08007f58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4905      	ldr	r1, [pc, #20]	@ (8007f74 <CDC_Init_FS+0x1c>)
 8007f60:	4805      	ldr	r0, [pc, #20]	@ (8007f78 <CDC_Init_FS+0x20>)
 8007f62:	f7fe fead 	bl	8006cc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f66:	4905      	ldr	r1, [pc, #20]	@ (8007f7c <CDC_Init_FS+0x24>)
 8007f68:	4803      	ldr	r0, [pc, #12]	@ (8007f78 <CDC_Init_FS+0x20>)
 8007f6a:	f7fe fec2 	bl	8006cf2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000988 	.word	0x20000988
 8007f78:	200002c4 	.word	0x200002c4
 8007f7c:	20000588 	.word	0x20000588

08007f80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr
	...

08007f90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	2b23      	cmp	r3, #35	@ 0x23
 8007fa4:	d84a      	bhi.n	800803c <CDC_Control_FS+0xac>
 8007fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <CDC_Control_FS+0x1c>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	0800803d 	.word	0x0800803d
 8007fb0:	0800803d 	.word	0x0800803d
 8007fb4:	0800803d 	.word	0x0800803d
 8007fb8:	0800803d 	.word	0x0800803d
 8007fbc:	0800803d 	.word	0x0800803d
 8007fc0:	0800803d 	.word	0x0800803d
 8007fc4:	0800803d 	.word	0x0800803d
 8007fc8:	0800803d 	.word	0x0800803d
 8007fcc:	0800803d 	.word	0x0800803d
 8007fd0:	0800803d 	.word	0x0800803d
 8007fd4:	0800803d 	.word	0x0800803d
 8007fd8:	0800803d 	.word	0x0800803d
 8007fdc:	0800803d 	.word	0x0800803d
 8007fe0:	0800803d 	.word	0x0800803d
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	0800803d 	.word	0x0800803d
 8007ff0:	0800803d 	.word	0x0800803d
 8007ff4:	0800803d 	.word	0x0800803d
 8007ff8:	0800803d 	.word	0x0800803d
 8007ffc:	0800803d 	.word	0x0800803d
 8008000:	0800803d 	.word	0x0800803d
 8008004:	0800803d 	.word	0x0800803d
 8008008:	0800803d 	.word	0x0800803d
 800800c:	0800803d 	.word	0x0800803d
 8008010:	0800803d 	.word	0x0800803d
 8008014:	0800803d 	.word	0x0800803d
 8008018:	0800803d 	.word	0x0800803d
 800801c:	0800803d 	.word	0x0800803d
 8008020:	0800803d 	.word	0x0800803d
 8008024:	0800803d 	.word	0x0800803d
 8008028:	0800803d 	.word	0x0800803d
 800802c:	0800803d 	.word	0x0800803d
 8008030:	0800803d 	.word	0x0800803d
 8008034:	0800803d 	.word	0x0800803d
 8008038:	0800803d 	.word	0x0800803d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800803c:	bf00      	nop
  }

  return (USBD_OK);
 800803e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008040:	4618      	mov	r0, r3
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bc80      	pop	{r7}
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop

0800804c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	4809      	ldr	r0, [pc, #36]	@ (8008080 <CDC_Receive_FS+0x34>)
 800805a:	f7fe fe4a 	bl	8006cf2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800805e:	4808      	ldr	r0, [pc, #32]	@ (8008080 <CDC_Receive_FS+0x34>)
 8008060:	f7fe fe89 	bl	8006d76 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	73fb      	strb	r3, [r7, #15]
  memcpy(Receive_CDC_Buffer, Buf, len);
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	461a      	mov	r2, r3
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4804      	ldr	r0, [pc, #16]	@ (8008084 <CDC_Receive_FS+0x38>)
 8008072:	f000 fc03 	bl	800887c <memcpy>
  return (USBD_OK);
 8008076:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	200002c4 	.word	0x200002c4
 8008084:	20000270 	.word	0x20000270

08008088 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008098:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <CDC_Transmit_FS+0x48>)
 800809a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800809e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e00b      	b.n	80080c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080ae:	887b      	ldrh	r3, [r7, #2]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	4806      	ldr	r0, [pc, #24]	@ (80080d0 <CDC_Transmit_FS+0x48>)
 80080b6:	f7fe fe03 	bl	8006cc0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080ba:	4805      	ldr	r0, [pc, #20]	@ (80080d0 <CDC_Transmit_FS+0x48>)
 80080bc:	f7fe fe2c 	bl	8006d18 <USBD_CDC_TransmitPacket>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200002c4 	.word	0x200002c4

080080d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2212      	movs	r2, #18
 80080e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	@ (80080f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000150 	.word	0x20000150

080080f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2204      	movs	r2, #4
 8008108:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800810a:	4b03      	ldr	r3, [pc, #12]	@ (8008118 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	20000164 	.word	0x20000164

0800811c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d105      	bne.n	800813a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	4907      	ldr	r1, [pc, #28]	@ (8008150 <USBD_FS_ProductStrDescriptor+0x34>)
 8008132:	4808      	ldr	r0, [pc, #32]	@ (8008154 <USBD_FS_ProductStrDescriptor+0x38>)
 8008134:	f7ff fe03 	bl	8007d3e <USBD_GetString>
 8008138:	e004      	b.n	8008144 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	4904      	ldr	r1, [pc, #16]	@ (8008150 <USBD_FS_ProductStrDescriptor+0x34>)
 800813e:	4805      	ldr	r0, [pc, #20]	@ (8008154 <USBD_FS_ProductStrDescriptor+0x38>)
 8008140:	f7ff fdfd 	bl	8007d3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008144:	4b02      	ldr	r3, [pc, #8]	@ (8008150 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000d88 	.word	0x20000d88
 8008154:	080088b0 	.word	0x080088b0

08008158 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	4603      	mov	r3, r0
 8008160:	6039      	str	r1, [r7, #0]
 8008162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	4904      	ldr	r1, [pc, #16]	@ (8008178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008168:	4804      	ldr	r0, [pc, #16]	@ (800817c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800816a:	f7ff fde8 	bl	8007d3e <USBD_GetString>
  return USBD_StrDesc;
 800816e:	4b02      	ldr	r3, [pc, #8]	@ (8008178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000d88 	.word	0x20000d88
 800817c:	080088c4 	.word	0x080088c4

08008180 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	221a      	movs	r2, #26
 8008190:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008192:	f000 f843 	bl	800821c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008196:	4b02      	ldr	r3, [pc, #8]	@ (80081a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000168 	.word	0x20000168

080081a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	6039      	str	r1, [r7, #0]
 80081ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d105      	bne.n	80081c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4907      	ldr	r1, [pc, #28]	@ (80081d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ba:	4808      	ldr	r0, [pc, #32]	@ (80081dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80081bc:	f7ff fdbf 	bl	8007d3e <USBD_GetString>
 80081c0:	e004      	b.n	80081cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	4904      	ldr	r1, [pc, #16]	@ (80081d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081c6:	4805      	ldr	r0, [pc, #20]	@ (80081dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80081c8:	f7ff fdb9 	bl	8007d3e <USBD_GetString>
  }
  return USBD_StrDesc;
 80081cc:	4b02      	ldr	r3, [pc, #8]	@ (80081d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000d88 	.word	0x20000d88
 80081dc:	080088d8 	.word	0x080088d8

080081e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d105      	bne.n	80081fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4907      	ldr	r1, [pc, #28]	@ (8008214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081f6:	4808      	ldr	r0, [pc, #32]	@ (8008218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081f8:	f7ff fda1 	bl	8007d3e <USBD_GetString>
 80081fc:	e004      	b.n	8008208 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	4904      	ldr	r1, [pc, #16]	@ (8008214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008202:	4805      	ldr	r0, [pc, #20]	@ (8008218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008204:	f7ff fd9b 	bl	8007d3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008208:	4b02      	ldr	r3, [pc, #8]	@ (8008214 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000d88 	.word	0x20000d88
 8008218:	080088e4 	.word	0x080088e4

0800821c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4413      	add	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d009      	beq.n	8008244 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008230:	2208      	movs	r2, #8
 8008232:	4906      	ldr	r1, [pc, #24]	@ (800824c <Get_SerialNum+0x30>)
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f80d 	bl	8008254 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800823a:	2204      	movs	r2, #4
 800823c:	4904      	ldr	r1, [pc, #16]	@ (8008250 <Get_SerialNum+0x34>)
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f808 	bl	8008254 <IntToUnicode>
  }
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	2000016a 	.word	0x2000016a
 8008250:	2000017a 	.word	0x2000017a

08008254 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4613      	mov	r3, r2
 8008260:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]
 800826a:	e027      	b.n	80082bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	0f1b      	lsrs	r3, r3, #28
 8008270:	2b09      	cmp	r3, #9
 8008272:	d80b      	bhi.n	800828c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	0f1b      	lsrs	r3, r3, #28
 8008278:	b2da      	uxtb	r2, r3
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4619      	mov	r1, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	440b      	add	r3, r1
 8008284:	3230      	adds	r2, #48	@ 0x30
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	e00a      	b.n	80082a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	0f1b      	lsrs	r3, r3, #28
 8008290:	b2da      	uxtb	r2, r3
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	4619      	mov	r1, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	440b      	add	r3, r1
 800829c:	3237      	adds	r2, #55	@ 0x37
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	3301      	adds	r3, #1
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4413      	add	r3, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	3301      	adds	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
 80082bc:	7dfa      	ldrb	r2, [r7, #23]
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d3d3      	bcc.n	800826c <IntToUnicode+0x18>
  }
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr

080082d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008314 <HAL_PCD_MspInit+0x44>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d113      	bne.n	800830a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008318 <HAL_PCD_MspInit+0x48>)
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008318 <HAL_PCD_MspInit+0x48>)
 80082e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082ec:	61d3      	str	r3, [r2, #28]
 80082ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008318 <HAL_PCD_MspInit+0x48>)
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80082fa:	2200      	movs	r2, #0
 80082fc:	2100      	movs	r1, #0
 80082fe:	2014      	movs	r0, #20
 8008300:	f7f8 fb0f 	bl	8000922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008304:	2014      	movs	r0, #20
 8008306:	f7f8 fb28 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40005c00 	.word	0x40005c00
 8008318:	40021000 	.word	0x40021000

0800831c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f7fe fdd5 	bl	8006ee2 <USBD_LL_SetupStage>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	440b      	add	r3, r1
 8008360:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	4619      	mov	r1, r3
 800836a:	f7fe fe07 	bl	8006f7c <USBD_LL_DataOutStage>
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	460b      	mov	r3, r1
 8008380:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8008388:	78fa      	ldrb	r2, [r7, #3]
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	440b      	add	r3, r1
 8008396:	333c      	adds	r3, #60	@ 0x3c
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	4619      	mov	r1, r3
 800839e:	f7fe fe5e 	bl	800705e <USBD_LL_DataInStage>
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe ff6e 	bl	800729a <USBD_LL_SOF>
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083ce:	2301      	movs	r3, #1
 80083d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d001      	beq.n	80083de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083da:	f7f8 f80b 	bl	80003f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083e4:	7bfa      	ldrb	r2, [r7, #15]
 80083e6:	4611      	mov	r1, r2
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe ff1e 	bl	800722a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fe fed7 	bl	80071a8 <USBD_LL_Reset>
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe ff18 	bl	8007248 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <HAL_PCD_SuspendCallback+0x30>)
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	4a03      	ldr	r2, [pc, #12]	@ (8008434 <HAL_PCD_SuspendCallback+0x30>)
 8008426:	f043 0306 	orr.w	r3, r3, #6
 800842a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	e000ed00 	.word	0xe000ed00

08008438 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe ff12 	bl	8007270 <USBD_LL_Resume>
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800845c:	4a28      	ldr	r2, [pc, #160]	@ (8008500 <USBD_LL_Init+0xac>)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a26      	ldr	r2, [pc, #152]	@ (8008500 <USBD_LL_Init+0xac>)
 8008468:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800846c:	4b24      	ldr	r3, [pc, #144]	@ (8008500 <USBD_LL_Init+0xac>)
 800846e:	4a25      	ldr	r2, [pc, #148]	@ (8008504 <USBD_LL_Init+0xb0>)
 8008470:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008472:	4b23      	ldr	r3, [pc, #140]	@ (8008500 <USBD_LL_Init+0xac>)
 8008474:	2208      	movs	r2, #8
 8008476:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008478:	4b21      	ldr	r3, [pc, #132]	@ (8008500 <USBD_LL_Init+0xac>)
 800847a:	2202      	movs	r2, #2
 800847c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800847e:	4b20      	ldr	r3, [pc, #128]	@ (8008500 <USBD_LL_Init+0xac>)
 8008480:	2200      	movs	r2, #0
 8008482:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008484:	4b1e      	ldr	r3, [pc, #120]	@ (8008500 <USBD_LL_Init+0xac>)
 8008486:	2200      	movs	r2, #0
 8008488:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800848a:	4b1d      	ldr	r3, [pc, #116]	@ (8008500 <USBD_LL_Init+0xac>)
 800848c:	2200      	movs	r2, #0
 800848e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008490:	481b      	ldr	r0, [pc, #108]	@ (8008500 <USBD_LL_Init+0xac>)
 8008492:	f7f8 fe46 	bl	8001122 <HAL_PCD_Init>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800849c:	f7f7 ffaa 	bl	80003f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084a6:	2318      	movs	r3, #24
 80084a8:	2200      	movs	r2, #0
 80084aa:	2100      	movs	r1, #0
 80084ac:	f7fa fb64 	bl	8002b78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084b6:	2358      	movs	r3, #88	@ 0x58
 80084b8:	2200      	movs	r2, #0
 80084ba:	2180      	movs	r1, #128	@ 0x80
 80084bc:	f7fa fb5c 	bl	8002b78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084c6:	23c0      	movs	r3, #192	@ 0xc0
 80084c8:	2200      	movs	r2, #0
 80084ca:	2181      	movs	r1, #129	@ 0x81
 80084cc:	f7fa fb54 	bl	8002b78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084d6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80084da:	2200      	movs	r2, #0
 80084dc:	2101      	movs	r1, #1
 80084de:	f7fa fb4b 	bl	8002b78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084ec:	2200      	movs	r2, #0
 80084ee:	2182      	movs	r1, #130	@ 0x82
 80084f0:	f7fa fb42 	bl	8002b78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000f88 	.word	0x20000f88
 8008504:	40005c00 	.word	0x40005c00

08008508 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800851e:	4618      	mov	r0, r3
 8008520:	f7f8 fefe 	bl	8001320 <HAL_PCD_Start>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f94e 	bl	80087cc <USBD_Get_USB_Status>
 8008530:	4603      	mov	r3, r0
 8008532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008534:	7bbb      	ldrb	r3, [r7, #14]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	4608      	mov	r0, r1
 8008548:	4611      	mov	r1, r2
 800854a:	461a      	mov	r2, r3
 800854c:	4603      	mov	r3, r0
 800854e:	70fb      	strb	r3, [r7, #3]
 8008550:	460b      	mov	r3, r1
 8008552:	70bb      	strb	r3, [r7, #2]
 8008554:	4613      	mov	r3, r2
 8008556:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008566:	78bb      	ldrb	r3, [r7, #2]
 8008568:	883a      	ldrh	r2, [r7, #0]
 800856a:	78f9      	ldrb	r1, [r7, #3]
 800856c:	f7f9 f853 	bl	8001616 <HAL_PCD_EP_Open>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f928 	bl	80087cc <USBD_Get_USB_Status>
 800857c:	4603      	mov	r3, r0
 800857e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008580:	7bbb      	ldrb	r3, [r7, #14]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085a4:	78fa      	ldrb	r2, [r7, #3]
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7f9 f891 	bl	80016d0 <HAL_PCD_EP_Close>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 f909 	bl	80087cc <USBD_Get_USB_Status>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085be:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7f9 f939 	bl	800185e <HAL_PCD_EP_SetStall>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f8ea 	bl	80087cc <USBD_Get_USB_Status>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	460b      	mov	r3, r1
 8008610:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008620:	78fa      	ldrb	r2, [r7, #3]
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7f9 f97a 	bl	800191e <HAL_PCD_EP_ClrStall>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f8cb 	bl	80087cc <USBD_Get_USB_Status>
 8008636:	4603      	mov	r3, r0
 8008638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863a:	7bbb      	ldrb	r3, [r7, #14]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008656:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800865c:	2b00      	cmp	r3, #0
 800865e:	da0c      	bge.n	800867a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008666:	68f9      	ldr	r1, [r7, #12]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	440b      	add	r3, r1
 8008674:	3302      	adds	r3, #2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	e00b      	b.n	8008692 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	440b      	add	r3, r1
 800868c:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8008690:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7f8 ff86 	bl	80015cc <HAL_PCD_SetAddress>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f880 	bl	80087cc <USBD_Get_USB_Status>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	461a      	mov	r2, r3
 80086e6:	460b      	mov	r3, r1
 80086e8:	72fb      	strb	r3, [r7, #11]
 80086ea:	4613      	mov	r3, r2
 80086ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086fc:	893b      	ldrh	r3, [r7, #8]
 80086fe:	7af9      	ldrb	r1, [r7, #11]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	f7f9 f875 	bl	80017f0 <HAL_PCD_EP_Transmit>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f85d 	bl	80087cc <USBD_Get_USB_Status>
 8008712:	4603      	mov	r3, r0
 8008714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008716:	7dbb      	ldrb	r3, [r7, #22]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	607a      	str	r2, [r7, #4]
 800872a:	461a      	mov	r2, r3
 800872c:	460b      	mov	r3, r1
 800872e:	72fb      	strb	r3, [r7, #11]
 8008730:	4613      	mov	r3, r2
 8008732:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008742:	893b      	ldrh	r3, [r7, #8]
 8008744:	7af9      	ldrb	r1, [r7, #11]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	f7f9 f80a 	bl	8001760 <HAL_PCD_EP_Receive>
 800874c:	4603      	mov	r3, r0
 800874e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f83a 	bl	80087cc <USBD_Get_USB_Status>
 8008758:	4603      	mov	r3, r0
 800875a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800875c:	7dbb      	ldrb	r3, [r7, #22]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7f9 f820 	bl	80017c2 <HAL_PCD_EP_GetRxCount>
 8008782:	4603      	mov	r3, r0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008794:	4b02      	ldr	r3, [pc, #8]	@ (80087a0 <USBD_static_malloc+0x14>)
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr
 80087a0:	20001278 	.word	0x20001278

080087a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr

080087b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr

080087cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d817      	bhi.n	8008810 <USBD_Get_USB_Status+0x44>
 80087e0:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <USBD_Get_USB_Status+0x1c>)
 80087e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e6:	bf00      	nop
 80087e8:	080087f9 	.word	0x080087f9
 80087ec:	080087ff 	.word	0x080087ff
 80087f0:	08008805 	.word	0x08008805
 80087f4:	0800880b 	.word	0x0800880b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
    break;
 80087fc:	e00b      	b.n	8008816 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087fe:	2302      	movs	r3, #2
 8008800:	73fb      	strb	r3, [r7, #15]
    break;
 8008802:	e008      	b.n	8008816 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
    break;
 8008808:	e005      	b.n	8008816 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800880a:	2302      	movs	r3, #2
 800880c:	73fb      	strb	r3, [r7, #15]
    break;
 800880e:	e002      	b.n	8008816 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008810:	2302      	movs	r3, #2
 8008812:	73fb      	strb	r3, [r7, #15]
    break;
 8008814:	bf00      	nop
  }
  return usb_status;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	bc80      	pop	{r7}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <memset>:
 8008824:	4603      	mov	r3, r0
 8008826:	4402      	add	r2, r0
 8008828:	4293      	cmp	r3, r2
 800882a:	d100      	bne.n	800882e <memset+0xa>
 800882c:	4770      	bx	lr
 800882e:	f803 1b01 	strb.w	r1, [r3], #1
 8008832:	e7f9      	b.n	8008828 <memset+0x4>

08008834 <__libc_init_array>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	2600      	movs	r6, #0
 8008838:	4d0c      	ldr	r5, [pc, #48]	@ (800886c <__libc_init_array+0x38>)
 800883a:	4c0d      	ldr	r4, [pc, #52]	@ (8008870 <__libc_init_array+0x3c>)
 800883c:	1b64      	subs	r4, r4, r5
 800883e:	10a4      	asrs	r4, r4, #2
 8008840:	42a6      	cmp	r6, r4
 8008842:	d109      	bne.n	8008858 <__libc_init_array+0x24>
 8008844:	f000 f828 	bl	8008898 <_init>
 8008848:	2600      	movs	r6, #0
 800884a:	4d0a      	ldr	r5, [pc, #40]	@ (8008874 <__libc_init_array+0x40>)
 800884c:	4c0a      	ldr	r4, [pc, #40]	@ (8008878 <__libc_init_array+0x44>)
 800884e:	1b64      	subs	r4, r4, r5
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	42a6      	cmp	r6, r4
 8008854:	d105      	bne.n	8008862 <__libc_init_array+0x2e>
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	f855 3b04 	ldr.w	r3, [r5], #4
 800885c:	4798      	blx	r3
 800885e:	3601      	adds	r6, #1
 8008860:	e7ee      	b.n	8008840 <__libc_init_array+0xc>
 8008862:	f855 3b04 	ldr.w	r3, [r5], #4
 8008866:	4798      	blx	r3
 8008868:	3601      	adds	r6, #1
 800886a:	e7f2      	b.n	8008852 <__libc_init_array+0x1e>
 800886c:	08008920 	.word	0x08008920
 8008870:	08008920 	.word	0x08008920
 8008874:	08008920 	.word	0x08008920
 8008878:	08008924 	.word	0x08008924

0800887c <memcpy>:
 800887c:	440a      	add	r2, r1
 800887e:	4291      	cmp	r1, r2
 8008880:	f100 33ff 	add.w	r3, r0, #4294967295
 8008884:	d100      	bne.n	8008888 <memcpy+0xc>
 8008886:	4770      	bx	lr
 8008888:	b510      	push	{r4, lr}
 800888a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888e:	4291      	cmp	r1, r2
 8008890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008894:	d1f9      	bne.n	800888a <memcpy+0xe>
 8008896:	bd10      	pop	{r4, pc}

08008898 <_init>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	bf00      	nop
 800889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889e:	bc08      	pop	{r3}
 80088a0:	469e      	mov	lr, r3
 80088a2:	4770      	bx	lr

080088a4 <_fini>:
 80088a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a6:	bf00      	nop
 80088a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088aa:	bc08      	pop	{r3}
 80088ac:	469e      	mov	lr, r3
 80088ae:	4770      	bx	lr
